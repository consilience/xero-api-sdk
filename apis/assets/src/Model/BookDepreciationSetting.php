<?php

namespace Consilience\Xero\AssetsSdk\Model;

/**
 * BookDepreciationSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AssetsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Xero Assets API
 *
 * This the Xero Assets API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AssetsSdk\ObjectSerializer;

/**
 * BookDepreciationSetting Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AssetsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BookDepreciationSetting implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BookDepreciationSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'depreciationMethod' => 'string',
        'averagingMethod' => 'string',
        'depreciationRate' => 'float',
        'effectiveLifeYears' => 'int',
        'depreciationCalculationMethod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'depreciationMethod' => null,
        'averagingMethod' => null,
        'depreciationRate' => 'float',
        'effectiveLifeYears' => null,
        'depreciationCalculationMethod' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'depreciationMethod' => 'depreciationMethod',
        'averagingMethod' => 'averagingMethod',
        'depreciationRate' => 'depreciationRate',
        'effectiveLifeYears' => 'effectiveLifeYears',
        'depreciationCalculationMethod' => 'depreciationCalculationMethod'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'depreciationMethod' => 'setDepreciationMethod',
        'averagingMethod' => 'setAveragingMethod',
        'depreciationRate' => 'setDepreciationRate',
        'effectiveLifeYears' => 'setEffectiveLifeYears',
        'depreciationCalculationMethod' => 'setDepreciationCalculationMethod'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'depreciationMethod' => 'getDepreciationMethod',
        'averagingMethod' => 'getAveragingMethod',
        'depreciationRate' => 'getDepreciationRate',
        'effectiveLifeYears' => 'getEffectiveLifeYears',
        'depreciationCalculationMethod' => 'getDepreciationCalculationMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEPRECIATION_METHOD_NO_DEPRECIATION = 'NoDepreciation';
    const DEPRECIATION_METHOD_STRAIGHT_LINE = 'StraightLine';
    const DEPRECIATION_METHOD_DIMINISHING_VALUE100 = 'DiminishingValue100';
    const DEPRECIATION_METHOD_DIMINISHING_VALUE150 = 'DiminishingValue150';
    const DEPRECIATION_METHOD_DIMINISHING_VALUE200 = 'DiminishingValue200';
    const DEPRECIATION_METHOD_FULL_DEPRECIATION = 'FullDepreciation';const AVERAGING_METHOD_FULL_MONTH = 'FullMonth';
    const AVERAGING_METHOD_ACTUAL_DAYS = 'ActualDays';const DEPRECIATION_CALCULATION_METHOD_RATE = 'Rate';
    const DEPRECIATION_CALCULATION_METHOD_LIFE = 'Life';
    const DEPRECIATION_CALCULATION_METHOD_NONE = 'None';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDepreciationMethodAllowableValues()
    {
        return [
            self::DEPRECIATION_METHOD_NO_DEPRECIATION,
            self::DEPRECIATION_METHOD_STRAIGHT_LINE,
            self::DEPRECIATION_METHOD_DIMINISHING_VALUE100,
            self::DEPRECIATION_METHOD_DIMINISHING_VALUE150,
            self::DEPRECIATION_METHOD_DIMINISHING_VALUE200,
            self::DEPRECIATION_METHOD_FULL_DEPRECIATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAveragingMethodAllowableValues()
    {
        return [
            self::AVERAGING_METHOD_FULL_MONTH,
            self::AVERAGING_METHOD_ACTUAL_DAYS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDepreciationCalculationMethodAllowableValues()
    {
        return [
            self::DEPRECIATION_CALCULATION_METHOD_RATE,
            self::DEPRECIATION_CALCULATION_METHOD_LIFE,
            self::DEPRECIATION_CALCULATION_METHOD_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['depreciationMethod'] = $data['depreciationMethod'] ?? null;
        $this->container['averagingMethod'] = $data['averagingMethod'] ?? null;
        $this->container['depreciationRate'] = $data['depreciationRate'] ?? null;
        $this->container['effectiveLifeYears'] = $data['effectiveLifeYears'] ?? null;
        $this->container['depreciationCalculationMethod'] = $data['depreciationCalculationMethod'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDepreciationMethodAllowableValues();
        if (!is_null($this->container['depreciationMethod']) && !in_array($this->container['depreciationMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'depreciationMethod',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getAveragingMethodAllowableValues();
        if (!is_null($this->container['averagingMethod']) && !in_array($this->container['averagingMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'averagingMethod',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getDepreciationCalculationMethodAllowableValues();
        if (!is_null($this->container['depreciationCalculationMethod']) && !in_array($this->container['depreciationCalculationMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'depreciationCalculationMethod',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets depreciationMethod
     *
     * @return string|null
     */
    public function getDepreciationMethod()
    {
        return $this->get('depreciationMethod');
    }

    /**
     * Sets depreciationMethod
     *
     * @param string|null $depreciationMethod The method of depreciation applied to this asset. See Depreciation Methods
     *
     * @return $this
     */
    public function setDepreciationMethod($depreciationMethod)
    {
        $allowedValues = $this->getDepreciationMethodAllowableValues();
        if (! is_null($depreciationMethod) && !in_array($depreciationMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'depreciationMethod',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['depreciationMethod'] = $depreciationMethod;

        return $this;
    }

    /**
     * Gets averagingMethod
     *
     * @return string|null
     */
    public function getAveragingMethod()
    {
        return $this->get('averagingMethod');
    }

    /**
     * Sets averagingMethod
     *
     * @param string|null $averagingMethod The method of averaging applied to this asset. See Averaging Methods
     *
     * @return $this
     */
    public function setAveragingMethod($averagingMethod)
    {
        $allowedValues = $this->getAveragingMethodAllowableValues();
        if (! is_null($averagingMethod) && !in_array($averagingMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'averagingMethod',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['averagingMethod'] = $averagingMethod;

        return $this;
    }

    /**
     * Gets depreciationRate
     *
     * @return float|null
     */
    public function getDepreciationRate()
    {
        return $this->get('depreciationRate');
    }

    /**
     * Sets depreciationRate
     *
     * @param float|null $depreciationRate The rate of depreciation (e.g. 0.05)
     *
     * @return $this
     */
    public function setDepreciationRate($depreciationRate)
    {
        $this->container['depreciationRate'] = $depreciationRate;

        return $this;
    }

    /**
     * Gets effectiveLifeYears
     *
     * @return int|null
     */
    public function getEffectiveLifeYears()
    {
        return $this->get('effectiveLifeYears');
    }

    /**
     * Sets effectiveLifeYears
     *
     * @param int|null $effectiveLifeYears Effective life of the asset in years (e.g. 5)
     *
     * @return $this
     */
    public function setEffectiveLifeYears($effectiveLifeYears)
    {
        $this->container['effectiveLifeYears'] = $effectiveLifeYears;

        return $this;
    }

    /**
     * Gets depreciationCalculationMethod
     *
     * @return string|null
     */
    public function getDepreciationCalculationMethod()
    {
        return $this->get('depreciationCalculationMethod');
    }

    /**
     * Sets depreciationCalculationMethod
     *
     * @param string|null $depreciationCalculationMethod See Depreciation Calculation Methods
     *
     * @return $this
     */
    public function setDepreciationCalculationMethod($depreciationCalculationMethod)
    {
        $allowedValues = $this->getDepreciationCalculationMethodAllowableValues();
        if (! is_null($depreciationCalculationMethod) && !in_array($depreciationCalculationMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'depreciationCalculationMethod',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['depreciationCalculationMethod'] = $depreciationCalculationMethod;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
