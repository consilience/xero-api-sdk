<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Account implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'name' => 'string',
        'accountID' => 'string',
        'type' => '\Consilience\Xero\AccountingSdk\Model\AccountType',
        'bankAccountNumber' => 'string',
        'status' => 'string',
        'description' => 'string',
        'bankAccountType' => 'string',
        'currencyCode' => '\Consilience\Xero\AccountingSdk\Model\CurrencyCode',
        'taxType' => 'string',
        'enablePaymentsToAccount' => 'bool',
        'showInExpenseClaims' => 'bool',
        'class' => 'string',
        'systemAccount' => 'string',
        'reportingCode' => 'string',
        'reportingCodeName' => 'string',
        'hasAttachments' => 'bool',
        'updatedDateUTC' => '\DateTime',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'code' => null,
        'name' => null,
        'accountID' => 'uuid',
        'type' => null,
        'bankAccountNumber' => null,
        'status' => null,
        'description' => null,
        'bankAccountType' => null,
        'currencyCode' => null,
        'taxType' => null,
        'enablePaymentsToAccount' => null,
        'showInExpenseClaims' => null,
        'class' => null,
        'systemAccount' => null,
        'reportingCode' => null,
        'reportingCodeName' => null,
        'hasAttachments' => null,
        'updatedDateUTC' => 'date-time',
        'validationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'name' => 'Name',
        'accountID' => 'AccountID',
        'type' => 'Type',
        'bankAccountNumber' => 'BankAccountNumber',
        'status' => 'Status',
        'description' => 'Description',
        'bankAccountType' => 'BankAccountType',
        'currencyCode' => 'CurrencyCode',
        'taxType' => 'TaxType',
        'enablePaymentsToAccount' => 'EnablePaymentsToAccount',
        'showInExpenseClaims' => 'ShowInExpenseClaims',
        'class' => 'Class',
        'systemAccount' => 'SystemAccount',
        'reportingCode' => 'ReportingCode',
        'reportingCodeName' => 'ReportingCodeName',
        'hasAttachments' => 'HasAttachments',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'validationErrors' => 'ValidationErrors'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'accountID' => 'setAccountID',
        'type' => 'setType',
        'bankAccountNumber' => 'setBankAccountNumber',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'bankAccountType' => 'setBankAccountType',
        'currencyCode' => 'setCurrencyCode',
        'taxType' => 'setTaxType',
        'enablePaymentsToAccount' => 'setEnablePaymentsToAccount',
        'showInExpenseClaims' => 'setShowInExpenseClaims',
        'class' => 'setClass',
        'systemAccount' => 'setSystemAccount',
        'reportingCode' => 'setReportingCode',
        'reportingCodeName' => 'setReportingCodeName',
        'hasAttachments' => 'setHasAttachments',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'validationErrors' => 'setValidationErrors'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'accountID' => 'getAccountID',
        'type' => 'getType',
        'bankAccountNumber' => 'getBankAccountNumber',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'bankAccountType' => 'getBankAccountType',
        'currencyCode' => 'getCurrencyCode',
        'taxType' => 'getTaxType',
        'enablePaymentsToAccount' => 'getEnablePaymentsToAccount',
        'showInExpenseClaims' => 'getShowInExpenseClaims',
        'class' => 'getClass',
        'systemAccount' => 'getSystemAccount',
        'reportingCode' => 'getReportingCode',
        'reportingCodeName' => 'getReportingCodeName',
        'hasAttachments' => 'getHasAttachments',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'validationErrors' => 'getValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_ARCHIVED = 'ARCHIVED';
    const STATUS_DELETED = 'DELETED';const BANK_ACCOUNT_TYPE_BANK = 'BANK';
    const BANK_ACCOUNT_TYPE_CREDITCARD = 'CREDITCARD';
    const BANK_ACCOUNT_TYPE_PAYPAL = 'PAYPAL';
    const BANK_ACCOUNT_TYPE_EMPTY = '';const MODEL_CLASS_ASSET = 'ASSET';
    const MODEL_CLASS_EQUITY = 'EQUITY';
    const MODEL_CLASS_EXPENSE = 'EXPENSE';
    const MODEL_CLASS_LIABILITY = 'LIABILITY';
    const MODEL_CLASS_REVENUE = 'REVENUE';const SYSTEM_ACCOUNT_DEBTORS = 'DEBTORS';
    const SYSTEM_ACCOUNT_CREDITORS = 'CREDITORS';
    const SYSTEM_ACCOUNT_BANKCURRENCYGAIN = 'BANKCURRENCYGAIN';
    const SYSTEM_ACCOUNT_GST = 'GST';
    const SYSTEM_ACCOUNT_GSTONIMPORTS = 'GSTONIMPORTS';
    const SYSTEM_ACCOUNT_HISTORICAL = 'HISTORICAL';
    const SYSTEM_ACCOUNT_REALISEDCURRENCYGAIN = 'REALISEDCURRENCYGAIN';
    const SYSTEM_ACCOUNT_RETAINEDEARNINGS = 'RETAINEDEARNINGS';
    const SYSTEM_ACCOUNT_ROUNDING = 'ROUNDING';
    const SYSTEM_ACCOUNT_TRACKINGTRANSFERS = 'TRACKINGTRANSFERS';
    const SYSTEM_ACCOUNT_UNPAIDEXPCLM = 'UNPAIDEXPCLM';
    const SYSTEM_ACCOUNT_UNREALISEDCURRENCYGAIN = 'UNREALISEDCURRENCYGAIN';
    const SYSTEM_ACCOUNT_WAGEPAYABLES = 'WAGEPAYABLES';
    const SYSTEM_ACCOUNT_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_ARCHIVED,
            self::STATUS_DELETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankAccountTypeAllowableValues()
    {
        return [
            self::BANK_ACCOUNT_TYPE_BANK,
            self::BANK_ACCOUNT_TYPE_CREDITCARD,
            self::BANK_ACCOUNT_TYPE_PAYPAL,
            self::BANK_ACCOUNT_TYPE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassAllowableValues()
    {
        return [
            self::MODEL_CLASS_ASSET,
            self::MODEL_CLASS_EQUITY,
            self::MODEL_CLASS_EXPENSE,
            self::MODEL_CLASS_LIABILITY,
            self::MODEL_CLASS_REVENUE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSystemAccountAllowableValues()
    {
        return [
            self::SYSTEM_ACCOUNT_DEBTORS,
            self::SYSTEM_ACCOUNT_CREDITORS,
            self::SYSTEM_ACCOUNT_BANKCURRENCYGAIN,
            self::SYSTEM_ACCOUNT_GST,
            self::SYSTEM_ACCOUNT_GSTONIMPORTS,
            self::SYSTEM_ACCOUNT_HISTORICAL,
            self::SYSTEM_ACCOUNT_REALISEDCURRENCYGAIN,
            self::SYSTEM_ACCOUNT_RETAINEDEARNINGS,
            self::SYSTEM_ACCOUNT_ROUNDING,
            self::SYSTEM_ACCOUNT_TRACKINGTRANSFERS,
            self::SYSTEM_ACCOUNT_UNPAIDEXPCLM,
            self::SYSTEM_ACCOUNT_UNREALISEDCURRENCYGAIN,
            self::SYSTEM_ACCOUNT_WAGEPAYABLES,
            self::SYSTEM_ACCOUNT_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['accountID'] = $data['accountID'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['bankAccountNumber'] = $data['bankAccountNumber'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['bankAccountType'] = $data['bankAccountType'] ?? null;
        $this->container['currencyCode'] = $data['currencyCode'] ?? null;
        $this->container['taxType'] = $data['taxType'] ?? null;
        $this->container['enablePaymentsToAccount'] = $data['enablePaymentsToAccount'] ?? null;
        $this->container['showInExpenseClaims'] = $data['showInExpenseClaims'] ?? null;
        $this->container['class'] = $data['class'] ?? null;
        $this->container['systemAccount'] = $data['systemAccount'] ?? null;
        $this->container['reportingCode'] = $data['reportingCode'] ?? null;
        $this->container['reportingCodeName'] = $data['reportingCodeName'] ?? null;
        $this->container['hasAttachments'] = $data['hasAttachments'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
        $this->container['validationErrors'] = $data['validationErrors'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['code']) && (mb_strlen($this->container['code']) > 10)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'code',
                10
            );
        }

        if (! is_null($this->container['name']) && (mb_strlen($this->container['name']) > 150)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'name',
                150
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'status',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($this->container['bankAccountType']) && !in_array($this->container['bankAccountType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'bankAccountType',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getClassAllowableValues();
        if (!is_null($this->container['class']) && !in_array($this->container['class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'class',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getSystemAccountAllowableValues();
        if (!is_null($this->container['systemAccount']) && !in_array($this->container['systemAccount'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'systemAccount',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->get('code');
    }

    /**
     * Sets code
     *
     * @param string|null $code Customer defined alpha numeric account code e.g 200 or SALES (max length = 10)
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (! is_null($code) && (mb_strlen($code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Account., must be smaller than or equal to 10.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of account (max length = 150)
     *
     * @return $this
     */
    public function setName($name)
    {
        if (! is_null($name) && (mb_strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Account., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets accountID
     *
     * @return string|null
     */
    public function getAccountID()
    {
        return $this->get('accountID');
    }

    /**
     * Sets accountID
     *
     * @param string|null $accountID The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
     *
     * @return $this
     */
    public function setAccountID($accountID)
    {
        $this->container['accountID'] = $accountID;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Consilience\Xero\AccountingSdk\Model\AccountType|null
     */
    public function getType()
    {
        return $this->get('type');
    }

    /**
     * Sets type
     *
     * @param \Consilience\Xero\AccountingSdk\Model\AccountType|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bankAccountNumber
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->get('bankAccountNumber');
    }

    /**
     * Sets bankAccountNumber
     *
     * @param string|null $bankAccountNumber For bank accounts only (Account Type BANK)
     *
     * @return $this
     */
    public function setBankAccountNumber($bankAccountNumber)
    {
        $this->container['bankAccountNumber'] = $bankAccountNumber;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->get('status');
    }

    /**
     * Sets status
     *
     * @param string|null $status Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'status',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->get('description');
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the Account. Valid for all types of accounts except bank accounts (max length = 4000)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets bankAccountType
     *
     * @return string|null
     */
    public function getBankAccountType()
    {
        return $this->get('bankAccountType');
    }

    /**
     * Sets bankAccountType
     *
     * @param string|null $bankAccountType For bank accounts only. See Bank Account types
     *
     * @return $this
     */
    public function setBankAccountType($bankAccountType)
    {
        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (! is_null($bankAccountType) && !in_array($bankAccountType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'bankAccountType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['bankAccountType'] = $bankAccountType;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null
     */
    public function getCurrencyCode()
    {
        return $this->get('currencyCode');
    }

    /**
     * Sets currencyCode
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets taxType
     *
     * @return string|null
     */
    public function getTaxType()
    {
        return $this->get('taxType');
    }

    /**
     * Sets taxType
     *
     * @param string|null $taxType The tax type from TaxRates
     *
     * @return $this
     */
    public function setTaxType($taxType)
    {
        $this->container['taxType'] = $taxType;

        return $this;
    }

    /**
     * Gets enablePaymentsToAccount
     *
     * @return bool|null
     */
    public function getEnablePaymentsToAccount()
    {
        return $this->get('enablePaymentsToAccount');
    }

    /**
     * Sets enablePaymentsToAccount
     *
     * @param bool|null $enablePaymentsToAccount Boolean – describes whether account can have payments applied to it
     *
     * @return $this
     */
    public function setEnablePaymentsToAccount($enablePaymentsToAccount)
    {
        $this->container['enablePaymentsToAccount'] = $enablePaymentsToAccount;

        return $this;
    }

    /**
     * Gets showInExpenseClaims
     *
     * @return bool|null
     */
    public function getShowInExpenseClaims()
    {
        return $this->get('showInExpenseClaims');
    }

    /**
     * Sets showInExpenseClaims
     *
     * @param bool|null $showInExpenseClaims Boolean – describes whether account code is available for use with expense claims
     *
     * @return $this
     */
    public function setShowInExpenseClaims($showInExpenseClaims)
    {
        $this->container['showInExpenseClaims'] = $showInExpenseClaims;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->get('class');
    }

    /**
     * Sets class
     *
     * @param string|null $class See Account Class Types
     *
     * @return $this
     */
    public function setClass($class)
    {
        $allowedValues = $this->getClassAllowableValues();
        if (! is_null($class) && !in_array($class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'class',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets systemAccount
     *
     * @return string|null
     */
    public function getSystemAccount()
    {
        return $this->get('systemAccount');
    }

    /**
     * Sets systemAccount
     *
     * @param string|null $systemAccount If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
     *
     * @return $this
     */
    public function setSystemAccount($systemAccount)
    {
        $allowedValues = $this->getSystemAccountAllowableValues();
        if (! is_null($systemAccount) && !in_array($systemAccount, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'systemAccount',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['systemAccount'] = $systemAccount;

        return $this;
    }

    /**
     * Gets reportingCode
     *
     * @return string|null
     */
    public function getReportingCode()
    {
        return $this->get('reportingCode');
    }

    /**
     * Sets reportingCode
     *
     * @param string|null $reportingCode Shown if set
     *
     * @return $this
     */
    public function setReportingCode($reportingCode)
    {
        $this->container['reportingCode'] = $reportingCode;

        return $this;
    }

    /**
     * Gets reportingCodeName
     *
     * @return string|null
     */
    public function getReportingCodeName()
    {
        return $this->get('reportingCodeName');
    }

    /**
     * Sets reportingCodeName
     *
     * @param string|null $reportingCodeName Shown if set
     *
     * @return $this
     */
    public function setReportingCodeName($reportingCodeName)
    {
        $this->container['reportingCodeName'] = $reportingCodeName;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments()
    {
        return $this->get('hasAttachments');
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments boolean to indicate if an account has an attachment (read only)
     *
     * @return $this
     */
    public function setHasAttachments($hasAttachments)
    {
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified date UTC format
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->get('validationErrors');
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
