<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Address implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addressType' => 'string',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'addressLine3' => 'string',
        'addressLine4' => 'string',
        'city' => 'string',
        'region' => 'string',
        'postalCode' => 'string',
        'country' => 'string',
        'attentionTo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'addressType' => null,
        'addressLine1' => null,
        'addressLine2' => null,
        'addressLine3' => null,
        'addressLine4' => null,
        'city' => null,
        'region' => null,
        'postalCode' => null,
        'country' => null,
        'attentionTo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addressType' => 'AddressType',
        'addressLine1' => 'AddressLine1',
        'addressLine2' => 'AddressLine2',
        'addressLine3' => 'AddressLine3',
        'addressLine4' => 'AddressLine4',
        'city' => 'City',
        'region' => 'Region',
        'postalCode' => 'PostalCode',
        'country' => 'Country',
        'attentionTo' => 'AttentionTo'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'addressType' => 'setAddressType',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'addressLine3' => 'setAddressLine3',
        'addressLine4' => 'setAddressLine4',
        'city' => 'setCity',
        'region' => 'setRegion',
        'postalCode' => 'setPostalCode',
        'country' => 'setCountry',
        'attentionTo' => 'setAttentionTo'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'addressType' => 'getAddressType',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'addressLine3' => 'getAddressLine3',
        'addressLine4' => 'getAddressLine4',
        'city' => 'getCity',
        'region' => 'getRegion',
        'postalCode' => 'getPostalCode',
        'country' => 'getCountry',
        'attentionTo' => 'getAttentionTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADDRESS_TYPE_POBOX = 'POBOX';
    const ADDRESS_TYPE_STREET = 'STREET';
    const ADDRESS_TYPE_DELIVERY = 'DELIVERY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_POBOX,
            self::ADDRESS_TYPE_STREET,
            self::ADDRESS_TYPE_DELIVERY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addressType'] = $data['addressType'] ?? null;
        $this->container['addressLine1'] = $data['addressLine1'] ?? null;
        $this->container['addressLine2'] = $data['addressLine2'] ?? null;
        $this->container['addressLine3'] = $data['addressLine3'] ?? null;
        $this->container['addressLine4'] = $data['addressLine4'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
        $this->container['postalCode'] = $data['postalCode'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['attentionTo'] = $data['attentionTo'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($this->container['addressType']) && !in_array($this->container['addressType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'addressType',
                implode('", "', $allowedValues)
            );
        }

        if (! is_null($this->container['addressLine1']) && (mb_strlen($this->container['addressLine1']) > 500)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'addressLine1',
                500
            );
        }

        if (! is_null($this->container['addressLine2']) && (mb_strlen($this->container['addressLine2']) > 500)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'addressLine2',
                500
            );
        }

        if (! is_null($this->container['addressLine3']) && (mb_strlen($this->container['addressLine3']) > 500)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'addressLine3',
                500
            );
        }

        if (! is_null($this->container['addressLine4']) && (mb_strlen($this->container['addressLine4']) > 500)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'addressLine4',
                500
            );
        }

        if (! is_null($this->container['city']) && (mb_strlen($this->container['city']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'city',
                255
            );
        }

        if (! is_null($this->container['region']) && (mb_strlen($this->container['region']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'region',
                255
            );
        }

        if (! is_null($this->container['postalCode']) && (mb_strlen($this->container['postalCode']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'postalCode',
                50
            );
        }

        if (! is_null($this->container['country']) && (mb_strlen($this->container['country']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'country',
                50
            );
        }

        if (! is_null($this->container['attentionTo']) && (mb_strlen($this->container['attentionTo']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'attentionTo',
                255
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addressType
     *
     * @return string|null
     */
    public function getAddressType()
    {
        return $this->get('addressType');
    }

    /**
     * Sets addressType
     *
     * @param string|null $addressType define the type of address
     *
     * @return $this
     */
    public function setAddressType($addressType)
    {
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (! is_null($addressType) && !in_array($addressType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'addressType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->get('addressLine1');
    }

    /**
     * Sets addressLine1
     *
     * @param string|null $addressLine1 max length = 500
     *
     * @return $this
     */
    public function setAddressLine1($addressLine1)
    {
        if (! is_null($addressLine1) && (mb_strlen($addressLine1) > 500)) {
            throw new \InvalidArgumentException('invalid length for $addressLine1 when calling Address., must be smaller than or equal to 500.');
        }

        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->get('addressLine2');
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 max length = 500
     *
     * @return $this
     */
    public function setAddressLine2($addressLine2)
    {
        if (! is_null($addressLine2) && (mb_strlen($addressLine2) > 500)) {
            throw new \InvalidArgumentException('invalid length for $addressLine2 when calling Address., must be smaller than or equal to 500.');
        }

        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets addressLine3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->get('addressLine3');
    }

    /**
     * Sets addressLine3
     *
     * @param string|null $addressLine3 max length = 500
     *
     * @return $this
     */
    public function setAddressLine3($addressLine3)
    {
        if (! is_null($addressLine3) && (mb_strlen($addressLine3) > 500)) {
            throw new \InvalidArgumentException('invalid length for $addressLine3 when calling Address., must be smaller than or equal to 500.');
        }

        $this->container['addressLine3'] = $addressLine3;

        return $this;
    }

    /**
     * Gets addressLine4
     *
     * @return string|null
     */
    public function getAddressLine4()
    {
        return $this->get('addressLine4');
    }

    /**
     * Sets addressLine4
     *
     * @param string|null $addressLine4 max length = 500
     *
     * @return $this
     */
    public function setAddressLine4($addressLine4)
    {
        if (! is_null($addressLine4) && (mb_strlen($addressLine4) > 500)) {
            throw new \InvalidArgumentException('invalid length for $addressLine4 when calling Address., must be smaller than or equal to 500.');
        }

        $this->container['addressLine4'] = $addressLine4;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->get('city');
    }

    /**
     * Sets city
     *
     * @param string|null $city max length = 255
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (! is_null($city) && (mb_strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 255.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->get('region');
    }

    /**
     * Sets region
     *
     * @param string|null $region max length = 255
     *
     * @return $this
     */
    public function setRegion($region)
    {
        if (! is_null($region) && (mb_strlen($region) > 255)) {
            throw new \InvalidArgumentException('invalid length for $region when calling Address., must be smaller than or equal to 255.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->get('postalCode');
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode max length = 50
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        if (! is_null($postalCode) && (mb_strlen($postalCode) > 50)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling Address., must be smaller than or equal to 50.');
        }

        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->get('country');
    }

    /**
     * Sets country
     *
     * @param string|null $country max length = 50, [A-Z], [a-z] only
     *
     * @return $this
     */
    public function setCountry($country)
    {
        if (! is_null($country) && (mb_strlen($country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Address., must be smaller than or equal to 50.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets attentionTo
     *
     * @return string|null
     */
    public function getAttentionTo()
    {
        return $this->get('attentionTo');
    }

    /**
     * Sets attentionTo
     *
     * @param string|null $attentionTo max length = 255
     *
     * @return $this
     */
    public function setAttentionTo($attentionTo)
    {
        if (! is_null($attentionTo) && (mb_strlen($attentionTo) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attentionTo when calling Address., must be smaller than or equal to 255.');
        }

        $this->container['attentionTo'] = $attentionTo;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
