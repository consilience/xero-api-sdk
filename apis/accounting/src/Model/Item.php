<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Item implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'inventoryAssetAccountCode' => 'string',
        'name' => 'string',
        'isSold' => 'bool',
        'isPurchased' => 'bool',
        'description' => 'string',
        'purchaseDescription' => 'string',
        'purchaseDetails' => '\Consilience\Xero\AccountingSdk\Model\Purchase',
        'salesDetails' => '\Consilience\Xero\AccountingSdk\Model\Purchase',
        'isTrackedAsInventory' => 'bool',
        'totalCostPool' => 'double',
        'quantityOnHand' => 'double',
        'updatedDateUTC' => '\DateTime',
        'itemID' => 'string',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'code' => null,
        'inventoryAssetAccountCode' => null,
        'name' => null,
        'isSold' => null,
        'isPurchased' => null,
        'description' => null,
        'purchaseDescription' => null,
        'purchaseDetails' => null,
        'salesDetails' => null,
        'isTrackedAsInventory' => null,
        'totalCostPool' => 'double',
        'quantityOnHand' => 'double',
        'updatedDateUTC' => 'date-time',
        'itemID' => 'uuid',
        'validationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'inventoryAssetAccountCode' => 'InventoryAssetAccountCode',
        'name' => 'Name',
        'isSold' => 'IsSold',
        'isPurchased' => 'IsPurchased',
        'description' => 'Description',
        'purchaseDescription' => 'PurchaseDescription',
        'purchaseDetails' => 'PurchaseDetails',
        'salesDetails' => 'SalesDetails',
        'isTrackedAsInventory' => 'IsTrackedAsInventory',
        'totalCostPool' => 'TotalCostPool',
        'quantityOnHand' => 'QuantityOnHand',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'itemID' => 'ItemID',
        'validationErrors' => 'ValidationErrors'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'inventoryAssetAccountCode' => 'setInventoryAssetAccountCode',
        'name' => 'setName',
        'isSold' => 'setIsSold',
        'isPurchased' => 'setIsPurchased',
        'description' => 'setDescription',
        'purchaseDescription' => 'setPurchaseDescription',
        'purchaseDetails' => 'setPurchaseDetails',
        'salesDetails' => 'setSalesDetails',
        'isTrackedAsInventory' => 'setIsTrackedAsInventory',
        'totalCostPool' => 'setTotalCostPool',
        'quantityOnHand' => 'setQuantityOnHand',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'itemID' => 'setItemID',
        'validationErrors' => 'setValidationErrors'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'inventoryAssetAccountCode' => 'getInventoryAssetAccountCode',
        'name' => 'getName',
        'isSold' => 'getIsSold',
        'isPurchased' => 'getIsPurchased',
        'description' => 'getDescription',
        'purchaseDescription' => 'getPurchaseDescription',
        'purchaseDetails' => 'getPurchaseDetails',
        'salesDetails' => 'getSalesDetails',
        'isTrackedAsInventory' => 'getIsTrackedAsInventory',
        'totalCostPool' => 'getTotalCostPool',
        'quantityOnHand' => 'getQuantityOnHand',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'itemID' => 'getItemID',
        'validationErrors' => 'getValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['inventoryAssetAccountCode'] = $data['inventoryAssetAccountCode'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['isSold'] = $data['isSold'] ?? null;
        $this->container['isPurchased'] = $data['isPurchased'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['purchaseDescription'] = $data['purchaseDescription'] ?? null;
        $this->container['purchaseDetails'] = $data['purchaseDetails'] ?? null;
        $this->container['salesDetails'] = $data['salesDetails'] ?? null;
        $this->container['isTrackedAsInventory'] = $data['isTrackedAsInventory'] ?? null;
        $this->container['totalCostPool'] = $data['totalCostPool'] ?? null;
        $this->container['quantityOnHand'] = $data['quantityOnHand'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
        $this->container['itemID'] = $data['itemID'] ?? null;
        $this->container['validationErrors'] = $data['validationErrors'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'code');
        }
        if ((mb_strlen($this->container['code']) > 30)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'code',
                30
            );
        }

        if ($this->container['inventoryAssetAccountCode'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'inventoryAssetAccountCode');
        }
        if (! is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'name',
                50
            );
        }

        if (! is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4000)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'description',
                4000
            );
        }

        if (! is_null($this->container['purchaseDescription']) && (mb_strlen($this->container['purchaseDescription']) > 4000)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'purchaseDescription',
                4000
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->get('code');
    }

    /**
     * Sets code
     *
     * @param string $code User defined item code (max length = 30)
     *
     * @return $this
     */
    public function setCode($code)
    {
        if ((mb_strlen($code) > 30)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Item., must be smaller than or equal to 30.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets inventoryAssetAccountCode
     *
     * @return string
     */
    public function getInventoryAssetAccountCode()
    {
        return $this->get('inventoryAssetAccountCode');
    }

    /**
     * Sets inventoryAssetAccountCode
     *
     * @param string $inventoryAssetAccountCode The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
     *
     * @return $this
     */
    public function setInventoryAssetAccountCode($inventoryAssetAccountCode)
    {
        $this->container['inventoryAssetAccountCode'] = $inventoryAssetAccountCode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the item (max length = 50)
     *
     * @return $this
     */
    public function setName($name)
    {
        if (! is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Item., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isSold
     *
     * @return bool|null
     */
    public function getIsSold()
    {
        return $this->get('isSold');
    }

    /**
     * Sets isSold
     *
     * @param bool|null $isSold Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
     *
     * @return $this
     */
    public function setIsSold($isSold)
    {
        $this->container['isSold'] = $isSold;

        return $this;
    }

    /**
     * Gets isPurchased
     *
     * @return bool|null
     */
    public function getIsPurchased()
    {
        return $this->get('isPurchased');
    }

    /**
     * Sets isPurchased
     *
     * @param bool|null $isPurchased Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
     *
     * @return $this
     */
    public function setIsPurchased($isPurchased)
    {
        $this->container['isPurchased'] = $isPurchased;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->get('description');
    }

    /**
     * Sets description
     *
     * @param string|null $description The sales description of the item (max length = 4000)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (! is_null($description) && (mb_strlen($description) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Item., must be smaller than or equal to 4000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets purchaseDescription
     *
     * @return string|null
     */
    public function getPurchaseDescription()
    {
        return $this->get('purchaseDescription');
    }

    /**
     * Sets purchaseDescription
     *
     * @param string|null $purchaseDescription The purchase description of the item (max length = 4000)
     *
     * @return $this
     */
    public function setPurchaseDescription($purchaseDescription)
    {
        if (! is_null($purchaseDescription) && (mb_strlen($purchaseDescription) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $purchaseDescription when calling Item., must be smaller than or equal to 4000.');
        }

        $this->container['purchaseDescription'] = $purchaseDescription;

        return $this;
    }

    /**
     * Gets purchaseDetails
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Purchase|null
     */
    public function getPurchaseDetails()
    {
        return $this->get('purchaseDetails');
    }

    /**
     * Sets purchaseDetails
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Purchase|null $purchaseDetails purchaseDetails
     *
     * @return $this
     */
    public function setPurchaseDetails($purchaseDetails)
    {
        $this->container['purchaseDetails'] = $purchaseDetails;

        return $this;
    }

    /**
     * Gets salesDetails
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Purchase|null
     */
    public function getSalesDetails()
    {
        return $this->get('salesDetails');
    }

    /**
     * Sets salesDetails
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Purchase|null $salesDetails salesDetails
     *
     * @return $this
     */
    public function setSalesDetails($salesDetails)
    {
        $this->container['salesDetails'] = $salesDetails;

        return $this;
    }

    /**
     * Gets isTrackedAsInventory
     *
     * @return bool|null
     */
    public function getIsTrackedAsInventory()
    {
        return $this->get('isTrackedAsInventory');
    }

    /**
     * Sets isTrackedAsInventory
     *
     * @param bool|null $isTrackedAsInventory True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
     *
     * @return $this
     */
    public function setIsTrackedAsInventory($isTrackedAsInventory)
    {
        $this->container['isTrackedAsInventory'] = $isTrackedAsInventory;

        return $this;
    }

    /**
     * Gets totalCostPool
     *
     * @return double|null
     */
    public function getTotalCostPool()
    {
        return $this->get('totalCostPool');
    }

    /**
     * Sets totalCostPool
     *
     * @param double|null $totalCostPool The value of the item on hand. Calculated using average cost accounting.
     *
     * @return $this
     */
    public function setTotalCostPool($totalCostPool)
    {
        $this->container['totalCostPool'] = $totalCostPool;

        return $this;
    }

    /**
     * Gets quantityOnHand
     *
     * @return double|null
     */
    public function getQuantityOnHand()
    {
        return $this->get('quantityOnHand');
    }

    /**
     * Sets quantityOnHand
     *
     * @param double|null $quantityOnHand The quantity of the item on hand
     *
     * @return $this
     */
    public function setQuantityOnHand($quantityOnHand)
    {
        $this->container['quantityOnHand'] = $quantityOnHand;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified date in UTC format
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets itemID
     *
     * @return string|null
     */
    public function getItemID()
    {
        return $this->get('itemID');
    }

    /**
     * Sets itemID
     *
     * @param string|null $itemID The Xero identifier for an Item
     *
     * @return $this
     */
    public function setItemID($itemID)
    {
        $this->container['itemID'] = $itemID;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->get('validationErrors');
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
