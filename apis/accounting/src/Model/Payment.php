<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * Payment
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class Payment implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice' => '\Consilience\Xero\AccountingSdk\Model\Invoice',
        'creditNote' => '\Consilience\Xero\AccountingSdk\Model\CreditNote',
        'prepayment' => '\Consilience\Xero\AccountingSdk\Model\Prepayment',
        'overpayment' => '\Consilience\Xero\AccountingSdk\Model\Overpayment',
        'batchPaymentID' => 'string',
        'invoiceNumber' => 'string',
        'creditNoteNumber' => 'string',
        'account' => '\Consilience\Xero\AccountingSdk\Model\Account',
        'code' => 'string',
        'date' => '\DateTime',
        'currencyRate' => 'double',
        'amount' => 'double',
        'reference' => 'string',
        'isReconciled' => 'bool',
        'status' => 'string',
        'paymentType' => 'string',
        'updatedDateUTC' => '\DateTime',
        'paymentID' => 'string',
        'bankAccountNumber' => 'string',
        'particulars' => 'string',
        'details' => 'string',
        'hasAccount' => 'bool',
        'hasValidationErrors' => 'bool',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'invoice' => null,
        'creditNote' => null,
        'prepayment' => null,
        'overpayment' => null,
        'batchPaymentID' => 'uuid',
        'invoiceNumber' => null,
        'creditNoteNumber' => null,
        'account' => null,
        'code' => null,
        'date' => 'date',
        'currencyRate' => 'double',
        'amount' => 'double',
        'reference' => null,
        'isReconciled' => null,
        'status' => null,
        'paymentType' => null,
        'updatedDateUTC' => 'date-time',
        'paymentID' => 'uuid',
        'bankAccountNumber' => null,
        'particulars' => null,
        'details' => null,
        'hasAccount' => null,
        'hasValidationErrors' => null,
        'validationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice' => 'Invoice',
        'creditNote' => 'CreditNote',
        'prepayment' => 'Prepayment',
        'overpayment' => 'Overpayment',
        'batchPaymentID' => 'BatchPaymentID',
        'invoiceNumber' => 'InvoiceNumber',
        'creditNoteNumber' => 'CreditNoteNumber',
        'account' => 'Account',
        'code' => 'Code',
        'date' => 'Date',
        'currencyRate' => 'CurrencyRate',
        'amount' => 'Amount',
        'reference' => 'Reference',
        'isReconciled' => 'IsReconciled',
        'status' => 'Status',
        'paymentType' => 'PaymentType',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'paymentID' => 'PaymentID',
        'bankAccountNumber' => 'BankAccountNumber',
        'particulars' => 'Particulars',
        'details' => 'Details',
        'hasAccount' => 'HasAccount',
        'hasValidationErrors' => 'HasValidationErrors',
        'validationErrors' => 'ValidationErrors'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice' => 'setInvoice',
        'creditNote' => 'setCreditNote',
        'prepayment' => 'setPrepayment',
        'overpayment' => 'setOverpayment',
        'batchPaymentID' => 'setBatchPaymentID',
        'invoiceNumber' => 'setInvoiceNumber',
        'creditNoteNumber' => 'setCreditNoteNumber',
        'account' => 'setAccount',
        'code' => 'setCode',
        'date' => 'setDate',
        'currencyRate' => 'setCurrencyRate',
        'amount' => 'setAmount',
        'reference' => 'setReference',
        'isReconciled' => 'setIsReconciled',
        'status' => 'setStatus',
        'paymentType' => 'setPaymentType',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'paymentID' => 'setPaymentID',
        'bankAccountNumber' => 'setBankAccountNumber',
        'particulars' => 'setParticulars',
        'details' => 'setDetails',
        'hasAccount' => 'setHasAccount',
        'hasValidationErrors' => 'setHasValidationErrors',
        'validationErrors' => 'setValidationErrors'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice' => 'getInvoice',
        'creditNote' => 'getCreditNote',
        'prepayment' => 'getPrepayment',
        'overpayment' => 'getOverpayment',
        'batchPaymentID' => 'getBatchPaymentID',
        'invoiceNumber' => 'getInvoiceNumber',
        'creditNoteNumber' => 'getCreditNoteNumber',
        'account' => 'getAccount',
        'code' => 'getCode',
        'date' => 'getDate',
        'currencyRate' => 'getCurrencyRate',
        'amount' => 'getAmount',
        'reference' => 'getReference',
        'isReconciled' => 'getIsReconciled',
        'status' => 'getStatus',
        'paymentType' => 'getPaymentType',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'paymentID' => 'getPaymentID',
        'bankAccountNumber' => 'getBankAccountNumber',
        'particulars' => 'getParticulars',
        'details' => 'getDetails',
        'hasAccount' => 'getHasAccount',
        'hasValidationErrors' => 'getHasValidationErrors',
        'validationErrors' => 'getValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_AUTHORISED = 'AUTHORISED';
    const STATUS_DELETED = 'DELETED';const PAYMENT_TYPE_ACCRECPAYMENT = 'ACCRECPAYMENT';
    const PAYMENT_TYPE_ACCPAYPAYMENT = 'ACCPAYPAYMENT';
    const PAYMENT_TYPE_ARCREDITPAYMENT = 'ARCREDITPAYMENT';
    const PAYMENT_TYPE_APCREDITPAYMENT = 'APCREDITPAYMENT';
    const PAYMENT_TYPE_AROVERPAYMENTPAYMENT = 'AROVERPAYMENTPAYMENT';
    const PAYMENT_TYPE_ARPREPAYMENTPAYMENT = 'ARPREPAYMENTPAYMENT';
    const PAYMENT_TYPE_APPREPAYMENTPAYMENT = 'APPREPAYMENTPAYMENT';
    const PAYMENT_TYPE_APOVERPAYMENTPAYMENT = 'APOVERPAYMENTPAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AUTHORISED,
            self::STATUS_DELETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_ACCRECPAYMENT,
            self::PAYMENT_TYPE_ACCPAYPAYMENT,
            self::PAYMENT_TYPE_ARCREDITPAYMENT,
            self::PAYMENT_TYPE_APCREDITPAYMENT,
            self::PAYMENT_TYPE_AROVERPAYMENTPAYMENT,
            self::PAYMENT_TYPE_ARPREPAYMENTPAYMENT,
            self::PAYMENT_TYPE_APPREPAYMENTPAYMENT,
            self::PAYMENT_TYPE_APOVERPAYMENTPAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice'] = $data['invoice'] ?? null;
        $this->container['creditNote'] = $data['creditNote'] ?? null;
        $this->container['prepayment'] = $data['prepayment'] ?? null;
        $this->container['overpayment'] = $data['overpayment'] ?? null;
        $this->container['batchPaymentID'] = $data['batchPaymentID'] ?? null;
        $this->container['invoiceNumber'] = $data['invoiceNumber'] ?? null;
        $this->container['creditNoteNumber'] = $data['creditNoteNumber'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['currencyRate'] = $data['currencyRate'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['isReconciled'] = $data['isReconciled'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['paymentType'] = $data['paymentType'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
        $this->container['paymentID'] = $data['paymentID'] ?? null;
        $this->container['bankAccountNumber'] = $data['bankAccountNumber'] ?? null;
        $this->container['particulars'] = $data['particulars'] ?? null;
        $this->container['details'] = $data['details'] ?? null;
        $this->container['hasAccount'] = $data['hasAccount'] ?? null;
        $this->container['hasValidationErrors'] = $data['hasValidationErrors'] ?? null;
        $this->container['validationErrors'] = $data['validationErrors'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'status',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['paymentType']) && !in_array($this->container['paymentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'paymentType',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Invoice|null
     */
    public function getInvoice()
    {
        return $this->get('invoice');
    }

    /**
     * Sets invoice
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Invoice|null $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets creditNote
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CreditNote|null
     */
    public function getCreditNote()
    {
        return $this->get('creditNote');
    }

    /**
     * Sets creditNote
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CreditNote|null $creditNote creditNote
     *
     * @return $this
     */
    public function setCreditNote($creditNote)
    {
        $this->container['creditNote'] = $creditNote;

        return $this;
    }

    /**
     * Gets prepayment
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Prepayment|null
     */
    public function getPrepayment()
    {
        return $this->get('prepayment');
    }

    /**
     * Sets prepayment
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Prepayment|null $prepayment prepayment
     *
     * @return $this
     */
    public function setPrepayment($prepayment)
    {
        $this->container['prepayment'] = $prepayment;

        return $this;
    }

    /**
     * Gets overpayment
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Overpayment|null
     */
    public function getOverpayment()
    {
        return $this->get('overpayment');
    }

    /**
     * Sets overpayment
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Overpayment|null $overpayment overpayment
     *
     * @return $this
     */
    public function setOverpayment($overpayment)
    {
        $this->container['overpayment'] = $overpayment;

        return $this;
    }

    /**
     * Gets batchPaymentID
     *
     * @return string|null
     */
    public function getBatchPaymentID()
    {
        return $this->get('batchPaymentID');
    }

    /**
     * Sets batchPaymentID
     *
     * @param string|null $batchPaymentID The optional Xero generated unique identifier for the batch this bank transaction may be in
     *
     * @return $this
     */
    public function setBatchPaymentID($batchPaymentID)
    {
        $this->container['batchPaymentID'] = $batchPaymentID;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->get('invoiceNumber');
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber Number of invoice or credit note you are applying payment to e.g.INV-4003
     *
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets creditNoteNumber
     *
     * @return string|null
     */
    public function getCreditNoteNumber()
    {
        return $this->get('creditNoteNumber');
    }

    /**
     * Sets creditNoteNumber
     *
     * @param string|null $creditNoteNumber Number of invoice or credit note you are applying payment to e.g. INV-4003
     *
     * @return $this
     */
    public function setCreditNoteNumber($creditNoteNumber)
    {
        $this->container['creditNoteNumber'] = $creditNoteNumber;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Account|null
     */
    public function getAccount()
    {
        return $this->get('account');
    }

    /**
     * Sets account
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Account|null $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->get('code');
    }

    /**
     * Sets code
     *
     * @param string|null $code Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->get('date');
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets currencyRate
     *
     * @return double|null
     */
    public function getCurrencyRate()
    {
        return $this->get('currencyRate');
    }

    /**
     * Sets currencyRate
     *
     * @param double|null $currencyRate Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
     *
     * @return $this
     */
    public function setCurrencyRate($currencyRate)
    {
        $this->container['currencyRate'] = $currencyRate;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->get('amount');
    }

    /**
     * Sets amount
     *
     * @param double|null $amount The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->get('reference');
    }

    /**
     * Sets reference
     *
     * @param string|null $reference An optional description for the payment e.g. Direct Debit
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets isReconciled
     *
     * @return bool|null
     */
    public function getIsReconciled()
    {
        return $this->get('isReconciled');
    }

    /**
     * Sets isReconciled
     *
     * @param bool|null $isReconciled An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
     *
     * @return $this
     */
    public function setIsReconciled($isReconciled)
    {
        $this->container['isReconciled'] = $isReconciled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->get('status');
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the payment.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'status',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->get('paymentType');
    }

    /**
     * Sets paymentType
     *
     * @param string|null $paymentType See Payment Types.
     *
     * @return $this
     */
    public function setPaymentType($paymentType)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (! is_null($paymentType) && !in_array($paymentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'paymentType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC UTC timestamp of last update to the payment
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets paymentID
     *
     * @return string|null
     */
    public function getPaymentID()
    {
        return $this->get('paymentID');
    }

    /**
     * Sets paymentID
     *
     * @param string|null $paymentID The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
     *
     * @return $this
     */
    public function setPaymentID($paymentID)
    {
        $this->container['paymentID'] = $paymentID;

        return $this;
    }

    /**
     * Gets bankAccountNumber
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->get('bankAccountNumber');
    }

    /**
     * Sets bankAccountNumber
     *
     * @param string|null $bankAccountNumber The suppliers bank account number the payment is being made to
     *
     * @return $this
     */
    public function setBankAccountNumber($bankAccountNumber)
    {
        $this->container['bankAccountNumber'] = $bankAccountNumber;

        return $this;
    }

    /**
     * Gets particulars
     *
     * @return string|null
     */
    public function getParticulars()
    {
        return $this->get('particulars');
    }

    /**
     * Sets particulars
     *
     * @param string|null $particulars The suppliers bank account number the payment is being made to
     *
     * @return $this
     */
    public function setParticulars($particulars)
    {
        $this->container['particulars'] = $particulars;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string|null
     */
    public function getDetails()
    {
        return $this->get('details');
    }

    /**
     * Sets details
     *
     * @param string|null $details The information to appear on the supplier's bank account
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets hasAccount
     *
     * @return bool|null
     */
    public function getHasAccount()
    {
        return $this->get('hasAccount');
    }

    /**
     * Sets hasAccount
     *
     * @param bool|null $hasAccount A boolean to indicate if a contact has an validation errors
     *
     * @return $this
     */
    public function setHasAccount($hasAccount)
    {
        $this->container['hasAccount'] = $hasAccount;

        return $this;
    }

    /**
     * Gets hasValidationErrors
     *
     * @return bool|null
     */
    public function getHasValidationErrors()
    {
        return $this->get('hasValidationErrors');
    }

    /**
     * Sets hasValidationErrors
     *
     * @param bool|null $hasValidationErrors A boolean to indicate if a contact has an validation errors
     *
     * @return $this
     */
    public function setHasValidationErrors($hasValidationErrors)
    {
        $this->container['hasValidationErrors'] = $hasValidationErrors;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->get('validationErrors');
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
