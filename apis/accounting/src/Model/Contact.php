<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * Contact
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class Contact implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contactID' => 'string',
        'contactNumber' => 'string',
        'accountNumber' => 'string',
        'contactStatus' => 'string',
        'name' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'emailAddress' => 'string',
        'skypeUserName' => 'string',
        'contactPersons' => '\Consilience\Xero\AccountingSdk\Model\ContactPerson[]',
        'bankAccountDetails' => 'string',
        'taxNumber' => 'string',
        'accountsReceivableTaxType' => 'string',
        'accountsPayableTaxType' => 'string',
        'addresses' => '\Consilience\Xero\AccountingSdk\Model\Address[]',
        'phones' => '\Consilience\Xero\AccountingSdk\Model\Phone[]',
        'isSupplier' => 'bool',
        'isCustomer' => 'bool',
        'defaultCurrency' => '\Consilience\Xero\AccountingSdk\Model\CurrencyCode',
        'xeroNetworkKey' => 'string',
        'salesDefaultAccountCode' => 'string',
        'purchasesDefaultAccountCode' => 'string',
        'salesTrackingCategories' => '\Consilience\Xero\AccountingSdk\Model\TrackingCategory[]',
        'purchasesTrackingCategories' => '\Consilience\Xero\AccountingSdk\Model\TrackingCategory[]',
        'trackingCategoryName' => 'string',
        'trackingCategoryOption' => 'string',
        'paymentTerms' => '\Consilience\Xero\AccountingSdk\Model\PaymentTerm',
        'updatedDateUTC' => '\DateTime',
        'contactGroups' => '\Consilience\Xero\AccountingSdk\Model\ContactGroup[]',
        'website' => 'string',
        'brandingTheme' => '\Consilience\Xero\AccountingSdk\Model\BrandingTheme',
        'batchPayments' => '\Consilience\Xero\AccountingSdk\Model\BatchPaymentDetails',
        'discount' => 'double',
        'balances' => '\Consilience\Xero\AccountingSdk\Model\Balances',
        'attachments' => '\Consilience\Xero\AccountingSdk\Model\Attachment[]',
        'hasAttachments' => 'bool',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]',
        'hasValidationErrors' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'contactID' => 'uuid',
        'contactNumber' => null,
        'accountNumber' => null,
        'contactStatus' => null,
        'name' => null,
        'firstName' => null,
        'lastName' => null,
        'emailAddress' => null,
        'skypeUserName' => null,
        'contactPersons' => null,
        'bankAccountDetails' => null,
        'taxNumber' => null,
        'accountsReceivableTaxType' => null,
        'accountsPayableTaxType' => null,
        'addresses' => null,
        'phones' => null,
        'isSupplier' => null,
        'isCustomer' => null,
        'defaultCurrency' => null,
        'xeroNetworkKey' => null,
        'salesDefaultAccountCode' => null,
        'purchasesDefaultAccountCode' => null,
        'salesTrackingCategories' => null,
        'purchasesTrackingCategories' => null,
        'trackingCategoryName' => null,
        'trackingCategoryOption' => null,
        'paymentTerms' => null,
        'updatedDateUTC' => 'date-time',
        'contactGroups' => null,
        'website' => null,
        'brandingTheme' => null,
        'batchPayments' => null,
        'discount' => 'double',
        'balances' => null,
        'attachments' => null,
        'hasAttachments' => null,
        'validationErrors' => null,
        'hasValidationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contactID' => 'ContactID',
        'contactNumber' => 'ContactNumber',
        'accountNumber' => 'AccountNumber',
        'contactStatus' => 'ContactStatus',
        'name' => 'Name',
        'firstName' => 'FirstName',
        'lastName' => 'LastName',
        'emailAddress' => 'EmailAddress',
        'skypeUserName' => 'SkypeUserName',
        'contactPersons' => 'ContactPersons',
        'bankAccountDetails' => 'BankAccountDetails',
        'taxNumber' => 'TaxNumber',
        'accountsReceivableTaxType' => 'AccountsReceivableTaxType',
        'accountsPayableTaxType' => 'AccountsPayableTaxType',
        'addresses' => 'Addresses',
        'phones' => 'Phones',
        'isSupplier' => 'IsSupplier',
        'isCustomer' => 'IsCustomer',
        'defaultCurrency' => 'DefaultCurrency',
        'xeroNetworkKey' => 'XeroNetworkKey',
        'salesDefaultAccountCode' => 'SalesDefaultAccountCode',
        'purchasesDefaultAccountCode' => 'PurchasesDefaultAccountCode',
        'salesTrackingCategories' => 'SalesTrackingCategories',
        'purchasesTrackingCategories' => 'PurchasesTrackingCategories',
        'trackingCategoryName' => 'TrackingCategoryName',
        'trackingCategoryOption' => 'TrackingCategoryOption',
        'paymentTerms' => 'PaymentTerms',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'contactGroups' => 'ContactGroups',
        'website' => 'Website',
        'brandingTheme' => 'BrandingTheme',
        'batchPayments' => 'BatchPayments',
        'discount' => 'Discount',
        'balances' => 'Balances',
        'attachments' => 'Attachments',
        'hasAttachments' => 'HasAttachments',
        'validationErrors' => 'ValidationErrors',
        'hasValidationErrors' => 'HasValidationErrors'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'contactID' => 'setContactID',
        'contactNumber' => 'setContactNumber',
        'accountNumber' => 'setAccountNumber',
        'contactStatus' => 'setContactStatus',
        'name' => 'setName',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'emailAddress' => 'setEmailAddress',
        'skypeUserName' => 'setSkypeUserName',
        'contactPersons' => 'setContactPersons',
        'bankAccountDetails' => 'setBankAccountDetails',
        'taxNumber' => 'setTaxNumber',
        'accountsReceivableTaxType' => 'setAccountsReceivableTaxType',
        'accountsPayableTaxType' => 'setAccountsPayableTaxType',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'isSupplier' => 'setIsSupplier',
        'isCustomer' => 'setIsCustomer',
        'defaultCurrency' => 'setDefaultCurrency',
        'xeroNetworkKey' => 'setXeroNetworkKey',
        'salesDefaultAccountCode' => 'setSalesDefaultAccountCode',
        'purchasesDefaultAccountCode' => 'setPurchasesDefaultAccountCode',
        'salesTrackingCategories' => 'setSalesTrackingCategories',
        'purchasesTrackingCategories' => 'setPurchasesTrackingCategories',
        'trackingCategoryName' => 'setTrackingCategoryName',
        'trackingCategoryOption' => 'setTrackingCategoryOption',
        'paymentTerms' => 'setPaymentTerms',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'contactGroups' => 'setContactGroups',
        'website' => 'setWebsite',
        'brandingTheme' => 'setBrandingTheme',
        'batchPayments' => 'setBatchPayments',
        'discount' => 'setDiscount',
        'balances' => 'setBalances',
        'attachments' => 'setAttachments',
        'hasAttachments' => 'setHasAttachments',
        'validationErrors' => 'setValidationErrors',
        'hasValidationErrors' => 'setHasValidationErrors'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'contactID' => 'getContactID',
        'contactNumber' => 'getContactNumber',
        'accountNumber' => 'getAccountNumber',
        'contactStatus' => 'getContactStatus',
        'name' => 'getName',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'emailAddress' => 'getEmailAddress',
        'skypeUserName' => 'getSkypeUserName',
        'contactPersons' => 'getContactPersons',
        'bankAccountDetails' => 'getBankAccountDetails',
        'taxNumber' => 'getTaxNumber',
        'accountsReceivableTaxType' => 'getAccountsReceivableTaxType',
        'accountsPayableTaxType' => 'getAccountsPayableTaxType',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'isSupplier' => 'getIsSupplier',
        'isCustomer' => 'getIsCustomer',
        'defaultCurrency' => 'getDefaultCurrency',
        'xeroNetworkKey' => 'getXeroNetworkKey',
        'salesDefaultAccountCode' => 'getSalesDefaultAccountCode',
        'purchasesDefaultAccountCode' => 'getPurchasesDefaultAccountCode',
        'salesTrackingCategories' => 'getSalesTrackingCategories',
        'purchasesTrackingCategories' => 'getPurchasesTrackingCategories',
        'trackingCategoryName' => 'getTrackingCategoryName',
        'trackingCategoryOption' => 'getTrackingCategoryOption',
        'paymentTerms' => 'getPaymentTerms',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'contactGroups' => 'getContactGroups',
        'website' => 'getWebsite',
        'brandingTheme' => 'getBrandingTheme',
        'batchPayments' => 'getBatchPayments',
        'discount' => 'getDiscount',
        'balances' => 'getBalances',
        'attachments' => 'getAttachments',
        'hasAttachments' => 'getHasAttachments',
        'validationErrors' => 'getValidationErrors',
        'hasValidationErrors' => 'getHasValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONTACT_STATUS_ACTIVE = 'ACTIVE';
    const CONTACT_STATUS_ARCHIVED = 'ARCHIVED';
    const CONTACT_STATUS_GDPRREQUEST = 'GDPRREQUEST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactStatusAllowableValues()
    {
        return [
            self::CONTACT_STATUS_ACTIVE,
            self::CONTACT_STATUS_ARCHIVED,
            self::CONTACT_STATUS_GDPRREQUEST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contactID'] = $data['contactID'] ?? null;
        $this->container['contactNumber'] = $data['contactNumber'] ?? null;
        $this->container['accountNumber'] = $data['accountNumber'] ?? null;
        $this->container['contactStatus'] = $data['contactStatus'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['firstName'] = $data['firstName'] ?? null;
        $this->container['lastName'] = $data['lastName'] ?? null;
        $this->container['emailAddress'] = $data['emailAddress'] ?? null;
        $this->container['skypeUserName'] = $data['skypeUserName'] ?? null;
        $this->container['contactPersons'] = $data['contactPersons'] ?? null;
        $this->container['bankAccountDetails'] = $data['bankAccountDetails'] ?? null;
        $this->container['taxNumber'] = $data['taxNumber'] ?? null;
        $this->container['accountsReceivableTaxType'] = $data['accountsReceivableTaxType'] ?? null;
        $this->container['accountsPayableTaxType'] = $data['accountsPayableTaxType'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['phones'] = $data['phones'] ?? null;
        $this->container['isSupplier'] = $data['isSupplier'] ?? null;
        $this->container['isCustomer'] = $data['isCustomer'] ?? null;
        $this->container['defaultCurrency'] = $data['defaultCurrency'] ?? null;
        $this->container['xeroNetworkKey'] = $data['xeroNetworkKey'] ?? null;
        $this->container['salesDefaultAccountCode'] = $data['salesDefaultAccountCode'] ?? null;
        $this->container['purchasesDefaultAccountCode'] = $data['purchasesDefaultAccountCode'] ?? null;
        $this->container['salesTrackingCategories'] = $data['salesTrackingCategories'] ?? null;
        $this->container['purchasesTrackingCategories'] = $data['purchasesTrackingCategories'] ?? null;
        $this->container['trackingCategoryName'] = $data['trackingCategoryName'] ?? null;
        $this->container['trackingCategoryOption'] = $data['trackingCategoryOption'] ?? null;
        $this->container['paymentTerms'] = $data['paymentTerms'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
        $this->container['contactGroups'] = $data['contactGroups'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
        $this->container['brandingTheme'] = $data['brandingTheme'] ?? null;
        $this->container['batchPayments'] = $data['batchPayments'] ?? null;
        $this->container['discount'] = $data['discount'] ?? null;
        $this->container['balances'] = $data['balances'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['hasAttachments'] = $data['hasAttachments'] ?? null;
        $this->container['validationErrors'] = $data['validationErrors'] ?? null;
        $this->container['hasValidationErrors'] = $data['hasValidationErrors'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['contactNumber']) && (mb_strlen($this->container['contactNumber']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'contactNumber',
                50
            );
        }

        if (! is_null($this->container['accountNumber']) && (mb_strlen($this->container['accountNumber']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'accountNumber',
                50
            );
        }

        $allowedValues = $this->getContactStatusAllowableValues();
        if (!is_null($this->container['contactStatus']) && !in_array($this->container['contactStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'contactStatus',
                implode('", "', $allowedValues)
            );
        }

        if (! is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'name',
                255
            );
        }

        if (! is_null($this->container['firstName']) && (mb_strlen($this->container['firstName']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'firstName',
                255
            );
        }

        if (! is_null($this->container['lastName']) && (mb_strlen($this->container['lastName']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'lastName',
                255
            );
        }

        if (! is_null($this->container['emailAddress']) && (mb_strlen($this->container['emailAddress']) > 255)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'emailAddress',
                255
            );
        }

        if (! is_null($this->container['taxNumber']) && (mb_strlen($this->container['taxNumber']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'taxNumber',
                50
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contactID
     *
     * @return string|null
     */
    public function getContactID()
    {
        return $this->get('contactID');
    }

    /**
     * Sets contactID
     *
     * @param string|null $contactID Xero identifier
     *
     * @return $this
     */
    public function setContactID($contactID)
    {
        $this->container['contactID'] = $contactID;

        return $this;
    }

    /**
     * Gets contactNumber
     *
     * @return string|null
     */
    public function getContactNumber()
    {
        return $this->get('contactNumber');
    }

    /**
     * Sets contactNumber
     *
     * @param string|null $contactNumber This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.
     *
     * @return $this
     */
    public function setContactNumber($contactNumber)
    {
        if (! is_null($contactNumber) && (mb_strlen($contactNumber) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contactNumber when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['contactNumber'] = $contactNumber;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->get('accountNumber');
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber A user defined account number. This can be updated via the API and the Xero UI (max length = 50)
     *
     * @return $this
     */
    public function setAccountNumber($accountNumber)
    {
        if (! is_null($accountNumber) && (mb_strlen($accountNumber) > 50)) {
            throw new \InvalidArgumentException('invalid length for $accountNumber when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets contactStatus
     *
     * @return string|null
     */
    public function getContactStatus()
    {
        return $this->get('contactStatus');
    }

    /**
     * Sets contactStatus
     *
     * @param string|null $contactStatus Current status of a contact – see contact status types
     *
     * @return $this
     */
    public function setContactStatus($contactStatus)
    {
        $allowedValues = $this->getContactStatusAllowableValues();
        if (! is_null($contactStatus) && !in_array($contactStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'contactStatus',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['contactStatus'] = $contactStatus;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string|null $name Full name of contact/organisation (max length = 255)
     *
     * @return $this
     */
    public function setName($name)
    {
        if (! is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->get('firstName');
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First name of contact person (max length = 255)
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        if (! is_null($firstName) && (mb_strlen($firstName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->get('lastName');
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Last name of contact person (max length = 255)
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        if (! is_null($lastName) && (mb_strlen($lastName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->get('emailAddress');
    }

    /**
     * Sets emailAddress
     *
     * @param string|null $emailAddress Email address of contact person (umlauts not supported) (max length  = 255)
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        if (! is_null($emailAddress) && (mb_strlen($emailAddress) > 255)) {
            throw new \InvalidArgumentException('invalid length for $emailAddress when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets skypeUserName
     *
     * @return string|null
     */
    public function getSkypeUserName()
    {
        return $this->get('skypeUserName');
    }

    /**
     * Sets skypeUserName
     *
     * @param string|null $skypeUserName Skype user name of contact
     *
     * @return $this
     */
    public function setSkypeUserName($skypeUserName)
    {
        $this->container['skypeUserName'] = $skypeUserName;

        return $this;
    }

    /**
     * Gets contactPersons
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ContactPerson[]|null
     */
    public function getContactPersons()
    {
        return $this->get('contactPersons');
    }

    /**
     * Sets contactPersons
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ContactPerson[]|null $contactPersons See contact persons
     *
     * @return $this
     */
    public function setContactPersons($contactPersons)
    {
        $this->container['contactPersons'] = $contactPersons;

        return $this;
    }

    /**
     * Gets bankAccountDetails
     *
     * @return string|null
     */
    public function getBankAccountDetails()
    {
        return $this->get('bankAccountDetails');
    }

    /**
     * Sets bankAccountDetails
     *
     * @param string|null $bankAccountDetails Bank account number of contact
     *
     * @return $this
     */
    public function setBankAccountDetails($bankAccountDetails)
    {
        $this->container['bankAccountDetails'] = $bankAccountDetails;

        return $this;
    }

    /**
     * Gets taxNumber
     *
     * @return string|null
     */
    public function getTaxNumber()
    {
        return $this->get('taxNumber');
    }

    /**
     * Sets taxNumber
     *
     * @param string|null $taxNumber Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length = 50)
     *
     * @return $this
     */
    public function setTaxNumber($taxNumber)
    {
        if (! is_null($taxNumber) && (mb_strlen($taxNumber) > 50)) {
            throw new \InvalidArgumentException('invalid length for $taxNumber when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['taxNumber'] = $taxNumber;

        return $this;
    }

    /**
     * Gets accountsReceivableTaxType
     *
     * @return string|null
     */
    public function getAccountsReceivableTaxType()
    {
        return $this->get('accountsReceivableTaxType');
    }

    /**
     * Sets accountsReceivableTaxType
     *
     * @param string|null $accountsReceivableTaxType The tax type from TaxRates
     *
     * @return $this
     */
    public function setAccountsReceivableTaxType($accountsReceivableTaxType)
    {
        $this->container['accountsReceivableTaxType'] = $accountsReceivableTaxType;

        return $this;
    }

    /**
     * Gets accountsPayableTaxType
     *
     * @return string|null
     */
    public function getAccountsPayableTaxType()
    {
        return $this->get('accountsPayableTaxType');
    }

    /**
     * Sets accountsPayableTaxType
     *
     * @param string|null $accountsPayableTaxType The tax type from TaxRates
     *
     * @return $this
     */
    public function setAccountsPayableTaxType($accountsPayableTaxType)
    {
        $this->container['accountsPayableTaxType'] = $accountsPayableTaxType;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->get('addresses');
    }

    /**
     * Sets addresses
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Address[]|null $addresses Store certain address types for a contact – see address types
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Phone[]|null
     */
    public function getPhones()
    {
        return $this->get('phones');
    }

    /**
     * Sets phones
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Phone[]|null $phones Store certain phone types for a contact – see phone types
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets isSupplier
     *
     * @return bool|null
     */
    public function getIsSupplier()
    {
        return $this->get('isSupplier');
    }

    /**
     * Sets isSupplier
     *
     * @param bool|null $isSupplier true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.
     *
     * @return $this
     */
    public function setIsSupplier($isSupplier)
    {
        $this->container['isSupplier'] = $isSupplier;

        return $this;
    }

    /**
     * Gets isCustomer
     *
     * @return bool|null
     */
    public function getIsCustomer()
    {
        return $this->get('isCustomer');
    }

    /**
     * Sets isCustomer
     *
     * @param bool|null $isCustomer true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.
     *
     * @return $this
     */
    public function setIsCustomer($isCustomer)
    {
        $this->container['isCustomer'] = $isCustomer;

        return $this;
    }

    /**
     * Gets defaultCurrency
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null
     */
    public function getDefaultCurrency()
    {
        return $this->get('defaultCurrency');
    }

    /**
     * Sets defaultCurrency
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null $defaultCurrency defaultCurrency
     *
     * @return $this
     */
    public function setDefaultCurrency($defaultCurrency)
    {
        $this->container['defaultCurrency'] = $defaultCurrency;

        return $this;
    }

    /**
     * Gets xeroNetworkKey
     *
     * @return string|null
     */
    public function getXeroNetworkKey()
    {
        return $this->get('xeroNetworkKey');
    }

    /**
     * Sets xeroNetworkKey
     *
     * @param string|null $xeroNetworkKey Store XeroNetworkKey for contacts.
     *
     * @return $this
     */
    public function setXeroNetworkKey($xeroNetworkKey)
    {
        $this->container['xeroNetworkKey'] = $xeroNetworkKey;

        return $this;
    }

    /**
     * Gets salesDefaultAccountCode
     *
     * @return string|null
     */
    public function getSalesDefaultAccountCode()
    {
        return $this->get('salesDefaultAccountCode');
    }

    /**
     * Sets salesDefaultAccountCode
     *
     * @param string|null $salesDefaultAccountCode The default sales account code for contacts
     *
     * @return $this
     */
    public function setSalesDefaultAccountCode($salesDefaultAccountCode)
    {
        $this->container['salesDefaultAccountCode'] = $salesDefaultAccountCode;

        return $this;
    }

    /**
     * Gets purchasesDefaultAccountCode
     *
     * @return string|null
     */
    public function getPurchasesDefaultAccountCode()
    {
        return $this->get('purchasesDefaultAccountCode');
    }

    /**
     * Sets purchasesDefaultAccountCode
     *
     * @param string|null $purchasesDefaultAccountCode The default purchases account code for contacts
     *
     * @return $this
     */
    public function setPurchasesDefaultAccountCode($purchasesDefaultAccountCode)
    {
        $this->container['purchasesDefaultAccountCode'] = $purchasesDefaultAccountCode;

        return $this;
    }

    /**
     * Gets salesTrackingCategories
     *
     * @return \Consilience\Xero\AccountingSdk\Model\TrackingCategory[]|null
     */
    public function getSalesTrackingCategories()
    {
        return $this->get('salesTrackingCategories');
    }

    /**
     * Sets salesTrackingCategories
     *
     * @param \Consilience\Xero\AccountingSdk\Model\TrackingCategory[]|null $salesTrackingCategories The default sales tracking categories for contacts
     *
     * @return $this
     */
    public function setSalesTrackingCategories($salesTrackingCategories)
    {
        $this->container['salesTrackingCategories'] = $salesTrackingCategories;

        return $this;
    }

    /**
     * Gets purchasesTrackingCategories
     *
     * @return \Consilience\Xero\AccountingSdk\Model\TrackingCategory[]|null
     */
    public function getPurchasesTrackingCategories()
    {
        return $this->get('purchasesTrackingCategories');
    }

    /**
     * Sets purchasesTrackingCategories
     *
     * @param \Consilience\Xero\AccountingSdk\Model\TrackingCategory[]|null $purchasesTrackingCategories The default purchases tracking categories for contacts
     *
     * @return $this
     */
    public function setPurchasesTrackingCategories($purchasesTrackingCategories)
    {
        $this->container['purchasesTrackingCategories'] = $purchasesTrackingCategories;

        return $this;
    }

    /**
     * Gets trackingCategoryName
     *
     * @return string|null
     */
    public function getTrackingCategoryName()
    {
        return $this->get('trackingCategoryName');
    }

    /**
     * Sets trackingCategoryName
     *
     * @param string|null $trackingCategoryName The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
     *
     * @return $this
     */
    public function setTrackingCategoryName($trackingCategoryName)
    {
        $this->container['trackingCategoryName'] = $trackingCategoryName;

        return $this;
    }

    /**
     * Gets trackingCategoryOption
     *
     * @return string|null
     */
    public function getTrackingCategoryOption()
    {
        return $this->get('trackingCategoryOption');
    }

    /**
     * Sets trackingCategoryOption
     *
     * @param string|null $trackingCategoryOption The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
     *
     * @return $this
     */
    public function setTrackingCategoryOption($trackingCategoryOption)
    {
        $this->container['trackingCategoryOption'] = $trackingCategoryOption;

        return $this;
    }

    /**
     * Gets paymentTerms
     *
     * @return \Consilience\Xero\AccountingSdk\Model\PaymentTerm|null
     */
    public function getPaymentTerms()
    {
        return $this->get('paymentTerms');
    }

    /**
     * Sets paymentTerms
     *
     * @param \Consilience\Xero\AccountingSdk\Model\PaymentTerm|null $paymentTerms paymentTerms
     *
     * @return $this
     */
    public function setPaymentTerms($paymentTerms)
    {
        $this->container['paymentTerms'] = $paymentTerms;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC UTC timestamp of last update to contact
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets contactGroups
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ContactGroup[]|null
     */
    public function getContactGroups()
    {
        return $this->get('contactGroups');
    }

    /**
     * Sets contactGroups
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ContactGroup[]|null $contactGroups Displays which contact groups a contact is included in
     *
     * @return $this
     */
    public function setContactGroups($contactGroups)
    {
        $this->container['contactGroups'] = $contactGroups;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->get('website');
    }

    /**
     * Sets website
     *
     * @param string|null $website Website address for contact (read only)
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets brandingTheme
     *
     * @return \Consilience\Xero\AccountingSdk\Model\BrandingTheme|null
     */
    public function getBrandingTheme()
    {
        return $this->get('brandingTheme');
    }

    /**
     * Sets brandingTheme
     *
     * @param \Consilience\Xero\AccountingSdk\Model\BrandingTheme|null $brandingTheme brandingTheme
     *
     * @return $this
     */
    public function setBrandingTheme($brandingTheme)
    {
        $this->container['brandingTheme'] = $brandingTheme;

        return $this;
    }

    /**
     * Gets batchPayments
     *
     * @return \Consilience\Xero\AccountingSdk\Model\BatchPaymentDetails|null
     */
    public function getBatchPayments()
    {
        return $this->get('batchPayments');
    }

    /**
     * Sets batchPayments
     *
     * @param \Consilience\Xero\AccountingSdk\Model\BatchPaymentDetails|null $batchPayments batchPayments
     *
     * @return $this
     */
    public function setBatchPayments($batchPayments)
    {
        $this->container['batchPayments'] = $batchPayments;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double|null
     */
    public function getDiscount()
    {
        return $this->get('discount');
    }

    /**
     * Sets discount
     *
     * @param double|null $discount The default discount rate for the contact (read only)
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Balances|null
     */
    public function getBalances()
    {
        return $this->get('balances');
    }

    /**
     * Sets balances
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Balances|null $balances balances
     *
     * @return $this
     */
    public function setBalances($balances)
    {
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->get('attachments');
    }

    /**
     * Sets attachments
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Attachment[]|null $attachments Displays array of attachments from the API
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments()
    {
        return $this->get('hasAttachments');
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments A boolean to indicate if a contact has an attachment
     *
     * @return $this
     */
    public function setHasAttachments($hasAttachments)
    {
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->get('validationErrors');
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays validation errors returned from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Gets hasValidationErrors
     *
     * @return bool|null
     */
    public function getHasValidationErrors()
    {
        return $this->get('hasValidationErrors');
    }

    /**
     * Sets hasValidationErrors
     *
     * @param bool|null $hasValidationErrors A boolean to indicate if a contact has an validation errors
     *
     * @return $this
     */
    public function setHasValidationErrors($hasValidationErrors)
    {
        $this->container['hasValidationErrors'] = $hasValidationErrors;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
