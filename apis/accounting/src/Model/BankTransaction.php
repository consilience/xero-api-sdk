<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * BankTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * BankTransaction Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BankTransaction implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'contact' => '\Consilience\Xero\AccountingSdk\Model\Contact',
        'lineitems' => '\Consilience\Xero\AccountingSdk\Model\LineItem[]',
        'bankAccount' => '\Consilience\Xero\AccountingSdk\Model\Account',
        'isReconciled' => 'bool',
        'date' => '\DateTime',
        'reference' => 'string',
        'currencyCode' => '\Consilience\Xero\AccountingSdk\Model\CurrencyCode',
        'currencyRate' => 'double',
        'url' => 'string',
        'status' => 'string',
        'lineAmountTypes' => '\Consilience\Xero\AccountingSdk\Model\LineAmountTypes',
        'subTotal' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'bankTransactionID' => 'string',
        'prepaymentID' => 'string',
        'overpaymentID' => 'string',
        'updatedDateUTC' => '\DateTime',
        'hasAttachments' => 'bool',
        'statusAttributeString' => 'string',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'contact' => null,
        'lineitems' => null,
        'bankAccount' => null,
        'isReconciled' => null,
        'date' => 'date',
        'reference' => null,
        'currencyCode' => null,
        'currencyRate' => 'double',
        'url' => null,
        'status' => null,
        'lineAmountTypes' => null,
        'subTotal' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'bankTransactionID' => 'uuid',
        'prepaymentID' => 'uuid',
        'overpaymentID' => 'uuid',
        'updatedDateUTC' => 'date-time',
        'hasAttachments' => null,
        'statusAttributeString' => null,
        'validationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'contact' => 'Contact',
        'lineitems' => 'Lineitems',
        'bankAccount' => 'BankAccount',
        'isReconciled' => 'IsReconciled',
        'date' => 'Date',
        'reference' => 'Reference',
        'currencyCode' => 'CurrencyCode',
        'currencyRate' => 'CurrencyRate',
        'url' => 'Url',
        'status' => 'Status',
        'lineAmountTypes' => 'LineAmountTypes',
        'subTotal' => 'SubTotal',
        'totalTax' => 'TotalTax',
        'total' => 'Total',
        'bankTransactionID' => 'BankTransactionID',
        'prepaymentID' => 'PrepaymentID',
        'overpaymentID' => 'OverpaymentID',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'hasAttachments' => 'HasAttachments',
        'statusAttributeString' => 'StatusAttributeString',
        'validationErrors' => 'ValidationErrors'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'contact' => 'setContact',
        'lineitems' => 'setLineitems',
        'bankAccount' => 'setBankAccount',
        'isReconciled' => 'setIsReconciled',
        'date' => 'setDate',
        'reference' => 'setReference',
        'currencyCode' => 'setCurrencyCode',
        'currencyRate' => 'setCurrencyRate',
        'url' => 'setUrl',
        'status' => 'setStatus',
        'lineAmountTypes' => 'setLineAmountTypes',
        'subTotal' => 'setSubTotal',
        'totalTax' => 'setTotalTax',
        'total' => 'setTotal',
        'bankTransactionID' => 'setBankTransactionID',
        'prepaymentID' => 'setPrepaymentID',
        'overpaymentID' => 'setOverpaymentID',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'hasAttachments' => 'setHasAttachments',
        'statusAttributeString' => 'setStatusAttributeString',
        'validationErrors' => 'setValidationErrors'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'contact' => 'getContact',
        'lineitems' => 'getLineitems',
        'bankAccount' => 'getBankAccount',
        'isReconciled' => 'getIsReconciled',
        'date' => 'getDate',
        'reference' => 'getReference',
        'currencyCode' => 'getCurrencyCode',
        'currencyRate' => 'getCurrencyRate',
        'url' => 'getUrl',
        'status' => 'getStatus',
        'lineAmountTypes' => 'getLineAmountTypes',
        'subTotal' => 'getSubTotal',
        'totalTax' => 'getTotalTax',
        'total' => 'getTotal',
        'bankTransactionID' => 'getBankTransactionID',
        'prepaymentID' => 'getPrepaymentID',
        'overpaymentID' => 'getOverpaymentID',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'hasAttachments' => 'getHasAttachments',
        'statusAttributeString' => 'getStatusAttributeString',
        'validationErrors' => 'getValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_RECEIVE = 'RECEIVE';
    const TYPE_RECEIVE_OVERPAYMENT = 'RECEIVE-OVERPAYMENT';
    const TYPE_RECEIVE_PREPAYMENT = 'RECEIVE-PREPAYMENT';
    const TYPE_SPEND = 'SPEND';
    const TYPE_SPEND_OVERPAYMENT = 'SPEND-OVERPAYMENT';
    const TYPE_SPEND_PREPAYMENT = 'SPEND-PREPAYMENT';
    const TYPE_RECEIVE_TRANSFER = 'RECEIVE-TRANSFER';
    const TYPE_SPEND_TRANSFER = 'SPEND-TRANSFER';const STATUS_AUTHORISED = 'AUTHORISED';
    const STATUS_DELETED = 'DELETED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_RECEIVE,
            self::TYPE_RECEIVE_OVERPAYMENT,
            self::TYPE_RECEIVE_PREPAYMENT,
            self::TYPE_SPEND,
            self::TYPE_SPEND_OVERPAYMENT,
            self::TYPE_SPEND_PREPAYMENT,
            self::TYPE_RECEIVE_TRANSFER,
            self::TYPE_SPEND_TRANSFER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AUTHORISED,
            self::STATUS_DELETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['contact'] = $data['contact'] ?? null;
        $this->container['lineitems'] = $data['lineitems'] ?? null;
        $this->container['bankAccount'] = $data['bankAccount'] ?? null;
        $this->container['isReconciled'] = $data['isReconciled'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['currencyCode'] = $data['currencyCode'] ?? null;
        $this->container['currencyRate'] = $data['currencyRate'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['lineAmountTypes'] = $data['lineAmountTypes'] ?? null;
        $this->container['subTotal'] = $data['subTotal'] ?? null;
        $this->container['totalTax'] = $data['totalTax'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['bankTransactionID'] = $data['bankTransactionID'] ?? null;
        $this->container['prepaymentID'] = $data['prepaymentID'] ?? null;
        $this->container['overpaymentID'] = $data['overpaymentID'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
        $this->container['hasAttachments'] = $data['hasAttachments'] ?? null;
        $this->container['statusAttributeString'] = $data['statusAttributeString'] ?? null;
        $this->container['validationErrors'] = $data['validationErrors'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'type');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'type',
                implode('", "', $allowedValues)
            );
        }

        if ($this->container['contact'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'contact');
        }
        if ($this->container['lineitems'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'lineitems');
        }
        if ($this->container['bankAccount'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'bankAccount');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'status',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->get('type');
    }

    /**
     * Sets type
     *
     * @param string $type See Bank Transaction Types
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'type',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Contact
     */
    public function getContact()
    {
        return $this->get('contact');
    }

    /**
     * Sets contact
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Contact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets lineitems
     *
     * @return \Consilience\Xero\AccountingSdk\Model\LineItem[]
     */
    public function getLineitems()
    {
        return $this->get('lineitems');
    }

    /**
     * Sets lineitems
     *
     * @param \Consilience\Xero\AccountingSdk\Model\LineItem[] $lineitems See LineItems
     *
     * @return $this
     */
    public function setLineitems($lineitems)
    {
        $this->container['lineitems'] = $lineitems;

        return $this;
    }

    /**
     * Gets bankAccount
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Account
     */
    public function getBankAccount()
    {
        return $this->get('bankAccount');
    }

    /**
     * Sets bankAccount
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Account $bankAccount bankAccount
     *
     * @return $this
     */
    public function setBankAccount($bankAccount)
    {
        $this->container['bankAccount'] = $bankAccount;

        return $this;
    }

    /**
     * Gets isReconciled
     *
     * @return bool|null
     */
    public function getIsReconciled()
    {
        return $this->get('isReconciled');
    }

    /**
     * Sets isReconciled
     *
     * @param bool|null $isReconciled Boolean to show if transaction is reconciled
     *
     * @return $this
     */
    public function setIsReconciled($isReconciled)
    {
        $this->container['isReconciled'] = $isReconciled;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->get('date');
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date of transaction – YYYY-MM-DD
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->get('reference');
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference for the transaction. Only supported for SPEND and RECEIVE transactions.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null
     */
    public function getCurrencyCode()
    {
        return $this->get('currencyCode');
    }

    /**
     * Sets currencyCode
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets currencyRate
     *
     * @return double|null
     */
    public function getCurrencyRate()
    {
        return $this->get('currencyRate');
    }

    /**
     * Sets currencyRate
     *
     * @param double|null $currencyRate Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.
     *
     * @return $this
     */
    public function setCurrencyRate($currencyRate)
    {
        $this->container['currencyRate'] = $currencyRate;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->get('url');
    }

    /**
     * Sets url
     *
     * @param string|null $url URL link to a source document – shown as “Go to App Name”
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->get('status');
    }

    /**
     * Sets status
     *
     * @param string|null $status See Bank Transaction Status Codes
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'status',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets lineAmountTypes
     *
     * @return \Consilience\Xero\AccountingSdk\Model\LineAmountTypes|null
     */
    public function getLineAmountTypes()
    {
        return $this->get('lineAmountTypes');
    }

    /**
     * Sets lineAmountTypes
     *
     * @param \Consilience\Xero\AccountingSdk\Model\LineAmountTypes|null $lineAmountTypes lineAmountTypes
     *
     * @return $this
     */
    public function setLineAmountTypes($lineAmountTypes)
    {
        $this->container['lineAmountTypes'] = $lineAmountTypes;

        return $this;
    }

    /**
     * Gets subTotal
     *
     * @return double|null
     */
    public function getSubTotal()
    {
        return $this->get('subTotal');
    }

    /**
     * Sets subTotal
     *
     * @param double|null $subTotal Total of bank transaction excluding taxes
     *
     * @return $this
     */
    public function setSubTotal($subTotal)
    {
        $this->container['subTotal'] = $subTotal;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return double|null
     */
    public function getTotalTax()
    {
        return $this->get('totalTax');
    }

    /**
     * Sets totalTax
     *
     * @param double|null $totalTax Total tax on bank transaction
     *
     * @return $this
     */
    public function setTotalTax($totalTax)
    {
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double|null
     */
    public function getTotal()
    {
        return $this->get('total');
    }

    /**
     * Sets total
     *
     * @param double|null $total Total of bank transaction tax inclusive
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets bankTransactionID
     *
     * @return string|null
     */
    public function getBankTransactionID()
    {
        return $this->get('bankTransactionID');
    }

    /**
     * Sets bankTransactionID
     *
     * @param string|null $bankTransactionID Xero generated unique identifier for bank transaction
     *
     * @return $this
     */
    public function setBankTransactionID($bankTransactionID)
    {
        $this->container['bankTransactionID'] = $bankTransactionID;

        return $this;
    }

    /**
     * Gets prepaymentID
     *
     * @return string|null
     */
    public function getPrepaymentID()
    {
        return $this->get('prepaymentID');
    }

    /**
     * Sets prepaymentID
     *
     * @param string|null $prepaymentID Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
     *
     * @return $this
     */
    public function setPrepaymentID($prepaymentID)
    {
        $this->container['prepaymentID'] = $prepaymentID;

        return $this;
    }

    /**
     * Gets overpaymentID
     *
     * @return string|null
     */
    public function getOverpaymentID()
    {
        return $this->get('overpaymentID');
    }

    /**
     * Sets overpaymentID
     *
     * @param string|null $overpaymentID Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
     *
     * @return $this
     */
    public function setOverpaymentID($overpaymentID)
    {
        $this->container['overpaymentID'] = $overpaymentID;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified date UTC format
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments()
    {
        return $this->get('hasAttachments');
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments Boolean to indicate if a bank transaction has an attachment
     *
     * @return $this
     */
    public function setHasAttachments($hasAttachments)
    {
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets statusAttributeString
     *
     * @return string|null
     */
    public function getStatusAttributeString()
    {
        return $this->get('statusAttributeString');
    }

    /**
     * Sets statusAttributeString
     *
     * @param string|null $statusAttributeString A string to indicate if a invoice status
     *
     * @return $this
     */
    public function setStatusAttributeString($statusAttributeString)
    {
        $this->container['statusAttributeString'] = $statusAttributeString;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->get('validationErrors');
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
