<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * Superfund
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * Superfund Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class Superfund implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Superfund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'superFundID' => 'object',
        'type' => '\Consilience\Xero\PayrollAuSdk\Model\SuperFundType',
        'name' => 'string',
        'aBN' => 'string',
        'bSB' => 'string',
        'accountNumber' => 'string',
        'accountNme' => 'string',
        'electronicServiceAddress' => 'string',
        'employerNumber' => 'string',
        'sPIN' => 'string',
        'uSI' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'superFundID' => 'uuid',
        'type' => null,
        'name' => null,
        'aBN' => null,
        'bSB' => null,
        'accountNumber' => null,
        'accountNme' => null,
        'electronicServiceAddress' => null,
        'employerNumber' => null,
        'sPIN' => null,
        'uSI' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'superFundID' => 'SuperFundID',
        'type' => 'Type',
        'name' => 'Name',
        'aBN' => 'ABN',
        'bSB' => 'BSB',
        'accountNumber' => 'AccountNumber',
        'accountNme' => 'AccountNme',
        'electronicServiceAddress' => 'ElectronicServiceAddress',
        'employerNumber' => 'EmployerNumber',
        'sPIN' => 'SPIN',
        'uSI' => 'USI'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'superFundID' => 'setSuperFundID',
        'type' => 'setType',
        'name' => 'setName',
        'aBN' => 'setABN',
        'bSB' => 'setBSB',
        'accountNumber' => 'setAccountNumber',
        'accountNme' => 'setAccountNme',
        'electronicServiceAddress' => 'setElectronicServiceAddress',
        'employerNumber' => 'setEmployerNumber',
        'sPIN' => 'setSPIN',
        'uSI' => 'setUSI'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'superFundID' => 'getSuperFundID',
        'type' => 'getType',
        'name' => 'getName',
        'aBN' => 'getABN',
        'bSB' => 'getBSB',
        'accountNumber' => 'getAccountNumber',
        'accountNme' => 'getAccountNme',
        'electronicServiceAddress' => 'getElectronicServiceAddress',
        'employerNumber' => 'getEmployerNumber',
        'sPIN' => 'getSPIN',
        'uSI' => 'getUSI'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['superFundID'] = $data['superFundID'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['aBN'] = $data['aBN'] ?? null;
        $this->container['bSB'] = $data['bSB'] ?? null;
        $this->container['accountNumber'] = $data['accountNumber'] ?? null;
        $this->container['accountNme'] = $data['accountNme'] ?? null;
        $this->container['electronicServiceAddress'] = $data['electronicServiceAddress'] ?? null;
        $this->container['employerNumber'] = $data['employerNumber'] ?? null;
        $this->container['sPIN'] = $data['sPIN'] ?? null;
        $this->container['uSI'] = $data['uSI'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'type');
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets superFundID
     *
     * @return object|null
     */
    public function getSuperFundID()
    {
        return $this->get('superFundID');
    }

    /**
     * Sets superFundID
     *
     * @param object|null $superFundID Xero identifier for a super fund
     *
     * @return $this
     */
    public function setSuperFundID($superFundID)
    {
        $this->container['superFundID'] = $superFundID;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperFundType
     */
    public function getType()
    {
        return $this->get('type');
    }

    /**
     * Sets type
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\SuperFundType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the super fund
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets aBN
     *
     * @return string|null
     */
    public function getABN()
    {
        return $this->get('aBN');
    }

    /**
     * Sets aBN
     *
     * @param string|null $aBN ABN of the self managed super fund
     *
     * @return $this
     */
    public function setABN($aBN)
    {
        $this->container['aBN'] = $aBN;

        return $this;
    }

    /**
     * Gets bSB
     *
     * @return string|null
     */
    public function getBSB()
    {
        return $this->get('bSB');
    }

    /**
     * Sets bSB
     *
     * @param string|null $bSB BSB of the self managed super fund
     *
     * @return $this
     */
    public function setBSB($bSB)
    {
        $this->container['bSB'] = $bSB;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->get('accountNumber');
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber The account number for the self managed super fund.
     *
     * @return $this
     */
    public function setAccountNumber($accountNumber)
    {
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets accountNme
     *
     * @return string|null
     */
    public function getAccountNme()
    {
        return $this->get('accountNme');
    }

    /**
     * Sets accountNme
     *
     * @param string|null $accountNme The account name for the self managed super fund.
     *
     * @return $this
     */
    public function setAccountNme($accountNme)
    {
        $this->container['accountNme'] = $accountNme;

        return $this;
    }

    /**
     * Gets electronicServiceAddress
     *
     * @return string|null
     */
    public function getElectronicServiceAddress()
    {
        return $this->get('electronicServiceAddress');
    }

    /**
     * Sets electronicServiceAddress
     *
     * @param string|null $electronicServiceAddress The electronic service address for the self managed super fund.
     *
     * @return $this
     */
    public function setElectronicServiceAddress($electronicServiceAddress)
    {
        $this->container['electronicServiceAddress'] = $electronicServiceAddress;

        return $this;
    }

    /**
     * Gets employerNumber
     *
     * @return string|null
     */
    public function getEmployerNumber()
    {
        return $this->get('employerNumber');
    }

    /**
     * Sets employerNumber
     *
     * @param string|null $employerNumber Some funds assign a unique number to each employer
     *
     * @return $this
     */
    public function setEmployerNumber($employerNumber)
    {
        $this->container['employerNumber'] = $employerNumber;

        return $this;
    }

    /**
     * Gets sPIN
     *
     * @return string|null
     */
    public function getSPIN()
    {
        return $this->get('sPIN');
    }

    /**
     * Sets sPIN
     *
     * @param string|null $sPIN The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.
     *
     * @return $this
     */
    public function setSPIN($sPIN)
    {
        $this->container['sPIN'] = $sPIN;

        return $this;
    }

    /**
     * Gets uSI
     *
     * @return string|null
     */
    public function getUSI()
    {
        return $this->get('uSI');
    }

    /**
     * Sets uSI
     *
     * @param string|null $uSI The USI of the Regulated SuperFund
     *
     * @return $this
     */
    public function setUSI($uSI)
    {
        $this->container['uSI'] = $uSI;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
