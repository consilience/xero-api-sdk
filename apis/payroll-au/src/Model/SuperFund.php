<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * SuperFund
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * SuperFund Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class SuperFund implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SuperFund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'aBN' => 'string',
        'uSI' => 'string',
        'name' => 'string',
        'bSB' => 'string',
        'accountNumber' => 'string',
        'accountName' => 'string',
        'electronicServiceAddress' => 'string',
        'superFundID' => 'string',
        'employerNumber' => 'string',
        'sPIN' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'aBN' => null,
        'uSI' => null,
        'name' => null,
        'bSB' => null,
        'accountNumber' => null,
        'accountName' => null,
        'electronicServiceAddress' => null,
        'superFundID' => 'uuid',
        'employerNumber' => null,
        'sPIN' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'aBN' => 'ABN',
        'uSI' => 'USI',
        'name' => 'Name',
        'bSB' => 'BSB',
        'accountNumber' => 'AccountNumber',
        'accountName' => 'AccountName',
        'electronicServiceAddress' => 'ElectronicServiceAddress',
        'superFundID' => 'SuperFundID',
        'employerNumber' => 'EmployerNumber',
        'sPIN' => 'SPIN'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'aBN' => 'setABN',
        'uSI' => 'setUSI',
        'name' => 'setName',
        'bSB' => 'setBSB',
        'accountNumber' => 'setAccountNumber',
        'accountName' => 'setAccountName',
        'electronicServiceAddress' => 'setElectronicServiceAddress',
        'superFundID' => 'setSuperFundID',
        'employerNumber' => 'setEmployerNumber',
        'sPIN' => 'setSPIN'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'aBN' => 'getABN',
        'uSI' => 'getUSI',
        'name' => 'getName',
        'bSB' => 'getBSB',
        'accountNumber' => 'getAccountNumber',
        'accountName' => 'getAccountName',
        'electronicServiceAddress' => 'getElectronicServiceAddress',
        'superFundID' => 'getSuperFundID',
        'employerNumber' => 'getEmployerNumber',
        'sPIN' => 'getSPIN'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_REGULATED = 'REGULATED';
    const TYPE_SMSF = 'SMSF';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REGULATED,
            self::TYPE_SMSF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['aBN'] = $data['aBN'] ?? null;
        $this->container['uSI'] = $data['uSI'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['bSB'] = $data['bSB'] ?? null;
        $this->container['accountNumber'] = $data['accountNumber'] ?? null;
        $this->container['accountName'] = $data['accountName'] ?? null;
        $this->container['electronicServiceAddress'] = $data['electronicServiceAddress'] ?? null;
        $this->container['superFundID'] = $data['superFundID'] ?? null;
        $this->container['employerNumber'] = $data['employerNumber'] ?? null;
        $this->container['sPIN'] = $data['sPIN'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'type',
                implode('", "', $allowedValues)
            );
        }

        if (! is_null($this->container['aBN']) && (mb_strlen($this->container['aBN']) > 11)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'aBN',
                11
            );
        }

        if (! is_null($this->container['name']) && (mb_strlen($this->container['name']) > 76)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'name',
                76
            );
        }

        if (! is_null($this->container['bSB']) && (mb_strlen($this->container['bSB']) > 6)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'bSB',
                6
            );
        }

        if (! is_null($this->container['accountNumber']) && (mb_strlen($this->container['accountNumber']) > 9)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'accountNumber',
                9
            );
        }

        if (! is_null($this->container['accountName']) && (mb_strlen($this->container['accountName']) > 32)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'accountName',
                32
            );
        }

        if (! is_null($this->container['electronicServiceAddress']) && (mb_strlen($this->container['electronicServiceAddress']) > 16)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'electronicServiceAddress',
                16
            );
        }

        if (! is_null($this->container['employerNumber']) && (mb_strlen($this->container['employerNumber']) > 20)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'employerNumber',
                20
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->get('type');
    }

    /**
     * Sets type
     *
     * @param string|null $type SMSF see Super Fund Types
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (! is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'type',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets aBN
     *
     * @return string|null
     */
    public function getABN()
    {
        return $this->get('aBN');
    }

    /**
     * Sets aBN
     *
     * @param string|null $aBN ABN of the self managed super fund. (max length = 11) e.g 839182848805
     *
     * @return $this
     */
    public function setABN($aBN)
    {
        if (! is_null($aBN) && (mb_strlen($aBN) > 11)) {
            throw new \InvalidArgumentException('invalid length for $aBN when calling SuperFund., must be smaller than or equal to 11.');
        }

        $this->container['aBN'] = $aBN;

        return $this;
    }

    /**
     * Gets uSI
     *
     * @return string|null
     */
    public function getUSI()
    {
        return $this->get('uSI');
    }

    /**
     * Sets uSI
     *
     * @param string|null $uSI The USI of the Regulated SuperFund
     *
     * @return $this
     */
    public function setUSI($uSI)
    {
        $this->container['uSI'] = $uSI;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the super fund (max length = 76) e.g Clive Monk Superannuation Fund
     *
     * @return $this
     */
    public function setName($name)
    {
        if (! is_null($name) && (mb_strlen($name) > 76)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SuperFund., must be smaller than or equal to 76.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets bSB
     *
     * @return string|null
     */
    public function getBSB()
    {
        return $this->get('bSB');
    }

    /**
     * Sets bSB
     *
     * @param string|null $bSB BSB of the self managed super fund. (max length = 6) e.g 123123
     *
     * @return $this
     */
    public function setBSB($bSB)
    {
        if (! is_null($bSB) && (mb_strlen($bSB) > 6)) {
            throw new \InvalidArgumentException('invalid length for $bSB when calling SuperFund., must be smaller than or equal to 6.');
        }

        $this->container['bSB'] = $bSB;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->get('accountNumber');
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber The account number for the self managed super fund. (max length = 9) e.g 234324324
     *
     * @return $this
     */
    public function setAccountNumber($accountNumber)
    {
        if (! is_null($accountNumber) && (mb_strlen($accountNumber) > 9)) {
            throw new \InvalidArgumentException('invalid length for $accountNumber when calling SuperFund., must be smaller than or equal to 9.');
        }

        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->get('accountName');
    }

    /**
     * Sets accountName
     *
     * @param string|null $accountName The account name for the self managed super fund (max length = 32) e.g Clive Monk Superannuation Fund
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        if (! is_null($accountName) && (mb_strlen($accountName) > 32)) {
            throw new \InvalidArgumentException('invalid length for $accountName when calling SuperFund., must be smaller than or equal to 32.');
        }

        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets electronicServiceAddress
     *
     * @return string|null
     */
    public function getElectronicServiceAddress()
    {
        return $this->get('electronicServiceAddress');
    }

    /**
     * Sets electronicServiceAddress
     *
     * @param string|null $electronicServiceAddress The electronic service address for the self managed super fund (max length = 16)
     *
     * @return $this
     */
    public function setElectronicServiceAddress($electronicServiceAddress)
    {
        if (! is_null($electronicServiceAddress) && (mb_strlen($electronicServiceAddress) > 16)) {
            throw new \InvalidArgumentException('invalid length for $electronicServiceAddress when calling SuperFund., must be smaller than or equal to 16.');
        }

        $this->container['electronicServiceAddress'] = $electronicServiceAddress;

        return $this;
    }

    /**
     * Gets superFundID
     *
     * @return string|null
     */
    public function getSuperFundID()
    {
        return $this->get('superFundID');
    }

    /**
     * Sets superFundID
     *
     * @param string|null $superFundID Xero identifier e.g c56b19ef-75bf-45e8-98a4-e699a96609f7
     *
     * @return $this
     */
    public function setSuperFundID($superFundID)
    {
        $this->container['superFundID'] = $superFundID;

        return $this;
    }

    /**
     * Gets employerNumber
     *
     * @return string|null
     */
    public function getEmployerNumber()
    {
        return $this->get('employerNumber');
    }

    /**
     * Sets employerNumber
     *
     * @param string|null $employerNumber Some funds assign a unique number to each employer (max length = 20)
     *
     * @return $this
     */
    public function setEmployerNumber($employerNumber)
    {
        if (! is_null($employerNumber) && (mb_strlen($employerNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $employerNumber when calling SuperFund., must be smaller than or equal to 20.');
        }

        $this->container['employerNumber'] = $employerNumber;

        return $this;
    }

    /**
     * Gets sPIN
     *
     * @return string|null
     */
    public function getSPIN()
    {
        return $this->get('sPIN');
    }

    /**
     * Sets sPIN
     *
     * @param string|null $sPIN The SPIN of the Regulated SuperFund. This field has been deprecated.  It will only be present for legacy superfunds.  New superfunds will not have a SPIN value.  The USI field should be used instead of SPIN
     *
     * @return $this
     */
    public function setSPIN($sPIN)
    {
        $this->container['sPIN'] = $sPIN;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
