<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * PayTemplate
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * PayTemplate Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class PayTemplate implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'earningsLines' => 'float',
        'deductionLines' => '\Consilience\Xero\PayrollAuSdk\Model\DeductionLine[]',
        'superLines' => 'string',
        'reimbursementLines' => '\Consilience\Xero\PayrollAuSdk\Model\ReimbursementLine[]',
        'leaveLines' => 'string',
        'earningsRateID' => 'string',
        'calculationType' => 'string',
        'numberOfUnitsPerWeek' => 'string',
        'annualSalary' => 'string',
        'ratePerUnit' => 'float',
        'normalNumberOfUnits' => 'string',
        'deductionTypeID' => 'string',
        'percentage' => 'string',
        'amount' => 'float',
        'superMembershipID' => 'string',
        'contributionType' => 'string',
        'expenseAccountCode' => 'string',
        'liabilityAccountCode' => 'string',
        'minimumMonthlyEarnings' => 'string',
        'reimbursementTypeID' => 'string',
        'description' => 'string',
        'leaveTypeID' => 'string',
        'annualNumberOfUnits' => 'string',
        'fullTimeNumberOfUnitsPerPeriod' => 'string',
        'numberOfUnits' => 'string',
        'entitlementFinalPayPayoutType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'earningsLines' => 'float',
        'deductionLines' => null,
        'superLines' => null,
        'reimbursementLines' => null,
        'leaveLines' => null,
        'earningsRateID' => 'uuid',
        'calculationType' => null,
        'numberOfUnitsPerWeek' => null,
        'annualSalary' => null,
        'ratePerUnit' => 'float',
        'normalNumberOfUnits' => null,
        'deductionTypeID' => 'uuid',
        'percentage' => null,
        'amount' => 'float',
        'superMembershipID' => 'uuid',
        'contributionType' => null,
        'expenseAccountCode' => null,
        'liabilityAccountCode' => null,
        'minimumMonthlyEarnings' => null,
        'reimbursementTypeID' => 'uuid',
        'description' => null,
        'leaveTypeID' => 'uuid',
        'annualNumberOfUnits' => null,
        'fullTimeNumberOfUnitsPerPeriod' => null,
        'numberOfUnits' => null,
        'entitlementFinalPayPayoutType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'earningsLines' => 'EarningsLines',
        'deductionLines' => 'DeductionLines',
        'superLines' => 'SuperLines',
        'reimbursementLines' => 'ReimbursementLines',
        'leaveLines' => 'LeaveLines',
        'earningsRateID' => 'EarningsRateID',
        'calculationType' => 'CalculationType',
        'numberOfUnitsPerWeek' => 'NumberOfUnitsPerWeek',
        'annualSalary' => 'AnnualSalary',
        'ratePerUnit' => 'RatePerUnit',
        'normalNumberOfUnits' => 'NormalNumberOfUnits',
        'deductionTypeID' => 'DeductionTypeID',
        'percentage' => 'Percentage',
        'amount' => 'Amount',
        'superMembershipID' => 'SuperMembershipID',
        'contributionType' => 'ContributionType',
        'expenseAccountCode' => 'ExpenseAccountCode',
        'liabilityAccountCode' => 'LiabilityAccountCode',
        'minimumMonthlyEarnings' => 'MinimumMonthlyEarnings',
        'reimbursementTypeID' => 'ReimbursementTypeID',
        'description' => 'Description',
        'leaveTypeID' => 'LeaveTypeID',
        'annualNumberOfUnits' => 'AnnualNumberOfUnits',
        'fullTimeNumberOfUnitsPerPeriod' => 'FullTimeNumberOfUnitsPerPeriod',
        'numberOfUnits' => 'NumberOfUnits',
        'entitlementFinalPayPayoutType' => 'EntitlementFinalPayPayoutType'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'earningsLines' => 'setEarningsLines',
        'deductionLines' => 'setDeductionLines',
        'superLines' => 'setSuperLines',
        'reimbursementLines' => 'setReimbursementLines',
        'leaveLines' => 'setLeaveLines',
        'earningsRateID' => 'setEarningsRateID',
        'calculationType' => 'setCalculationType',
        'numberOfUnitsPerWeek' => 'setNumberOfUnitsPerWeek',
        'annualSalary' => 'setAnnualSalary',
        'ratePerUnit' => 'setRatePerUnit',
        'normalNumberOfUnits' => 'setNormalNumberOfUnits',
        'deductionTypeID' => 'setDeductionTypeID',
        'percentage' => 'setPercentage',
        'amount' => 'setAmount',
        'superMembershipID' => 'setSuperMembershipID',
        'contributionType' => 'setContributionType',
        'expenseAccountCode' => 'setExpenseAccountCode',
        'liabilityAccountCode' => 'setLiabilityAccountCode',
        'minimumMonthlyEarnings' => 'setMinimumMonthlyEarnings',
        'reimbursementTypeID' => 'setReimbursementTypeID',
        'description' => 'setDescription',
        'leaveTypeID' => 'setLeaveTypeID',
        'annualNumberOfUnits' => 'setAnnualNumberOfUnits',
        'fullTimeNumberOfUnitsPerPeriod' => 'setFullTimeNumberOfUnitsPerPeriod',
        'numberOfUnits' => 'setNumberOfUnits',
        'entitlementFinalPayPayoutType' => 'setEntitlementFinalPayPayoutType'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'earningsLines' => 'getEarningsLines',
        'deductionLines' => 'getDeductionLines',
        'superLines' => 'getSuperLines',
        'reimbursementLines' => 'getReimbursementLines',
        'leaveLines' => 'getLeaveLines',
        'earningsRateID' => 'getEarningsRateID',
        'calculationType' => 'getCalculationType',
        'numberOfUnitsPerWeek' => 'getNumberOfUnitsPerWeek',
        'annualSalary' => 'getAnnualSalary',
        'ratePerUnit' => 'getRatePerUnit',
        'normalNumberOfUnits' => 'getNormalNumberOfUnits',
        'deductionTypeID' => 'getDeductionTypeID',
        'percentage' => 'getPercentage',
        'amount' => 'getAmount',
        'superMembershipID' => 'getSuperMembershipID',
        'contributionType' => 'getContributionType',
        'expenseAccountCode' => 'getExpenseAccountCode',
        'liabilityAccountCode' => 'getLiabilityAccountCode',
        'minimumMonthlyEarnings' => 'getMinimumMonthlyEarnings',
        'reimbursementTypeID' => 'getReimbursementTypeID',
        'description' => 'getDescription',
        'leaveTypeID' => 'getLeaveTypeID',
        'annualNumberOfUnits' => 'getAnnualNumberOfUnits',
        'fullTimeNumberOfUnitsPerPeriod' => 'getFullTimeNumberOfUnitsPerPeriod',
        'numberOfUnits' => 'getNumberOfUnits',
        'entitlementFinalPayPayoutType' => 'getEntitlementFinalPayPayoutType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NUMBER_OF_UNITS_PER_WEEK_USEEARNINGSRATE = 'USEEARNINGSRATE';
    const NUMBER_OF_UNITS_PER_WEEK_ENTEREARNINGSRATE = 'ENTEREARNINGSRATE';
    const NUMBER_OF_UNITS_PER_WEEK_ANNUALSALARY = 'ANNUALSALARY';const CONTRIBUTION_TYPE_SGC = 'SGC';
    const CONTRIBUTION_TYPE_SALARYSACRIFICE = 'SALARYSACRIFICE';
    const CONTRIBUTION_TYPE_EMPLOYERADDITIONAL = 'EMPLOYERADDITIONAL';
    const CONTRIBUTION_TYPE_EMPLOYEE = 'EMPLOYEE';const ENTITLEMENT_FINAL_PAY_PAYOUT_TYPE_NOTPAIDOUT = 'NOTPAIDOUT';
    const ENTITLEMENT_FINAL_PAY_PAYOUT_TYPE_PAIDOUT = 'PAIDOUT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberOfUnitsPerWeekAllowableValues()
    {
        return [
            self::NUMBER_OF_UNITS_PER_WEEK_USEEARNINGSRATE,
            self::NUMBER_OF_UNITS_PER_WEEK_ENTEREARNINGSRATE,
            self::NUMBER_OF_UNITS_PER_WEEK_ANNUALSALARY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContributionTypeAllowableValues()
    {
        return [
            self::CONTRIBUTION_TYPE_SGC,
            self::CONTRIBUTION_TYPE_SALARYSACRIFICE,
            self::CONTRIBUTION_TYPE_EMPLOYERADDITIONAL,
            self::CONTRIBUTION_TYPE_EMPLOYEE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntitlementFinalPayPayoutTypeAllowableValues()
    {
        return [
            self::ENTITLEMENT_FINAL_PAY_PAYOUT_TYPE_NOTPAIDOUT,
            self::ENTITLEMENT_FINAL_PAY_PAYOUT_TYPE_PAIDOUT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['earningsLines'] = $data['earningsLines'] ?? null;
        $this->container['deductionLines'] = $data['deductionLines'] ?? null;
        $this->container['superLines'] = $data['superLines'] ?? null;
        $this->container['reimbursementLines'] = $data['reimbursementLines'] ?? null;
        $this->container['leaveLines'] = $data['leaveLines'] ?? null;
        $this->container['earningsRateID'] = $data['earningsRateID'] ?? null;
        $this->container['calculationType'] = $data['calculationType'] ?? null;
        $this->container['numberOfUnitsPerWeek'] = $data['numberOfUnitsPerWeek'] ?? null;
        $this->container['annualSalary'] = $data['annualSalary'] ?? null;
        $this->container['ratePerUnit'] = $data['ratePerUnit'] ?? null;
        $this->container['normalNumberOfUnits'] = $data['normalNumberOfUnits'] ?? null;
        $this->container['deductionTypeID'] = $data['deductionTypeID'] ?? null;
        $this->container['percentage'] = $data['percentage'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['superMembershipID'] = $data['superMembershipID'] ?? null;
        $this->container['contributionType'] = $data['contributionType'] ?? null;
        $this->container['expenseAccountCode'] = $data['expenseAccountCode'] ?? null;
        $this->container['liabilityAccountCode'] = $data['liabilityAccountCode'] ?? null;
        $this->container['minimumMonthlyEarnings'] = $data['minimumMonthlyEarnings'] ?? null;
        $this->container['reimbursementTypeID'] = $data['reimbursementTypeID'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['leaveTypeID'] = $data['leaveTypeID'] ?? null;
        $this->container['annualNumberOfUnits'] = $data['annualNumberOfUnits'] ?? null;
        $this->container['fullTimeNumberOfUnitsPerPeriod'] = $data['fullTimeNumberOfUnitsPerPeriod'] ?? null;
        $this->container['numberOfUnits'] = $data['numberOfUnits'] ?? null;
        $this->container['entitlementFinalPayPayoutType'] = $data['entitlementFinalPayPayoutType'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNumberOfUnitsPerWeekAllowableValues();
        if (!is_null($this->container['numberOfUnitsPerWeek']) && !in_array($this->container['numberOfUnitsPerWeek'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'numberOfUnitsPerWeek',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getContributionTypeAllowableValues();
        if (!is_null($this->container['contributionType']) && !in_array($this->container['contributionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'contributionType',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getEntitlementFinalPayPayoutTypeAllowableValues();
        if (!is_null($this->container['entitlementFinalPayPayoutType']) && !in_array($this->container['entitlementFinalPayPayoutType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'entitlementFinalPayPayoutType',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets earningsLines
     *
     * @return float|null
     */
    public function getEarningsLines()
    {
        return $this->get('earningsLines');
    }

    /**
     * Sets earningsLines
     *
     * @param float|null $earningsLines The earnings rate lines
     *
     * @return $this
     */
    public function setEarningsLines($earningsLines)
    {
        $this->container['earningsLines'] = $earningsLines;

        return $this;
    }

    /**
     * Gets deductionLines
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\DeductionLine[]|null
     */
    public function getDeductionLines()
    {
        return $this->get('deductionLines');
    }

    /**
     * Sets deductionLines
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\DeductionLine[]|null $deductionLines The deduction type lines
     *
     * @return $this
     */
    public function setDeductionLines($deductionLines)
    {
        $this->container['deductionLines'] = $deductionLines;

        return $this;
    }

    /**
     * Gets superLines
     *
     * @return string|null
     */
    public function getSuperLines()
    {
        return $this->get('superLines');
    }

    /**
     * Sets superLines
     *
     * @param string|null $superLines The superannuation fund lines
     *
     * @return $this
     */
    public function setSuperLines($superLines)
    {
        $this->container['superLines'] = $superLines;

        return $this;
    }

    /**
     * Gets reimbursementLines
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\ReimbursementLine[]|null
     */
    public function getReimbursementLines()
    {
        return $this->get('reimbursementLines');
    }

    /**
     * Sets reimbursementLines
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\ReimbursementLine[]|null $reimbursementLines The reimbursement type lines
     *
     * @return $this
     */
    public function setReimbursementLines($reimbursementLines)
    {
        $this->container['reimbursementLines'] = $reimbursementLines;

        return $this;
    }

    /**
     * Gets leaveLines
     *
     * @return string|null
     */
    public function getLeaveLines()
    {
        return $this->get('leaveLines');
    }

    /**
     * Sets leaveLines
     *
     * @param string|null $leaveLines The leave type lines
     *
     * @return $this
     */
    public function setLeaveLines($leaveLines)
    {
        $this->container['leaveLines'] = $leaveLines;

        return $this;
    }

    /**
     * Gets earningsRateID
     *
     * @return string|null
     */
    public function getEarningsRateID()
    {
        return $this->get('earningsRateID');
    }

    /**
     * Sets earningsRateID
     *
     * @param string|null $earningsRateID Xero earnings rate identifier
     *
     * @return $this
     */
    public function setEarningsRateID($earningsRateID)
    {
        $this->container['earningsRateID'] = $earningsRateID;

        return $this;
    }

    /**
     * Gets calculationType
     *
     * @return string|null
     */
    public function getCalculationType()
    {
        return $this->get('calculationType');
    }

    /**
     * Sets calculationType
     *
     * @param string|null $calculationType See Leave Type Calculation Types
     *
     * @return $this
     */
    public function setCalculationType($calculationType)
    {
        $this->container['calculationType'] = $calculationType;

        return $this;
    }

    /**
     * Gets numberOfUnitsPerWeek
     *
     * @return string|null
     */
    public function getNumberOfUnitsPerWeek()
    {
        return $this->get('numberOfUnitsPerWeek');
    }

    /**
     * Sets numberOfUnitsPerWeek
     *
     * @param string|null $numberOfUnitsPerWeek Hours per week for the EarningsLine. Applicable for ANNUALSALARY CalculationType
     *
     * @return $this
     */
    public function setNumberOfUnitsPerWeek($numberOfUnitsPerWeek)
    {
        $allowedValues = $this->getNumberOfUnitsPerWeekAllowableValues();
        if (! is_null($numberOfUnitsPerWeek) && !in_array($numberOfUnitsPerWeek, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'numberOfUnitsPerWeek',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['numberOfUnitsPerWeek'] = $numberOfUnitsPerWeek;

        return $this;
    }

    /**
     * Gets annualSalary
     *
     * @return string|null
     */
    public function getAnnualSalary()
    {
        return $this->get('annualSalary');
    }

    /**
     * Sets annualSalary
     *
     * @param string|null $annualSalary Annual Salary of employee
     *
     * @return $this
     */
    public function setAnnualSalary($annualSalary)
    {
        $this->container['annualSalary'] = $annualSalary;

        return $this;
    }

    /**
     * Gets ratePerUnit
     *
     * @return float|null
     */
    public function getRatePerUnit()
    {
        return $this->get('ratePerUnit');
    }

    /**
     * Sets ratePerUnit
     *
     * @param float|null $ratePerUnit Rate per unit of the EarningsLine.
     *
     * @return $this
     */
    public function setRatePerUnit($ratePerUnit)
    {
        $this->container['ratePerUnit'] = $ratePerUnit;

        return $this;
    }

    /**
     * Gets normalNumberOfUnits
     *
     * @return string|null
     */
    public function getNormalNumberOfUnits()
    {
        return $this->get('normalNumberOfUnits');
    }

    /**
     * Sets normalNumberOfUnits
     *
     * @param string|null $normalNumberOfUnits Normal number of units for EarningsLine.  Applicable when RateType is “MULTIPLE”
     *
     * @return $this
     */
    public function setNormalNumberOfUnits($normalNumberOfUnits)
    {
        $this->container['normalNumberOfUnits'] = $normalNumberOfUnits;

        return $this;
    }

    /**
     * Gets deductionTypeID
     *
     * @return string|null
     */
    public function getDeductionTypeID()
    {
        return $this->get('deductionTypeID');
    }

    /**
     * Sets deductionTypeID
     *
     * @param string|null $deductionTypeID Xero deduction type identifier
     *
     * @return $this
     */
    public function setDeductionTypeID($deductionTypeID)
    {
        $this->container['deductionTypeID'] = $deductionTypeID;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return string|null
     */
    public function getPercentage()
    {
        return $this->get('percentage');
    }

    /**
     * Sets percentage
     *
     * @param string|null $percentage The percentage of the SuperLine. Applies on Percentage of Earnings CalculationType.
     *
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->get('amount');
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of the reimbursement type
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets superMembershipID
     *
     * @return string|null
     */
    public function getSuperMembershipID()
    {
        return $this->get('superMembershipID');
    }

    /**
     * Sets superMembershipID
     *
     * @param string|null $superMembershipID Xero superannuation fund membership identifier
     *
     * @return $this
     */
    public function setSuperMembershipID($superMembershipID)
    {
        $this->container['superMembershipID'] = $superMembershipID;

        return $this;
    }

    /**
     * Gets contributionType
     *
     * @return string|null
     */
    public function getContributionType()
    {
        return $this->get('contributionType');
    }

    /**
     * Sets contributionType
     *
     * @param string|null $contributionType See Superannuation Contribution Type
     *
     * @return $this
     */
    public function setContributionType($contributionType)
    {
        $allowedValues = $this->getContributionTypeAllowableValues();
        if (! is_null($contributionType) && !in_array($contributionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'contributionType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['contributionType'] = $contributionType;

        return $this;
    }

    /**
     * Gets expenseAccountCode
     *
     * @return string|null
     */
    public function getExpenseAccountCode()
    {
        return $this->get('expenseAccountCode');
    }

    /**
     * Sets expenseAccountCode
     *
     * @param string|null $expenseAccountCode Account code for the Expense Account. i.e 478
     *
     * @return $this
     */
    public function setExpenseAccountCode($expenseAccountCode)
    {
        $this->container['expenseAccountCode'] = $expenseAccountCode;

        return $this;
    }

    /**
     * Gets liabilityAccountCode
     *
     * @return string|null
     */
    public function getLiabilityAccountCode()
    {
        return $this->get('liabilityAccountCode');
    }

    /**
     * Sets liabilityAccountCode
     *
     * @param string|null $liabilityAccountCode Account code for the Liability Account. i.e 826
     *
     * @return $this
     */
    public function setLiabilityAccountCode($liabilityAccountCode)
    {
        $this->container['liabilityAccountCode'] = $liabilityAccountCode;

        return $this;
    }

    /**
     * Gets minimumMonthlyEarnings
     *
     * @return string|null
     */
    public function getMinimumMonthlyEarnings()
    {
        return $this->get('minimumMonthlyEarnings');
    }

    /**
     * Sets minimumMonthlyEarnings
     *
     * @param string|null $minimumMonthlyEarnings Minimum monthly earnings. Applies for Percentage of Earnings calculation type only
     *
     * @return $this
     */
    public function setMinimumMonthlyEarnings($minimumMonthlyEarnings)
    {
        $this->container['minimumMonthlyEarnings'] = $minimumMonthlyEarnings;

        return $this;
    }

    /**
     * Gets reimbursementTypeID
     *
     * @return string|null
     */
    public function getReimbursementTypeID()
    {
        return $this->get('reimbursementTypeID');
    }

    /**
     * Sets reimbursementTypeID
     *
     * @param string|null $reimbursementTypeID Xero reimbursement type identifier
     *
     * @return $this
     */
    public function setReimbursementTypeID($reimbursementTypeID)
    {
        $this->container['reimbursementTypeID'] = $reimbursementTypeID;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->get('description');
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the reimbursement type
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets leaveTypeID
     *
     * @return string|null
     */
    public function getLeaveTypeID()
    {
        return $this->get('leaveTypeID');
    }

    /**
     * Sets leaveTypeID
     *
     * @param string|null $leaveTypeID Xero leave type identifier.
     *
     * @return $this
     */
    public function setLeaveTypeID($leaveTypeID)
    {
        $this->container['leaveTypeID'] = $leaveTypeID;

        return $this;
    }

    /**
     * Gets annualNumberOfUnits
     *
     * @return string|null
     */
    public function getAnnualNumberOfUnits()
    {
        return $this->get('annualNumberOfUnits');
    }

    /**
     * Sets annualNumberOfUnits
     *
     * @param string|null $annualNumberOfUnits Hours of leave accrued each year
     *
     * @return $this
     */
    public function setAnnualNumberOfUnits($annualNumberOfUnits)
    {
        $this->container['annualNumberOfUnits'] = $annualNumberOfUnits;

        return $this;
    }

    /**
     * Gets fullTimeNumberOfUnitsPerPeriod
     *
     * @return string|null
     */
    public function getFullTimeNumberOfUnitsPerPeriod()
    {
        return $this->get('fullTimeNumberOfUnitsPerPeriod');
    }

    /**
     * Sets fullTimeNumberOfUnitsPerPeriod
     *
     * @param string|null $fullTimeNumberOfUnitsPerPeriod Normal ordinary earnings number of units for leave line.
     *
     * @return $this
     */
    public function setFullTimeNumberOfUnitsPerPeriod($fullTimeNumberOfUnitsPerPeriod)
    {
        $this->container['fullTimeNumberOfUnitsPerPeriod'] = $fullTimeNumberOfUnitsPerPeriod;

        return $this;
    }

    /**
     * Gets numberOfUnits
     *
     * @return string|null
     */
    public function getNumberOfUnits()
    {
        return $this->get('numberOfUnits');
    }

    /**
     * Sets numberOfUnits
     *
     * @param string|null $numberOfUnits Number of units for leave line.
     *
     * @return $this
     */
    public function setNumberOfUnits($numberOfUnits)
    {
        $this->container['numberOfUnits'] = $numberOfUnits;

        return $this;
    }

    /**
     * Gets entitlementFinalPayPayoutType
     *
     * @return string|null
     */
    public function getEntitlementFinalPayPayoutType()
    {
        return $this->get('entitlementFinalPayPayoutType');
    }

    /**
     * Sets entitlementFinalPayPayoutType
     *
     * @param string|null $entitlementFinalPayPayoutType See Final Pay Payout Types If you do not provide any value then by Default it will be NOTPAIDOUT.
     *
     * @return $this
     */
    public function setEntitlementFinalPayPayoutType($entitlementFinalPayPayoutType)
    {
        $allowedValues = $this->getEntitlementFinalPayPayoutTypeAllowableValues();
        if (! is_null($entitlementFinalPayPayoutType) && !in_array($entitlementFinalPayPayoutType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'entitlementFinalPayPayoutType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['entitlementFinalPayPayoutType'] = $entitlementFinalPayPayoutType;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
