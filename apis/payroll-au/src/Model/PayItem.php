<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * PayItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * PayItem Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'earningsRates' => '\Consilience\Xero\PayrollAuSdk\Model\EarningsRate[]',
        'deductionTypes' => '\Consilience\Xero\PayrollAuSdk\Model\DeductionType[]',
        'leaveTypes' => '\Consilience\Xero\PayrollAuSdk\Model\LeaveType[]',
        'reimbursementTypes' => '\Consilience\Xero\PayrollAuSdk\Model\ReimbursementType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'earningsRates' => null,
        'deductionTypes' => null,
        'leaveTypes' => null,
        'reimbursementTypes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'earningsRates' => 'EarningsRates',
        'deductionTypes' => 'DeductionTypes',
        'leaveTypes' => 'LeaveTypes',
        'reimbursementTypes' => 'ReimbursementTypes'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'earningsRates' => 'setEarningsRates',
        'deductionTypes' => 'setDeductionTypes',
        'leaveTypes' => 'setLeaveTypes',
        'reimbursementTypes' => 'setReimbursementTypes'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'earningsRates' => 'getEarningsRates',
        'deductionTypes' => 'getDeductionTypes',
        'leaveTypes' => 'getLeaveTypes',
        'reimbursementTypes' => 'getReimbursementTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['earningsRates'] = $data['earningsRates'] ?? null;
        $this->container['deductionTypes'] = $data['deductionTypes'] ?? null;
        $this->container['leaveTypes'] = $data['leaveTypes'] ?? null;
        $this->container['reimbursementTypes'] = $data['reimbursementTypes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets earningsRates
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\EarningsRate[]|null
     */
    public function getEarningsRates()
    {
        return $this->get('earningsRates');
    }

    /**
     * Sets earningsRates
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\EarningsRate[]|null $earningsRates See EarningsRates
     *
     * @return $this
     */
    public function setEarningsRates($earningsRates)
    {
        $this->container['earningsRates'] = $earningsRates;

        return $this;
    }

    /**
     * Gets deductionTypes
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\DeductionType[]|null
     */
    public function getDeductionTypes()
    {
        return $this->get('deductionTypes');
    }

    /**
     * Sets deductionTypes
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\DeductionType[]|null $deductionTypes See DeductionTypes
     *
     * @return $this
     */
    public function setDeductionTypes($deductionTypes)
    {
        $this->container['deductionTypes'] = $deductionTypes;

        return $this;
    }

    /**
     * Gets leaveTypes
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveType[]|null
     */
    public function getLeaveTypes()
    {
        return $this->get('leaveTypes');
    }

    /**
     * Sets leaveTypes
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\LeaveType[]|null $leaveTypes See LeaveTypes
     *
     * @return $this
     */
    public function setLeaveTypes($leaveTypes)
    {
        $this->container['leaveTypes'] = $leaveTypes;

        return $this;
    }

    /**
     * Gets reimbursementTypes
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\ReimbursementType[]|null
     */
    public function getReimbursementTypes()
    {
        return $this->get('reimbursementTypes');
    }

    /**
     * Sets reimbursementTypes
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\ReimbursementType[]|null $reimbursementTypes See ReimbursementTypes
     *
     * @return $this
     */
    public function setReimbursementTypes($reimbursementTypes)
    {
        $this->container['reimbursementTypes'] = $reimbursementTypes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
