<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * EarningsRate
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * EarningsRate Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class EarningsRate implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EarningsRate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'accountCode' => 'string',
        'typeOfUnits' => 'string',
        'isExemptFromTax' => 'string',
        'isExemptFromSuper' => 'string',
        'earningsType' => 'string',
        'earningsRateID' => 'string',
        'rateType' => 'string',
        'ratePerUnit' => 'float',
        'multiplier' => 'float',
        'accrueLeave' => 'float',
        'amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'accountCode' => null,
        'typeOfUnits' => null,
        'isExemptFromTax' => null,
        'isExemptFromSuper' => null,
        'earningsType' => null,
        'earningsRateID' => 'uuid',
        'rateType' => null,
        'ratePerUnit' => 'float',
        'multiplier' => 'float',
        'accrueLeave' => 'float',
        'amount' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'accountCode' => 'AccountCode',
        'typeOfUnits' => 'TypeOfUnits',
        'isExemptFromTax' => 'IsExemptFromTax',
        'isExemptFromSuper' => 'IsExemptFromSuper',
        'earningsType' => 'EarningsType',
        'earningsRateID' => 'EarningsRateID',
        'rateType' => 'RateType',
        'ratePerUnit' => 'RatePerUnit',
        'multiplier' => 'Multiplier',
        'accrueLeave' => 'AccrueLeave',
        'amount' => 'Amount'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'accountCode' => 'setAccountCode',
        'typeOfUnits' => 'setTypeOfUnits',
        'isExemptFromTax' => 'setIsExemptFromTax',
        'isExemptFromSuper' => 'setIsExemptFromSuper',
        'earningsType' => 'setEarningsType',
        'earningsRateID' => 'setEarningsRateID',
        'rateType' => 'setRateType',
        'ratePerUnit' => 'setRatePerUnit',
        'multiplier' => 'setMultiplier',
        'accrueLeave' => 'setAccrueLeave',
        'amount' => 'setAmount'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'accountCode' => 'getAccountCode',
        'typeOfUnits' => 'getTypeOfUnits',
        'isExemptFromTax' => 'getIsExemptFromTax',
        'isExemptFromSuper' => 'getIsExemptFromSuper',
        'earningsType' => 'getEarningsType',
        'earningsRateID' => 'getEarningsRateID',
        'rateType' => 'getRateType',
        'ratePerUnit' => 'getRatePerUnit',
        'multiplier' => 'getMultiplier',
        'accrueLeave' => 'getAccrueLeave',
        'amount' => 'getAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RATE_TYPE_FIXEDAMOUNT = 'FIXEDAMOUNT';
    const RATE_TYPE_MULTIPLE = 'MULTIPLE';
    const RATE_TYPE_RATEPERUNIT = 'RATEPERUNIT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateTypeAllowableValues()
    {
        return [
            self::RATE_TYPE_FIXEDAMOUNT,
            self::RATE_TYPE_MULTIPLE,
            self::RATE_TYPE_RATEPERUNIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['accountCode'] = $data['accountCode'] ?? null;
        $this->container['typeOfUnits'] = $data['typeOfUnits'] ?? null;
        $this->container['isExemptFromTax'] = $data['isExemptFromTax'] ?? null;
        $this->container['isExemptFromSuper'] = $data['isExemptFromSuper'] ?? null;
        $this->container['earningsType'] = $data['earningsType'] ?? null;
        $this->container['earningsRateID'] = $data['earningsRateID'] ?? null;
        $this->container['rateType'] = $data['rateType'] ?? null;
        $this->container['ratePerUnit'] = $data['ratePerUnit'] ?? null;
        $this->container['multiplier'] = $data['multiplier'] ?? null;
        $this->container['accrueLeave'] = $data['accrueLeave'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'name');
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'name',
                100
            );
        }

        if ($this->container['accountCode'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'accountCode');
        }
        if ($this->container['typeOfUnits'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'typeOfUnits');
        }
        if ((mb_strlen($this->container['typeOfUnits']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'typeOfUnits',
                50
            );
        }

        if ($this->container['isExemptFromTax'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'isExemptFromTax');
        }
        if ($this->container['isExemptFromSuper'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'isExemptFromSuper');
        }
        if ($this->container['earningsType'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'earningsType');
        }
        $allowedValues = $this->getRateTypeAllowableValues();
        if (!is_null($this->container['rateType']) && !in_array($this->container['rateType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'rateType',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string $name Name of the earnings rate (max length = 100)
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling EarningsRate., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets accountCode
     *
     * @return string
     */
    public function getAccountCode()
    {
        return $this->get('accountCode');
    }

    /**
     * Sets accountCode
     *
     * @param string $accountCode See Accounts
     *
     * @return $this
     */
    public function setAccountCode($accountCode)
    {
        $this->container['accountCode'] = $accountCode;

        return $this;
    }

    /**
     * Gets typeOfUnits
     *
     * @return string
     */
    public function getTypeOfUnits()
    {
        return $this->get('typeOfUnits');
    }

    /**
     * Sets typeOfUnits
     *
     * @param string $typeOfUnits Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT
     *
     * @return $this
     */
    public function setTypeOfUnits($typeOfUnits)
    {
        if ((mb_strlen($typeOfUnits) > 50)) {
            throw new \InvalidArgumentException('invalid length for $typeOfUnits when calling EarningsRate., must be smaller than or equal to 50.');
        }

        $this->container['typeOfUnits'] = $typeOfUnits;

        return $this;
    }

    /**
     * Gets isExemptFromTax
     *
     * @return string
     */
    public function getIsExemptFromTax()
    {
        return $this->get('isExemptFromTax');
    }

    /**
     * Sets isExemptFromTax
     *
     * @param string $isExemptFromTax Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
     *
     * @return $this
     */
    public function setIsExemptFromTax($isExemptFromTax)
    {
        $this->container['isExemptFromTax'] = $isExemptFromTax;

        return $this;
    }

    /**
     * Gets isExemptFromSuper
     *
     * @return string
     */
    public function getIsExemptFromSuper()
    {
        return $this->get('isExemptFromSuper');
    }

    /**
     * Sets isExemptFromSuper
     *
     * @param string $isExemptFromSuper See the ATO website for details of which payments are exempt from SGC
     *
     * @return $this
     */
    public function setIsExemptFromSuper($isExemptFromSuper)
    {
        $this->container['isExemptFromSuper'] = $isExemptFromSuper;

        return $this;
    }

    /**
     * Gets earningsType
     *
     * @return string
     */
    public function getEarningsType()
    {
        return $this->get('earningsType');
    }

    /**
     * Sets earningsType
     *
     * @param string $earningsType See EarningsTypes
     *
     * @return $this
     */
    public function setEarningsType($earningsType)
    {
        $this->container['earningsType'] = $earningsType;

        return $this;
    }

    /**
     * Gets earningsRateID
     *
     * @return string|null
     */
    public function getEarningsRateID()
    {
        return $this->get('earningsRateID');
    }

    /**
     * Sets earningsRateID
     *
     * @param string|null $earningsRateID Xero identifier
     *
     * @return $this
     */
    public function setEarningsRateID($earningsRateID)
    {
        $this->container['earningsRateID'] = $earningsRateID;

        return $this;
    }

    /**
     * Gets rateType
     *
     * @return string|null
     */
    public function getRateType()
    {
        return $this->get('rateType');
    }

    /**
     * Sets rateType
     *
     * @param string|null $rateType See RateTypes
     *
     * @return $this
     */
    public function setRateType($rateType)
    {
        $allowedValues = $this->getRateTypeAllowableValues();
        if (! is_null($rateType) && !in_array($rateType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'rateType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['rateType'] = $rateType;

        return $this;
    }

    /**
     * Gets ratePerUnit
     *
     * @return float|null
     */
    public function getRatePerUnit()
    {
        return $this->get('ratePerUnit');
    }

    /**
     * Sets ratePerUnit
     *
     * @param float|null $ratePerUnit Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
     *
     * @return $this
     */
    public function setRatePerUnit($ratePerUnit)
    {
        $this->container['ratePerUnit'] = $ratePerUnit;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return float|null
     */
    public function getMultiplier()
    {
        return $this->get('multiplier');
    }

    /**
     * Sets multiplier
     *
     * @param float|null $multiplier This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
     *
     * @return $this
     */
    public function setMultiplier($multiplier)
    {
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets accrueLeave
     *
     * @return float|null
     */
    public function getAccrueLeave()
    {
        return $this->get('accrueLeave');
    }

    /**
     * Sets accrueLeave
     *
     * @param float|null $accrueLeave Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
     *
     * @return $this
     */
    public function setAccrueLeave($accrueLeave)
    {
        $this->container['accrueLeave'] = $accrueLeave;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->get('amount');
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Option Amount for FIXEDAMOUNT RateType EarningsRate
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
