<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * PayRun
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * PayRun Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class PayRun implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayRun';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payrollCalendarID' => 'string',
        'payRunID' => 'string',
        'payRunPeriodStartDate' => '\DateTime',
        'payRunPeriodEndDate' => '\DateTime',
        'payRunStatus' => 'string',
        'paymentDate' => '\DateTime',
        'payslipMessage' => 'string',
        'payslips' => '\Consilience\Xero\PayrollAuSdk\Model\Payslip[]',
        'wages' => 'string',
        'deductions' => 'string',
        'tax' => 'float',
        'super' => 'string',
        'reimbursement' => 'string',
        'netPay' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'payrollCalendarID' => 'uuid',
        'payRunID' => 'uuid',
        'payRunPeriodStartDate' => 'date',
        'payRunPeriodEndDate' => 'date',
        'payRunStatus' => null,
        'paymentDate' => 'date',
        'payslipMessage' => null,
        'payslips' => null,
        'wages' => null,
        'deductions' => null,
        'tax' => 'float',
        'super' => null,
        'reimbursement' => null,
        'netPay' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payrollCalendarID' => 'PayrollCalendarID',
        'payRunID' => 'PayRunID',
        'payRunPeriodStartDate' => 'PayRunPeriodStartDate',
        'payRunPeriodEndDate' => 'PayRunPeriodEndDate',
        'payRunStatus' => 'PayRunStatus',
        'paymentDate' => 'PaymentDate',
        'payslipMessage' => 'PayslipMessage',
        'payslips' => 'Payslips',
        'wages' => 'Wages',
        'deductions' => 'Deductions',
        'tax' => 'Tax',
        'super' => 'Super',
        'reimbursement' => 'Reimbursement',
        'netPay' => 'NetPay'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'payrollCalendarID' => 'setPayrollCalendarID',
        'payRunID' => 'setPayRunID',
        'payRunPeriodStartDate' => 'setPayRunPeriodStartDate',
        'payRunPeriodEndDate' => 'setPayRunPeriodEndDate',
        'payRunStatus' => 'setPayRunStatus',
        'paymentDate' => 'setPaymentDate',
        'payslipMessage' => 'setPayslipMessage',
        'payslips' => 'setPayslips',
        'wages' => 'setWages',
        'deductions' => 'setDeductions',
        'tax' => 'setTax',
        'super' => 'setSuper',
        'reimbursement' => 'setReimbursement',
        'netPay' => 'setNetPay'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'payrollCalendarID' => 'getPayrollCalendarID',
        'payRunID' => 'getPayRunID',
        'payRunPeriodStartDate' => 'getPayRunPeriodStartDate',
        'payRunPeriodEndDate' => 'getPayRunPeriodEndDate',
        'payRunStatus' => 'getPayRunStatus',
        'paymentDate' => 'getPaymentDate',
        'payslipMessage' => 'getPayslipMessage',
        'payslips' => 'getPayslips',
        'wages' => 'getWages',
        'deductions' => 'getDeductions',
        'tax' => 'getTax',
        'super' => 'getSuper',
        'reimbursement' => 'getReimbursement',
        'netPay' => 'getNetPay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAY_RUN_STATUS_DRAFT = 'DRAFT';
    const PAY_RUN_STATUS_POSTED = 'POSTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayRunStatusAllowableValues()
    {
        return [
            self::PAY_RUN_STATUS_DRAFT,
            self::PAY_RUN_STATUS_POSTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payrollCalendarID'] = $data['payrollCalendarID'] ?? null;
        $this->container['payRunID'] = $data['payRunID'] ?? null;
        $this->container['payRunPeriodStartDate'] = $data['payRunPeriodStartDate'] ?? null;
        $this->container['payRunPeriodEndDate'] = $data['payRunPeriodEndDate'] ?? null;
        $this->container['payRunStatus'] = $data['payRunStatus'] ?? null;
        $this->container['paymentDate'] = $data['paymentDate'] ?? null;
        $this->container['payslipMessage'] = $data['payslipMessage'] ?? null;
        $this->container['payslips'] = $data['payslips'] ?? null;
        $this->container['wages'] = $data['wages'] ?? null;
        $this->container['deductions'] = $data['deductions'] ?? null;
        $this->container['tax'] = $data['tax'] ?? null;
        $this->container['super'] = $data['super'] ?? null;
        $this->container['reimbursement'] = $data['reimbursement'] ?? null;
        $this->container['netPay'] = $data['netPay'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payrollCalendarID'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'payrollCalendarID');
        }
        $allowedValues = $this->getPayRunStatusAllowableValues();
        if (!is_null($this->container['payRunStatus']) && !in_array($this->container['payRunStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'payRunStatus',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payrollCalendarID
     *
     * @return string
     */
    public function getPayrollCalendarID()
    {
        return $this->get('payrollCalendarID');
    }

    /**
     * Sets payrollCalendarID
     *
     * @param string $payrollCalendarID See PayrollCalendars
     *
     * @return $this
     */
    public function setPayrollCalendarID($payrollCalendarID)
    {
        $this->container['payrollCalendarID'] = $payrollCalendarID;

        return $this;
    }

    /**
     * Gets payRunID
     *
     * @return string|null
     */
    public function getPayRunID()
    {
        return $this->get('payRunID');
    }

    /**
     * Sets payRunID
     *
     * @param string|null $payRunID The Xero identifier for a Pay run e.g. 297c2dc5-cc47-4afd-0000-74990b8761e9
     *
     * @return $this
     */
    public function setPayRunID($payRunID)
    {
        $this->container['payRunID'] = $payRunID;

        return $this;
    }

    /**
     * Gets payRunPeriodStartDate
     *
     * @return \DateTime|null
     */
    public function getPayRunPeriodStartDate()
    {
        return $this->get('payRunPeriodStartDate');
    }

    /**
     * Sets payRunPeriodStartDate
     *
     * @param \DateTime|null $payRunPeriodStartDate Period Start Date for the PayRun (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setPayRunPeriodStartDate($payRunPeriodStartDate)
    {
        $this->container['payRunPeriodStartDate'] = $payRunPeriodStartDate;

        return $this;
    }

    /**
     * Gets payRunPeriodEndDate
     *
     * @return \DateTime|null
     */
    public function getPayRunPeriodEndDate()
    {
        return $this->get('payRunPeriodEndDate');
    }

    /**
     * Sets payRunPeriodEndDate
     *
     * @param \DateTime|null $payRunPeriodEndDate Period End Date for the PayRun (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setPayRunPeriodEndDate($payRunPeriodEndDate)
    {
        $this->container['payRunPeriodEndDate'] = $payRunPeriodEndDate;

        return $this;
    }

    /**
     * Gets payRunStatus
     *
     * @return string|null
     */
    public function getPayRunStatus()
    {
        return $this->get('payRunStatus');
    }

    /**
     * Sets payRunStatus
     *
     * @param string|null $payRunStatus See PayRun Status types
     *
     * @return $this
     */
    public function setPayRunStatus($payRunStatus)
    {
        $allowedValues = $this->getPayRunStatusAllowableValues();
        if (! is_null($payRunStatus) && !in_array($payRunStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'payRunStatus',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['payRunStatus'] = $payRunStatus;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return \DateTime|null
     */
    public function getPaymentDate()
    {
        return $this->get('paymentDate');
    }

    /**
     * Sets paymentDate
     *
     * @param \DateTime|null $paymentDate Payment Date for the PayRun (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setPaymentDate($paymentDate)
    {
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets payslipMessage
     *
     * @return string|null
     */
    public function getPayslipMessage()
    {
        return $this->get('payslipMessage');
    }

    /**
     * Sets payslipMessage
     *
     * @param string|null $payslipMessage Payslip message for the PayRun
     *
     * @return $this
     */
    public function setPayslipMessage($payslipMessage)
    {
        $this->container['payslipMessage'] = $payslipMessage;

        return $this;
    }

    /**
     * Gets payslips
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip[]|null
     */
    public function getPayslips()
    {
        return $this->get('payslips');
    }

    /**
     * Sets payslips
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\Payslip[]|null $payslips See Payslip
     *
     * @return $this
     */
    public function setPayslips($payslips)
    {
        $this->container['payslips'] = $payslips;

        return $this;
    }

    /**
     * Gets wages
     *
     * @return string|null
     */
    public function getWages()
    {
        return $this->get('wages');
    }

    /**
     * Sets wages
     *
     * @param string|null $wages Total Wages for the PayRun
     *
     * @return $this
     */
    public function setWages($wages)
    {
        $this->container['wages'] = $wages;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return string|null
     */
    public function getDeductions()
    {
        return $this->get('deductions');
    }

    /**
     * Sets deductions
     *
     * @param string|null $deductions Total Deduction for the PayRun
     *
     * @return $this
     */
    public function setDeductions($deductions)
    {
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax()
    {
        return $this->get('tax');
    }

    /**
     * Sets tax
     *
     * @param float|null $tax Total Tax for the PayRun
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets super
     *
     * @return string|null
     */
    public function getSuper()
    {
        return $this->get('super');
    }

    /**
     * Sets super
     *
     * @param string|null $super Total Super for the PayRun
     *
     * @return $this
     */
    public function setSuper($super)
    {
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets reimbursement
     *
     * @return string|null
     */
    public function getReimbursement()
    {
        return $this->get('reimbursement');
    }

    /**
     * Sets reimbursement
     *
     * @param string|null $reimbursement Total Reimbursement for the PayRun
     *
     * @return $this
     */
    public function setReimbursement($reimbursement)
    {
        $this->container['reimbursement'] = $reimbursement;

        return $this;
    }

    /**
     * Gets netPay
     *
     * @return string|null
     */
    public function getNetPay()
    {
        return $this->get('netPay');
    }

    /**
     * Sets netPay
     *
     * @param string|null $netPay Total NetPay for the PayRun
     *
     * @return $this
     */
    public function setNetPay($netPay)
    {
        $this->container['netPay'] = $netPay;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
