<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * Employee
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * Employee Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Employee implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Employee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'firstName' => 'string',
        'lastName' => 'string',
        'dateOfBirth' => '\DateTime',
        'homeAddress' => 'object',
        'startDate' => '\DateTime',
        'title' => 'string',
        'middleNames' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'mobile' => 'string',
        'twitterUserName' => 'string',
        'isAuthorisedToApproveLeave' => 'bool',
        'isAuthorisedToApproveTimesheets' => 'bool',
        'jobTitle' => 'string',
        'classification' => 'string',
        'ordinaryEarningsRateID' => 'string',
        'payrollCalendarID' => 'string',
        'employeeGroupName' => 'string',
        'bankAccounts' => '\Consilience\Xero\PayrollAuSdk\Model\BankAccount[]',
        'payTemplate' => 'object',
        'openingBalances' => '\Consilience\Xero\PayrollAuSdk\Model\OpeningBalance[]',
        'leaveBalances' => '\Consilience\Xero\PayrollAuSdk\Model\LeaveBalance[]',
        'superMemberships' => '\Consilience\Xero\PayrollAuSdk\Model\SuperMembership[]',
        'terminationDate' => '\DateTime',
        'employeeID' => 'string',
        'status' => 'string',
        'updatedDateUTC' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'firstName' => null,
        'lastName' => null,
        'dateOfBirth' => 'date',
        'homeAddress' => null,
        'startDate' => 'date',
        'title' => null,
        'middleNames' => null,
        'email' => null,
        'gender' => null,
        'mobile' => null,
        'twitterUserName' => null,
        'isAuthorisedToApproveLeave' => null,
        'isAuthorisedToApproveTimesheets' => null,
        'jobTitle' => null,
        'classification' => null,
        'ordinaryEarningsRateID' => 'uuid',
        'payrollCalendarID' => 'uuid',
        'employeeGroupName' => null,
        'bankAccounts' => null,
        'payTemplate' => null,
        'openingBalances' => null,
        'leaveBalances' => null,
        'superMemberships' => null,
        'terminationDate' => 'date',
        'employeeID' => 'uuid',
        'status' => null,
        'updatedDateUTC' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firstName' => 'FirstName',
        'lastName' => 'LastName',
        'dateOfBirth' => 'DateOfBirth',
        'homeAddress' => 'HomeAddress',
        'startDate' => 'StartDate',
        'title' => 'Title',
        'middleNames' => 'MiddleNames',
        'email' => 'Email',
        'gender' => 'Gender',
        'mobile' => 'Mobile',
        'twitterUserName' => 'TwitterUserName',
        'isAuthorisedToApproveLeave' => 'IsAuthorisedToApproveLeave',
        'isAuthorisedToApproveTimesheets' => 'IsAuthorisedToApproveTimesheets',
        'jobTitle' => 'JobTitle',
        'classification' => 'Classification',
        'ordinaryEarningsRateID' => 'OrdinaryEarningsRateID',
        'payrollCalendarID' => 'PayrollCalendarID',
        'employeeGroupName' => 'EmployeeGroupName',
        'bankAccounts' => 'BankAccounts',
        'payTemplate' => 'PayTemplate',
        'openingBalances' => 'OpeningBalances',
        'leaveBalances' => 'LeaveBalances',
        'superMemberships' => 'SuperMemberships',
        'terminationDate' => 'TerminationDate',
        'employeeID' => 'EmployeeID',
        'status' => 'Status',
        'updatedDateUTC' => 'UpdatedDateUTC'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'dateOfBirth' => 'setDateOfBirth',
        'homeAddress' => 'setHomeAddress',
        'startDate' => 'setStartDate',
        'title' => 'setTitle',
        'middleNames' => 'setMiddleNames',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'mobile' => 'setMobile',
        'twitterUserName' => 'setTwitterUserName',
        'isAuthorisedToApproveLeave' => 'setIsAuthorisedToApproveLeave',
        'isAuthorisedToApproveTimesheets' => 'setIsAuthorisedToApproveTimesheets',
        'jobTitle' => 'setJobTitle',
        'classification' => 'setClassification',
        'ordinaryEarningsRateID' => 'setOrdinaryEarningsRateID',
        'payrollCalendarID' => 'setPayrollCalendarID',
        'employeeGroupName' => 'setEmployeeGroupName',
        'bankAccounts' => 'setBankAccounts',
        'payTemplate' => 'setPayTemplate',
        'openingBalances' => 'setOpeningBalances',
        'leaveBalances' => 'setLeaveBalances',
        'superMemberships' => 'setSuperMemberships',
        'terminationDate' => 'setTerminationDate',
        'employeeID' => 'setEmployeeID',
        'status' => 'setStatus',
        'updatedDateUTC' => 'setUpdatedDateUTC'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'dateOfBirth' => 'getDateOfBirth',
        'homeAddress' => 'getHomeAddress',
        'startDate' => 'getStartDate',
        'title' => 'getTitle',
        'middleNames' => 'getMiddleNames',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'mobile' => 'getMobile',
        'twitterUserName' => 'getTwitterUserName',
        'isAuthorisedToApproveLeave' => 'getIsAuthorisedToApproveLeave',
        'isAuthorisedToApproveTimesheets' => 'getIsAuthorisedToApproveTimesheets',
        'jobTitle' => 'getJobTitle',
        'classification' => 'getClassification',
        'ordinaryEarningsRateID' => 'getOrdinaryEarningsRateID',
        'payrollCalendarID' => 'getPayrollCalendarID',
        'employeeGroupName' => 'getEmployeeGroupName',
        'bankAccounts' => 'getBankAccounts',
        'payTemplate' => 'getPayTemplate',
        'openingBalances' => 'getOpeningBalances',
        'leaveBalances' => 'getLeaveBalances',
        'superMemberships' => 'getSuperMemberships',
        'terminationDate' => 'getTerminationDate',
        'employeeID' => 'getEmployeeID',
        'status' => 'getStatus',
        'updatedDateUTC' => 'getUpdatedDateUTC'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['firstName'] = $data['firstName'] ?? null;
        $this->container['lastName'] = $data['lastName'] ?? null;
        $this->container['dateOfBirth'] = $data['dateOfBirth'] ?? null;
        $this->container['homeAddress'] = $data['homeAddress'] ?? null;
        $this->container['startDate'] = $data['startDate'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['middleNames'] = $data['middleNames'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['mobile'] = $data['mobile'] ?? null;
        $this->container['twitterUserName'] = $data['twitterUserName'] ?? null;
        $this->container['isAuthorisedToApproveLeave'] = $data['isAuthorisedToApproveLeave'] ?? null;
        $this->container['isAuthorisedToApproveTimesheets'] = $data['isAuthorisedToApproveTimesheets'] ?? null;
        $this->container['jobTitle'] = $data['jobTitle'] ?? null;
        $this->container['classification'] = $data['classification'] ?? null;
        $this->container['ordinaryEarningsRateID'] = $data['ordinaryEarningsRateID'] ?? null;
        $this->container['payrollCalendarID'] = $data['payrollCalendarID'] ?? null;
        $this->container['employeeGroupName'] = $data['employeeGroupName'] ?? null;
        $this->container['bankAccounts'] = $data['bankAccounts'] ?? null;
        $this->container['payTemplate'] = $data['payTemplate'] ?? null;
        $this->container['openingBalances'] = $data['openingBalances'] ?? null;
        $this->container['leaveBalances'] = $data['leaveBalances'] ?? null;
        $this->container['superMemberships'] = $data['superMemberships'] ?? null;
        $this->container['terminationDate'] = $data['terminationDate'] ?? null;
        $this->container['employeeID'] = $data['employeeID'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['firstName'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'firstName');
        }
        if ((mb_strlen($this->container['firstName']) > 35)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'firstName',
                35
            );
        }

        if ($this->container['lastName'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'lastName');
        }
        if ((mb_strlen($this->container['lastName']) > 35)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'lastName',
                35
            );
        }

        if ($this->container['dateOfBirth'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'dateOfBirth');
        }
        if ($this->container['homeAddress'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'homeAddress');
        }
        if (! is_null($this->container['title']) && (mb_strlen($this->container['title']) > 10)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'title',
                10
            );
        }

        if (! is_null($this->container['middleNames']) && (mb_strlen($this->container['middleNames']) > 35)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'middleNames',
                35
            );
        }

        if (! is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'email',
                100
            );
        }

        if (! is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'mobile',
                50
            );
        }

        if (! is_null($this->container['twitterUserName']) && (mb_strlen($this->container['twitterUserName']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'twitterUserName',
                50
            );
        }

        if (! is_null($this->container['jobTitle']) && (mb_strlen($this->container['jobTitle']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'jobTitle',
                50
            );
        }

        if (! is_null($this->container['classification']) && (mb_strlen($this->container['classification']) > 100)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'classification',
                100
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->get('firstName');
    }

    /**
     * Sets firstName
     *
     * @param string $firstName First name of employee (max length = 35)
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        if ((mb_strlen($firstName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling Employee., must be smaller than or equal to 35.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->get('lastName');
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Last name of employee (max length = 35)
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        if ((mb_strlen($lastName) > 35)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling Employee., must be smaller than or equal to 35.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->get('dateOfBirth');
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime $dateOfBirth Date of birth of the employee (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets homeAddress
     *
     * @return object
     */
    public function getHomeAddress()
    {
        return $this->get('homeAddress');
    }

    /**
     * Sets homeAddress
     *
     * @param object $homeAddress homeAddress
     *
     * @return $this
     */
    public function setHomeAddress($homeAddress)
    {
        $this->container['homeAddress'] = $homeAddress;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->get('startDate');
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate If you aren’t sure of the exact start date for an employee, you can just enter the start of the current financial year (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->get('title');
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the employee (max length = 10)
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (! is_null($title) && (mb_strlen($title) > 10)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Employee., must be smaller than or equal to 10.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets middleNames
     *
     * @return string|null
     */
    public function getMiddleNames()
    {
        return $this->get('middleNames');
    }

    /**
     * Sets middleNames
     *
     * @param string|null $middleNames Middle name(s) of the employee (max length = 35)
     *
     * @return $this
     */
    public function setMiddleNames($middleNames)
    {
        if (! is_null($middleNames) && (mb_strlen($middleNames) > 35)) {
            throw new \InvalidArgumentException('invalid length for $middleNames when calling Employee., must be smaller than or equal to 35.');
        }

        $this->container['middleNames'] = $middleNames;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->get('email');
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address for the employee (max length = 100)
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (! is_null($email) && (mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Employee., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->get('gender');
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The employee’s gender (M or F)
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->get('mobile');
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile Employee mobile number (max length = 50)
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        if (! is_null($mobile) && (mb_strlen($mobile) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling Employee., must be smaller than or equal to 50.');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets twitterUserName
     *
     * @return string|null
     */
    public function getTwitterUserName()
    {
        return $this->get('twitterUserName');
    }

    /**
     * Sets twitterUserName
     *
     * @param string|null $twitterUserName Employee’s twitter name, entered as @twittername (max length = 50)
     *
     * @return $this
     */
    public function setTwitterUserName($twitterUserName)
    {
        if (! is_null($twitterUserName) && (mb_strlen($twitterUserName) > 50)) {
            throw new \InvalidArgumentException('invalid length for $twitterUserName when calling Employee., must be smaller than or equal to 50.');
        }

        $this->container['twitterUserName'] = $twitterUserName;

        return $this;
    }

    /**
     * Gets isAuthorisedToApproveLeave
     *
     * @return bool|null
     */
    public function getIsAuthorisedToApproveLeave()
    {
        return $this->get('isAuthorisedToApproveLeave');
    }

    /**
     * Sets isAuthorisedToApproveLeave
     *
     * @param bool|null $isAuthorisedToApproveLeave Boolean (true / false) – set this to true if the employee is authorised to approve other employees’ leave requests
     *
     * @return $this
     */
    public function setIsAuthorisedToApproveLeave($isAuthorisedToApproveLeave)
    {
        $this->container['isAuthorisedToApproveLeave'] = $isAuthorisedToApproveLeave;

        return $this;
    }

    /**
     * Gets isAuthorisedToApproveTimesheets
     *
     * @return bool|null
     */
    public function getIsAuthorisedToApproveTimesheets()
    {
        return $this->get('isAuthorisedToApproveTimesheets');
    }

    /**
     * Sets isAuthorisedToApproveTimesheets
     *
     * @param bool|null $isAuthorisedToApproveTimesheets Booelan – set this to true if the employee is authorised to approve timesheets
     *
     * @return $this
     */
    public function setIsAuthorisedToApproveTimesheets($isAuthorisedToApproveTimesheets)
    {
        $this->container['isAuthorisedToApproveTimesheets'] = $isAuthorisedToApproveTimesheets;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->get('jobTitle');
    }

    /**
     * Sets jobTitle
     *
     * @param string|null $jobTitle JobTitle of the employee (max length = 50)
     *
     * @return $this
     */
    public function setJobTitle($jobTitle)
    {
        if (! is_null($jobTitle) && (mb_strlen($jobTitle) > 50)) {
            throw new \InvalidArgumentException('invalid length for $jobTitle when calling Employee., must be smaller than or equal to 50.');
        }

        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->get('classification');
    }

    /**
     * Sets classification
     *
     * @param string|null $classification Employees under an award scheme will be covered by a modern award classification. If you record a classification, it will be included on your payslips (max length = 100)
     *
     * @return $this
     */
    public function setClassification($classification)
    {
        if (! is_null($classification) && (mb_strlen($classification) > 100)) {
            throw new \InvalidArgumentException('invalid length for $classification when calling Employee., must be smaller than or equal to 100.');
        }

        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets ordinaryEarningsRateID
     *
     * @return string|null
     */
    public function getOrdinaryEarningsRateID()
    {
        return $this->get('ordinaryEarningsRateID');
    }

    /**
     * Sets ordinaryEarningsRateID
     *
     * @param string|null $ordinaryEarningsRateID Xero unique identifier for earnings rate
     *
     * @return $this
     */
    public function setOrdinaryEarningsRateID($ordinaryEarningsRateID)
    {
        $this->container['ordinaryEarningsRateID'] = $ordinaryEarningsRateID;

        return $this;
    }

    /**
     * Gets payrollCalendarID
     *
     * @return string|null
     */
    public function getPayrollCalendarID()
    {
        return $this->get('payrollCalendarID');
    }

    /**
     * Sets payrollCalendarID
     *
     * @param string|null $payrollCalendarID Xero unique identifier for payroll calendar for the employee
     *
     * @return $this
     */
    public function setPayrollCalendarID($payrollCalendarID)
    {
        $this->container['payrollCalendarID'] = $payrollCalendarID;

        return $this;
    }

    /**
     * Gets employeeGroupName
     *
     * @return string|null
     */
    public function getEmployeeGroupName()
    {
        return $this->get('employeeGroupName');
    }

    /**
     * Sets employeeGroupName
     *
     * @param string|null $employeeGroupName The Employee Group allows you to report on payroll expenses and liabilities for each group of employees
     *
     * @return $this
     */
    public function setEmployeeGroupName($employeeGroupName)
    {
        $this->container['employeeGroupName'] = $employeeGroupName;

        return $this;
    }

    /**
     * Gets bankAccounts
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\BankAccount[]|null
     */
    public function getBankAccounts()
    {
        return $this->get('bankAccounts');
    }

    /**
     * Sets bankAccounts
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\BankAccount[]|null $bankAccounts See BankAccount
     *
     * @return $this
     */
    public function setBankAccounts($bankAccounts)
    {
        $this->container['bankAccounts'] = $bankAccounts;

        return $this;
    }

    /**
     * Gets payTemplate
     *
     * @return object|null
     */
    public function getPayTemplate()
    {
        return $this->get('payTemplate');
    }

    /**
     * Sets payTemplate
     *
     * @param object|null $payTemplate payTemplate
     *
     * @return $this
     */
    public function setPayTemplate($payTemplate)
    {
        $this->container['payTemplate'] = $payTemplate;

        return $this;
    }

    /**
     * Gets openingBalances
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\OpeningBalance[]|null
     */
    public function getOpeningBalances()
    {
        return $this->get('openingBalances');
    }

    /**
     * Sets openingBalances
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\OpeningBalance[]|null $openingBalances See OpeningBalances
     *
     * @return $this
     */
    public function setOpeningBalances($openingBalances)
    {
        $this->container['openingBalances'] = $openingBalances;

        return $this;
    }

    /**
     * Gets leaveBalances
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveBalance[]|null
     */
    public function getLeaveBalances()
    {
        return $this->get('leaveBalances');
    }

    /**
     * Sets leaveBalances
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\LeaveBalance[]|null $leaveBalances See LeaveBalances
     *
     * @return $this
     */
    public function setLeaveBalances($leaveBalances)
    {
        $this->container['leaveBalances'] = $leaveBalances;

        return $this;
    }

    /**
     * Gets superMemberships
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperMembership[]|null
     */
    public function getSuperMemberships()
    {
        return $this->get('superMemberships');
    }

    /**
     * Sets superMemberships
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\SuperMembership[]|null $superMemberships See SuperMemberships
     *
     * @return $this
     */
    public function setSuperMemberships($superMemberships)
    {
        $this->container['superMemberships'] = $superMemberships;

        return $this;
    }

    /**
     * Gets terminationDate
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->get('terminationDate');
    }

    /**
     * Sets terminationDate
     *
     * @param \DateTime|null $terminationDate Employee Termination Date (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setTerminationDate($terminationDate)
    {
        $this->container['terminationDate'] = $terminationDate;

        return $this;
    }

    /**
     * Gets employeeID
     *
     * @return string|null
     */
    public function getEmployeeID()
    {
        return $this->get('employeeID');
    }

    /**
     * Sets employeeID
     *
     * @param string|null $employeeID Xero unique identifier for an Employee
     *
     * @return $this
     */
    public function setEmployeeID($employeeID)
    {
        $this->container['employeeID'] = $employeeID;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->get('status');
    }

    /**
     * Sets status
     *
     * @param string|null $status See Employee Status Types
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified timestamp
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
