<?php

namespace Consilience\Xero\PayrollAuSdk\Model;

/**
 * LeaveApplication
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

/**
 * LeaveApplication Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team <team@openapitools.org>
 * @link     https://openapi-generator.tech
 */
class LeaveApplication implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LeaveApplication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employeeID' => 'string',
        'leaveTypeID' => 'string',
        'title' => 'string',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'description' => 'string',
        'leavePeriods' => '\Consilience\Xero\PayrollAuSdk\Model\LeavePeriod[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'employeeID' => 'uuid',
        'leaveTypeID' => 'uuid',
        'title' => null,
        'startDate' => 'date',
        'endDate' => 'date',
        'description' => null,
        'leavePeriods' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employeeID' => 'EmployeeID',
        'leaveTypeID' => 'LeaveTypeID',
        'title' => 'Title',
        'startDate' => 'StartDate',
        'endDate' => 'EndDate',
        'description' => 'Description',
        'leavePeriods' => 'LeavePeriods'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'employeeID' => 'setEmployeeID',
        'leaveTypeID' => 'setLeaveTypeID',
        'title' => 'setTitle',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'description' => 'setDescription',
        'leavePeriods' => 'setLeavePeriods'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'employeeID' => 'getEmployeeID',
        'leaveTypeID' => 'getLeaveTypeID',
        'title' => 'getTitle',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'description' => 'getDescription',
        'leavePeriods' => 'getLeavePeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employeeID'] = $data['employeeID'] ?? null;
        $this->container['leaveTypeID'] = $data['leaveTypeID'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['startDate'] = $data['startDate'] ?? null;
        $this->container['endDate'] = $data['endDate'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['leavePeriods'] = $data['leavePeriods'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['employeeID'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'employeeID');
        }
        if ($this->container['leaveTypeID'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'leaveTypeID');
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'title');
        }
        if ((mb_strlen($this->container['title']) > 50)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'title',
                50
            );
        }

        if ($this->container['startDate'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'startDate');
        }
        if ($this->container['endDate'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'endDate');
        }
        if (! is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", the character length must be smaller than or equal to %d.',
                'description',
                200
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeeID
     *
     * @return string
     */
    public function getEmployeeID()
    {
        return $this->get('employeeID');
    }

    /**
     * Sets employeeID
     *
     * @param string $employeeID The Xero identifier for Payroll Employee
     *
     * @return $this
     */
    public function setEmployeeID($employeeID)
    {
        $this->container['employeeID'] = $employeeID;

        return $this;
    }

    /**
     * Gets leaveTypeID
     *
     * @return string
     */
    public function getLeaveTypeID()
    {
        return $this->get('leaveTypeID');
    }

    /**
     * Sets leaveTypeID
     *
     * @param string $leaveTypeID The Xero identifier for Leave Type
     *
     * @return $this
     */
    public function setLeaveTypeID($leaveTypeID)
    {
        $this->container['leaveTypeID'] = $leaveTypeID;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->get('title');
    }

    /**
     * Sets title
     *
     * @param string $title The title of the leave (max length = 50)
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $title when calling LeaveApplication., must be smaller than or equal to 50.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->get('startDate');
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate Start date of the leave (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->get('endDate');
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate End date of the leave (YYYY-MM-DD)
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->get('description');
    }

    /**
     * Sets description
     *
     * @param string|null $description The Description of the Leave (max length = 200)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (! is_null($description) && (mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling LeaveApplication., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets leavePeriods
     *
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeavePeriod[]|null
     */
    public function getLeavePeriods()
    {
        return $this->get('leavePeriods');
    }

    /**
     * Sets leavePeriods
     *
     * @param \Consilience\Xero\PayrollAuSdk\Model\LeavePeriod[]|null $leavePeriods The leave period information
     *
     * @return $this
     */
    public function setLeavePeriods($leavePeriods)
    {
        $this->container['leavePeriods'] = $leavePeriods;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     *
     * @return array
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Return a property value.
     *
     * @param string $name    Name of the property
     * @param mixed  $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
