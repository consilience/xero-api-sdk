<?php

namespace Consilience\Xero\PayrollAuSdk\Api;

/**
 * PayrollAUApi
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// PSR-18
use Psr\Http\Client\ClientInterface;
use Psr\Http\Client\RequestExceptionInterface;
use Psr\Http\Client\NetworkExceptionInterface;

// PSR-7
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;
use Psr\Http\Message\StreamInterface;

// PSR-17
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

// Guzzle
use GuzzleHttp\ClientInterface as GuzzleClientInterface;

use Consilience\Xero\PayrollAuSdk\ApiException;
use Consilience\Xero\PayrollAuSdk\Configuration;
use Consilience\Xero\PayrollAuSdk\HeaderSelector;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

use InvalidArgumentException;

/**
 * PayrollAUApi Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayrollAUApi
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * FIXME: think about the client. We need a client that can handle both synchronous and
     * asynchronous requests. There is no PSR for asyn as yet, and implementations are so
     * diverse that we need to pick a specific implementaton (Guzzle, I guess). So do we
     * provide a wrapper that we can put one, the other, or both into? Even when there is a
     * PSR for promises, it will not be PSR-18, so we would still need two clients I believe.
     * The wrapper would support both interfaces for PSR-18 and whatever provides async requests.
     * We cannot do that with generator templates alone. We'll just add them to the configuration,
     * like the factories to avoid making this a blocker.
     *
     * @param ClientInterface|GuzzleClient $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->setConfig($config ?: new Configuration());
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function setConfig(Configuration $config)
    {
        $this->config = $config;
        return $this;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function withConfig(Configuration $config)
    {
        $clone = clone $this;
        return $clone->setConfig($config);
    }

    /**
     * Operation createEmployee
     *
     * Use this method to create a payroll employee
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee[] $employee employee (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employees
     */
    public function createEmployee($xeroTenantId, $employee)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createEmployeeWithHttpInfo($xeroTenantId, $employee);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createEmployeeWithHttpInfo
     *
     * Use this method to create a payroll employee
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee[] $employee (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employees, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmployeeWithHttpInfo($xeroTenantId, $employee)
    {
        $request = $this->createEmployeeRequest($xeroTenantId, $employee);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employees'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employees';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createEmployee'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee[] $employee (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createEmployeeRequest($xeroTenantId, $employee)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createEmployee'
            ));
        }
        // Verify the required parameter 'employee' is set

        if ($employee === null || (is_array($employee) && count($employee) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employee',
                'createEmployee'
            ));
        }

        $resourcePath = '/Employees';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($employee)) {
            $_tempBody = $employee;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createLeaveApplication
     *
     * Use this method to create a Leave Application
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[] $leaveApplication leaveApplication (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications
     */
    public function createLeaveApplication($xeroTenantId, $leaveApplication)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createLeaveApplicationWithHttpInfo($xeroTenantId, $leaveApplication);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createLeaveApplicationWithHttpInfo
     *
     * Use this method to create a Leave Application
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[] $leaveApplication (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLeaveApplicationWithHttpInfo($xeroTenantId, $leaveApplication)
    {
        $request = $this->createLeaveApplicationRequest($xeroTenantId, $leaveApplication);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createLeaveApplication'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[] $leaveApplication (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createLeaveApplicationRequest($xeroTenantId, $leaveApplication)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createLeaveApplication'
            ));
        }
        // Verify the required parameter 'leaveApplication' is set

        if ($leaveApplication === null || (is_array($leaveApplication) && count($leaveApplication) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'leaveApplication',
                'createLeaveApplication'
            ));
        }

        $resourcePath = '/LeaveApplications';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($leaveApplication)) {
            $_tempBody = $leaveApplication;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createPayItem
     *
     * Use this method to create a Pay Item
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayItems[] $payItems payItems (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayItems
     */
    public function createPayItem($xeroTenantId, $payItems)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createPayItemWithHttpInfo($xeroTenantId, $payItems);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createPayItemWithHttpInfo
     *
     * Use this method to create a Pay Item
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayItems[] $payItems (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayItems, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayItemWithHttpInfo($xeroTenantId, $payItems)
    {
        $request = $this->createPayItemRequest($xeroTenantId, $payItems);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayItems'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayItems';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createPayItem'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayItems[] $payItems (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createPayItemRequest($xeroTenantId, $payItems)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createPayItem'
            ));
        }
        // Verify the required parameter 'payItems' is set

        if ($payItems === null || (is_array($payItems) && count($payItems) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payItems',
                'createPayItem'
            ));
        }

        $resourcePath = '/PayItems';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payItems)) {
            $_tempBody = $payItems;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createPayrollCalendar
     *
     * Use this method to create a Payroll Calendars
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars[] $payrollCalendars payrollCalendars (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars
     */
    public function createPayrollCalendar($xeroTenantId, $payrollCalendars)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createPayrollCalendarWithHttpInfo($xeroTenantId, $payrollCalendars);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createPayrollCalendarWithHttpInfo
     *
     * Use this method to create a Payroll Calendars
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars[] $payrollCalendars (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayrollCalendarWithHttpInfo($xeroTenantId, $payrollCalendars)
    {
        $request = $this->createPayrollCalendarRequest($xeroTenantId, $payrollCalendars);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createPayrollCalendar'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars[] $payrollCalendars (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createPayrollCalendarRequest($xeroTenantId, $payrollCalendars)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createPayrollCalendar'
            ));
        }
        // Verify the required parameter 'payrollCalendars' is set

        if ($payrollCalendars === null || (is_array($payrollCalendars) && count($payrollCalendars) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payrollCalendars',
                'createPayrollCalendar'
            ));
        }

        $resourcePath = '/PayrollCalendars';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payrollCalendars)) {
            $_tempBody = $payrollCalendars;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createPayrun
     *
     * Use this method to create a payrun
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payruns[] $payruns payruns (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payruns
     */
    public function createPayrun($xeroTenantId, $payruns)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createPayrunWithHttpInfo($xeroTenantId, $payruns);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createPayrunWithHttpInfo
     *
     * Use this method to create a payrun
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payruns[] $payruns (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payruns, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayrunWithHttpInfo($xeroTenantId, $payruns)
    {
        $request = $this->createPayrunRequest($xeroTenantId, $payruns);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payruns'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payruns';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createPayrun'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payruns[] $payruns (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createPayrunRequest($xeroTenantId, $payruns)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createPayrun'
            ));
        }
        // Verify the required parameter 'payruns' is set

        if ($payruns === null || (is_array($payruns) && count($payruns) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payruns',
                'createPayrun'
            ));
        }

        $resourcePath = '/Payruns';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payruns)) {
            $_tempBody = $payruns;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createSuperfund
     *
     * Use this method to create a super fund
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Superfunds[] $superfunds superfunds (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Superfunds
     */
    public function createSuperfund($xeroTenantId, $superfunds)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createSuperfundWithHttpInfo($xeroTenantId, $superfunds);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createSuperfundWithHttpInfo
     *
     * Use this method to create a super fund
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Superfunds[] $superfunds (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Superfunds, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSuperfundWithHttpInfo($xeroTenantId, $superfunds)
    {
        $request = $this->createSuperfundRequest($xeroTenantId, $superfunds);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Superfunds'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Superfunds';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createSuperfund'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Superfunds[] $superfunds (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createSuperfundRequest($xeroTenantId, $superfunds)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createSuperfund'
            ));
        }
        // Verify the required parameter 'superfunds' is set

        if ($superfunds === null || (is_array($superfunds) && count($superfunds) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superfunds',
                'createSuperfund'
            ));
        }

        $resourcePath = '/Superfunds';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($superfunds)) {
            $_tempBody = $superfunds;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createTimesheet
     *
     * Use this method to create a timesheet
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheets $timesheets timesheets (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheets
     */
    public function createTimesheet($xeroTenantId, $timesheets)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createTimesheetWithHttpInfo($xeroTenantId, $timesheets);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation createTimesheetWithHttpInfo
     *
     * Use this method to create a timesheet
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheets $timesheets (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheets, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTimesheetWithHttpInfo($xeroTenantId, $timesheets)
    {
        $request = $this->createTimesheetRequest($xeroTenantId, $timesheets);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheets'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheets';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createTimesheet'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheets $timesheets (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createTimesheetRequest($xeroTenantId, $timesheets)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'createTimesheet'
            ));
        }
        // Verify the required parameter 'timesheets' is set

        if ($timesheets === null || (is_array($timesheets) && count($timesheets) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheets',
                'createTimesheet'
            ));
        }

        $resourcePath = '/Timesheets';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($timesheets)) {
            $_tempBody = $timesheets;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation getEmployee
     *
     * searches for an employee by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $employeeId Employee id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employees
     */
    public function getEmployee($xeroTenantId, $employeeId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getEmployeeWithHttpInfo($xeroTenantId, $employeeId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getEmployeeWithHttpInfo
     *
     * searches for an employee by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $employeeId Employee id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employees, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeWithHttpInfo($xeroTenantId, $employeeId)
    {
        $request = $this->getEmployeeRequest($xeroTenantId, $employeeId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employees'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employees';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getEmployee'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $employeeId Employee id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getEmployeeRequest($xeroTenantId, $employeeId)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getEmployee'
            ));
        }
        // Verify the required parameter 'employeeId' is set

        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employeeId',
                'getEmployee'
            ));
        }

        $resourcePath = '/Employees/{EmployeeId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'EmployeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getEmployees
     *
     * searches employees
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employees|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getEmployees($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getEmployeesWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getEmployeesWithHttpInfo
     *
     * searches employees
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employees|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeesWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getEmployeesRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employees'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employees';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getEmployees'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getEmployeesRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getEmployees'
            ));
        }

        $resourcePath = '/Employees';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getLeaveApplication
     *
     * searches for an Leave Application by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $leaveApplicationId Leave Application id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications
     */
    public function getLeaveApplication($xeroTenantId, $leaveApplicationId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getLeaveApplicationWithHttpInfo($xeroTenantId, $leaveApplicationId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getLeaveApplicationWithHttpInfo
     *
     * searches for an Leave Application by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $leaveApplicationId Leave Application id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeaveApplicationWithHttpInfo($xeroTenantId, $leaveApplicationId)
    {
        $request = $this->getLeaveApplicationRequest($xeroTenantId, $leaveApplicationId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getLeaveApplication'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $leaveApplicationId Leave Application id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getLeaveApplicationRequest($xeroTenantId, $leaveApplicationId)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getLeaveApplication'
            ));
        }
        // Verify the required parameter 'leaveApplicationId' is set

        if ($leaveApplicationId === null || (is_array($leaveApplicationId) && count($leaveApplicationId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'leaveApplicationId',
                'getLeaveApplication'
            ));
        }

        $resourcePath = '/LeaveApplications/{LeaveApplicationId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($leaveApplicationId !== null) {
            $resourcePath = str_replace(
                '{' . 'LeaveApplicationId' . '}',
                ObjectSerializer::toPathValue($leaveApplicationId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getLeaveApplications
     *
     * searches Leave Applications
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getLeaveApplications($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getLeaveApplicationsWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getLeaveApplicationsWithHttpInfo
     *
     * searches Leave Applications
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeaveApplicationsWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getLeaveApplicationsRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getLeaveApplications'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getLeaveApplicationsRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getLeaveApplications'
            ));
        }

        $resourcePath = '/LeaveApplications';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getPayItems
     *
     * searches Pay Items
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayItems|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getPayItems($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getPayItemsWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getPayItemsWithHttpInfo
     *
     * searches Pay Items
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayItems|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayItemsWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getPayItemsRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayItems'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayItems';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getPayItems'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getPayItemsRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getPayItems'
            ));
        }

        $resourcePath = '/PayItems';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getPayrollCalendar
     *
     * searches Payroll Calendars
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrollCalendarID Payroll Calendar id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getPayrollCalendar($xeroTenantId, $payrollCalendarID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getPayrollCalendarWithHttpInfo($xeroTenantId, $payrollCalendarID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getPayrollCalendarWithHttpInfo
     *
     * searches Payroll Calendars
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrollCalendarID Payroll Calendar id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrollCalendarWithHttpInfo($xeroTenantId, $payrollCalendarID)
    {
        $request = $this->getPayrollCalendarRequest($xeroTenantId, $payrollCalendarID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getPayrollCalendar'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrollCalendarID Payroll Calendar id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getPayrollCalendarRequest($xeroTenantId, $payrollCalendarID)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getPayrollCalendar'
            ));
        }
        // Verify the required parameter 'payrollCalendarID' is set

        if ($payrollCalendarID === null || (is_array($payrollCalendarID) && count($payrollCalendarID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payrollCalendarID',
                'getPayrollCalendar'
            ));
        }

        $resourcePath = '/PayrollCalendars/{PayrollCalendarID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payrollCalendarID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayrollCalendarID' . '}',
                ObjectSerializer::toPathValue($payrollCalendarID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getPayrollCalendars
     *
     * searches Payroll Calendars
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getPayrollCalendars($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getPayrollCalendarsWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getPayrollCalendarsWithHttpInfo
     *
     * searches Payroll Calendars
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrollCalendarsWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getPayrollCalendarsRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendars';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getPayrollCalendars'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getPayrollCalendarsRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getPayrollCalendars'
            ));
        }

        $resourcePath = '/PayrollCalendars';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getPayrun
     *
     * searches for an payrun by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrunID Payrun id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payruns
     */
    public function getPayrun($xeroTenantId, $payrunID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getPayrunWithHttpInfo($xeroTenantId, $payrunID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getPayrunWithHttpInfo
     *
     * searches for an payrun by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrunID Payrun id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payruns, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrunWithHttpInfo($xeroTenantId, $payrunID)
    {
        $request = $this->getPayrunRequest($xeroTenantId, $payrunID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payruns'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payruns';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getPayrun'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrunID Payrun id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getPayrunRequest($xeroTenantId, $payrunID)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getPayrun'
            ));
        }
        // Verify the required parameter 'payrunID' is set

        if ($payrunID === null || (is_array($payrunID) && count($payrunID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payrunID',
                'getPayrun'
            ));
        }

        $resourcePath = '/Payruns/{PayrunID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payrunID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayrunID' . '}',
                ObjectSerializer::toPathValue($payrunID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getPayruns
     *
     * searches payruns
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 payruns will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payruns|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getPayruns($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getPayrunsWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getPayrunsWithHttpInfo
     *
     * searches payruns
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 payruns will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payruns|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrunsWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getPayrunsRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payruns'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payruns';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getPayruns'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 payruns will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getPayrunsRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getPayruns'
            ));
        }

        $resourcePath = '/Payruns';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getPayslip
     *
     * searches for an payslip by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payslipID Payslip id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip
     */
    public function getPayslip($xeroTenantId, $payslipID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getPayslipWithHttpInfo($xeroTenantId, $payslipID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getPayslipWithHttpInfo
     *
     * searches for an payslip by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payslipID Payslip id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayslipWithHttpInfo($xeroTenantId, $payslipID)
    {
        $request = $this->getPayslipRequest($xeroTenantId, $payslipID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getPayslip'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payslipID Payslip id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getPayslipRequest($xeroTenantId, $payslipID)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getPayslip'
            ));
        }
        // Verify the required parameter 'payslipID' is set

        if ($payslipID === null || (is_array($payslipID) && count($payslipID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslipID',
                'getPayslip'
            ));
        }

        $resourcePath = '/Payslip/{PayslipID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payslipID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayslipID' . '}',
                ObjectSerializer::toPathValue($payslipID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getSettings
     *
     * retrieve settings
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Settings
     */
    public function getSettings($xeroTenantId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getSettingsWithHttpInfo($xeroTenantId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getSettingsWithHttpInfo
     *
     * retrieve settings
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Settings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSettingsWithHttpInfo($xeroTenantId)
    {
        $request = $this->getSettingsRequest($xeroTenantId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Settings'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Settings';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getSettings'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getSettingsRequest($xeroTenantId)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getSettings'
            ));
        }

        $resourcePath = '/Settings';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getSuperfund
     *
     * searches for an Superfund by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $superfundID Superfund id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Superfunds
     */
    public function getSuperfund($xeroTenantId, $superfundID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getSuperfundWithHttpInfo($xeroTenantId, $superfundID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getSuperfundWithHttpInfo
     *
     * searches for an Superfund by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $superfundID Superfund id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Superfunds, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuperfundWithHttpInfo($xeroTenantId, $superfundID)
    {
        $request = $this->getSuperfundRequest($xeroTenantId, $superfundID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Superfunds'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Superfunds';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getSuperfund'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $superfundID Superfund id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getSuperfundRequest($xeroTenantId, $superfundID)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getSuperfund'
            ));
        }
        // Verify the required parameter 'superfundID' is set

        if ($superfundID === null || (is_array($superfundID) && count($superfundID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superfundID',
                'getSuperfund'
            ));
        }

        $resourcePath = '/Superfunds/{SuperfundID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($superfundID !== null) {
            $resourcePath = str_replace(
                '{' . 'SuperfundID' . '}',
                ObjectSerializer::toPathValue($superfundID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getSuperfundProducts
     *
     * searches SuperfundProducts
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $aBN The ABN of the Regulated SuperFund (optional)
     * @param  string $uSI The USI of the Regulated SuperFund (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperfundProducts|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getSuperfundProducts($xeroTenantId, $aBN = null, $uSI = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getSuperfundProductsWithHttpInfo($xeroTenantId, $aBN, $uSI);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getSuperfundProductsWithHttpInfo
     *
     * searches SuperfundProducts
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $aBN The ABN of the Regulated SuperFund (optional)
     * @param  string $uSI The USI of the Regulated SuperFund (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\SuperfundProducts|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuperfundProductsWithHttpInfo($xeroTenantId, $aBN = null, $uSI = null)
    {
        $request = $this->getSuperfundProductsRequest($xeroTenantId, $aBN, $uSI);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\SuperfundProducts'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\SuperfundProducts';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getSuperfundProducts'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $aBN The ABN of the Regulated SuperFund (optional)
     * @param  string $uSI The USI of the Regulated SuperFund (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getSuperfundProductsRequest($xeroTenantId, $aBN = null, $uSI = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getSuperfundProducts'
            ));
        }

        $resourcePath = '/SuperfundProducts';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($aBN !== null) {
            $queryParams['ABN'] = ObjectSerializer::toQueryValue($aBN);
        }
        if ($uSI !== null) {
            $queryParams['USI'] = ObjectSerializer::toQueryValue($uSI);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getSuperfunds
     *
     * searches Superfunds
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 Superfunds will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Superfunds|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getSuperfunds($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getSuperfundsWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getSuperfundsWithHttpInfo
     *
     * searches Superfunds
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 Superfunds will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Superfunds|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuperfundsWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getSuperfundsRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Superfunds'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Superfunds';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getSuperfunds'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 Superfunds will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getSuperfundsRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getSuperfunds'
            ));
        }

        $resourcePath = '/Superfunds';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getTimesheet
     *
     * searches for an timesheet by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $timesheetID Timesheet id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheets
     */
    public function getTimesheet($xeroTenantId, $timesheetID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getTimesheetWithHttpInfo($xeroTenantId, $timesheetID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getTimesheetWithHttpInfo
     *
     * searches for an timesheet by unique id
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $timesheetID Timesheet id for single object (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimesheetWithHttpInfo($xeroTenantId, $timesheetID)
    {
        $request = $this->getTimesheetRequest($xeroTenantId, $timesheetID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheets'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheets';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getTimesheet'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $timesheetID Timesheet id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getTimesheetRequest($xeroTenantId, $timesheetID)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getTimesheet'
            ));
        }
        // Verify the required parameter 'timesheetID' is set

        if ($timesheetID === null || (is_array($timesheetID) && count($timesheetID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheetID',
                'getTimesheet'
            ));
        }

        $resourcePath = '/Timesheets/{TimesheetID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($timesheetID !== null) {
            $resourcePath = str_replace(
                '{' . 'TimesheetID' . '}',
                ObjectSerializer::toPathValue($timesheetID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getTimesheets
     *
     * searches timesheets
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheets|\Consilience\Xero\PayrollAuSdk\Model\APIException
     */
    public function getTimesheets($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getTimesheetsWithHttpInfo($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation getTimesheetsWithHttpInfo
     *
     * searches timesheets
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheets|\Consilience\Xero\PayrollAuSdk\Model\APIException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimesheetsWithHttpInfo($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        $request = $this->getTimesheetsRequest($xeroTenantId, $ifModifiedSince, $where, $order, $page);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheets'),
                    'request' => $request,
                    'response' => $response
                ];
            case 400:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\APIException'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheets';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getTimesheets'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     * @param  int $page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getTimesheetsRequest($xeroTenantId, $ifModifiedSince = null, $where = null, $order = null, $page = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'getTimesheets'
            ));
        }

        $resourcePath = '/Timesheets';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation updateEmployee
     *
     * Update an Employee
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $employeeId Employee id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee[] $employee employee (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employees
     */
    public function updateEmployee($xeroTenantId, $employeeId, $employee = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updateEmployeeWithHttpInfo($xeroTenantId, $employeeId, $employee);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updateEmployeeWithHttpInfo
     *
     * Update an Employee
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $employeeId Employee id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee[] $employee (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employees, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeWithHttpInfo($xeroTenantId, $employeeId, $employee = null)
    {
        $request = $this->updateEmployeeRequest($xeroTenantId, $employeeId, $employee);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employees'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employees';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updateEmployee'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $employeeId Employee id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee[] $employee (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updateEmployeeRequest($xeroTenantId, $employeeId, $employee = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updateEmployee'
            ));
        }
        // Verify the required parameter 'employeeId' is set

        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employeeId',
                'updateEmployee'
            ));
        }

        $resourcePath = '/Employees/{EmployeeId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'EmployeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($employee)) {
            $_tempBody = $employee;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation updateLeaveApplication
     *
     * Use this method to create a Leave Application
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $leaveApplicationId Leave Application id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[] $leaveApplication leaveApplication (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications
     */
    public function updateLeaveApplication($xeroTenantId, $leaveApplicationId, $leaveApplication)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updateLeaveApplicationWithHttpInfo($xeroTenantId, $leaveApplicationId, $leaveApplication);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updateLeaveApplicationWithHttpInfo
     *
     * Use this method to create a Leave Application
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $leaveApplicationId Leave Application id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[] $leaveApplication (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\LeaveApplications, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLeaveApplicationWithHttpInfo($xeroTenantId, $leaveApplicationId, $leaveApplication)
    {
        $request = $this->updateLeaveApplicationRequest($xeroTenantId, $leaveApplicationId, $leaveApplication);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplications';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updateLeaveApplication'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $leaveApplicationId Leave Application id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[] $leaveApplication (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updateLeaveApplicationRequest($xeroTenantId, $leaveApplicationId, $leaveApplication)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updateLeaveApplication'
            ));
        }
        // Verify the required parameter 'leaveApplicationId' is set

        if ($leaveApplicationId === null || (is_array($leaveApplicationId) && count($leaveApplicationId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'leaveApplicationId',
                'updateLeaveApplication'
            ));
        }
        // Verify the required parameter 'leaveApplication' is set

        if ($leaveApplication === null || (is_array($leaveApplication) && count($leaveApplication) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'leaveApplication',
                'updateLeaveApplication'
            ));
        }

        $resourcePath = '/LeaveApplications/{LeaveApplicationId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($leaveApplicationId !== null) {
            $resourcePath = str_replace(
                '{' . 'LeaveApplicationId' . '}',
                ObjectSerializer::toPathValue($leaveApplicationId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($leaveApplication)) {
            $_tempBody = $leaveApplication;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation updatePayrun
     *
     * Update a Payrun
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrunID Payrun id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payruns[] $payruns payruns (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payruns
     */
    public function updatePayrun($xeroTenantId, $payrunID, $payruns = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updatePayrunWithHttpInfo($xeroTenantId, $payrunID, $payruns);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updatePayrunWithHttpInfo
     *
     * Update a Payrun
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrunID Payrun id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payruns[] $payruns (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payruns, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayrunWithHttpInfo($xeroTenantId, $payrunID, $payruns = null)
    {
        $request = $this->updatePayrunRequest($xeroTenantId, $payrunID, $payruns);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payruns'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payruns';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updatePayrun'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payrunID Payrun id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payruns[] $payruns (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updatePayrunRequest($xeroTenantId, $payrunID, $payruns = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updatePayrun'
            ));
        }
        // Verify the required parameter 'payrunID' is set

        if ($payrunID === null || (is_array($payrunID) && count($payrunID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payrunID',
                'updatePayrun'
            ));
        }

        $resourcePath = '/Payruns/{PayrunID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payrunID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayrunID' . '}',
                ObjectSerializer::toPathValue($payrunID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($payruns)) {
            $_tempBody = $payruns;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation updatePayslip
     *
     * Use this add, update or delete one or more payslip line items
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip[] $payslip payslip (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip
     */
    public function updatePayslip($xeroTenantId, $payslip)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updatePayslipWithHttpInfo($xeroTenantId, $payslip);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updatePayslipWithHttpInfo
     *
     * Use this add, update or delete one or more payslip line items
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip[] $payslip (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayslipWithHttpInfo($xeroTenantId, $payslip)
    {
        $request = $this->updatePayslipRequest($xeroTenantId, $payslip);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updatePayslip'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip[] $payslip (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updatePayslipRequest($xeroTenantId, $payslip)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updatePayslip'
            ));
        }
        // Verify the required parameter 'payslip' is set

        if ($payslip === null || (is_array($payslip) && count($payslip) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslip',
                'updatePayslip'
            ));
        }

        $resourcePath = '/Payslip';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payslip)) {
            $_tempBody = $payslip;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation updatePayslipByID
     *
     * Update a Payslip
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payslipID Payslip id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip[] $payslip payslip (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip
     */
    public function updatePayslipByID($xeroTenantId, $payslipID, $payslip = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updatePayslipByIDWithHttpInfo($xeroTenantId, $payslipID, $payslip);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updatePayslipByIDWithHttpInfo
     *
     * Update a Payslip
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payslipID Payslip id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip[] $payslip (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayslipByIDWithHttpInfo($xeroTenantId, $payslipID, $payslip = null)
    {
        $request = $this->updatePayslipByIDRequest($xeroTenantId, $payslipID, $payslip);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updatePayslipByID'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $payslipID Payslip id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip[] $payslip (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updatePayslipByIDRequest($xeroTenantId, $payslipID, $payslip = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updatePayslipByID'
            ));
        }
        // Verify the required parameter 'payslipID' is set

        if ($payslipID === null || (is_array($payslipID) && count($payslipID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslipID',
                'updatePayslipByID'
            ));
        }

        $resourcePath = '/Payslip/{PayslipID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payslipID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayslipID' . '}',
                ObjectSerializer::toPathValue($payslipID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($payslip)) {
            $_tempBody = $payslip;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation updateSuperfund
     *
     * Update a Superfund
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $superfundID Superfund id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Superfunds $superfunds superfunds (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Superfunds
     */
    public function updateSuperfund($xeroTenantId, $superfundID, $superfunds = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updateSuperfundWithHttpInfo($xeroTenantId, $superfundID, $superfunds);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updateSuperfundWithHttpInfo
     *
     * Update a Superfund
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $superfundID Superfund id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Superfunds $superfunds (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Superfunds, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSuperfundWithHttpInfo($xeroTenantId, $superfundID, $superfunds = null)
    {
        $request = $this->updateSuperfundRequest($xeroTenantId, $superfundID, $superfunds);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Superfunds'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Superfunds';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updateSuperfund'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $superfundID Superfund id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Superfunds $superfunds (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updateSuperfundRequest($xeroTenantId, $superfundID, $superfunds = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updateSuperfund'
            ));
        }
        // Verify the required parameter 'superfundID' is set

        if ($superfundID === null || (is_array($superfundID) && count($superfundID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superfundID',
                'updateSuperfund'
            ));
        }

        $resourcePath = '/Superfunds/{SuperfundID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($superfundID !== null) {
            $resourcePath = str_replace(
                '{' . 'SuperfundID' . '}',
                ObjectSerializer::toPathValue($superfundID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($superfunds)) {
            $_tempBody = $superfunds;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation updateTimesheet
     *
     * Update a Timesheet
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $timesheetID Timesheet id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheets $timesheets timesheets (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheets
     */
    public function updateTimesheet($xeroTenantId, $timesheetID, $timesheets = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updateTimesheetWithHttpInfo($xeroTenantId, $timesheetID, $timesheets);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response,
                $model
            );
        }

        return $model;
    }

    /**
     * Operation updateTimesheetWithHttpInfo
     *
     * Update a Timesheet
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $timesheetID Timesheet id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheets $timesheets (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheets, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTimesheetWithHttpInfo($xeroTenantId, $timesheetID, $timesheets = null)
    {
        $request = $this->updateTimesheetRequest($xeroTenantId, $timesheetID, $timesheets);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheets'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheets';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updateTimesheet'
     *
     * @param  string $xeroTenantId Xero identifier for Tenant (required)
     * @param  string $timesheetID Timesheet id for single object (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheets $timesheets (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updateTimesheetRequest($xeroTenantId, $timesheetID, $timesheets = null)
    {
        // Verify the required parameter 'xeroTenantId' is set

        if ($xeroTenantId === null || (is_array($xeroTenantId) && count($xeroTenantId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'xeroTenantId',
                'updateTimesheet'
            ));
        }
        // Verify the required parameter 'timesheetID' is set

        if ($timesheetID === null || (is_array($timesheetID) && count($timesheetID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheetID',
                'updateTimesheet'
            ));
        }

        $resourcePath = '/Timesheets/{TimesheetID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($timesheetID !== null) {
            $resourcePath = str_replace(
                '{' . 'TimesheetID' . '}',
                ObjectSerializer::toPathValue($timesheetID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($timesheets)) {
            $_tempBody = $timesheets;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // Header parameters
        if ($xeroTenantId !== null) {
            $headers['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }


    /**
     * Return a PSR-7 request.
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri): RequestInterface
    {
        // Get the factory from Configuration.

        $requestFactory = $this->config->getRequestFactory();

        return $requestFactory->createRequest($method, $uri);
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createUri(string $uri = ''): UriInterface
    {
        // Get the factory from Configuration.

        $uriFactory = $this->config->getUriFactory();

        return $uriFactory->createUri($uri);
    }

    /**
     * Get a synchronous client.
     */
    protected function getSyncClient(): ClientInterface
    {
        return $this->config->getSyncClient();
    }

    /**
     * Get an asynchronous client.
     */
    protected function getAsyncClient(): GuzzleClientInterface
    {
        return $this->config->getAsyncClient();
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createStream(string $content = ''): StreamInterface
    {
        // Get the factory from Configuration.

        $streamFactory = $this->config->getStreamFactory();

        return $streamFactory->createStream($content);
    }

    /**
    * Wrapper for JSON encoding that throws when an error occurs.
    *
    * @param mixed $value   The value being encoded
    * @param int    $options JSON encode option bitmask
    * @param int    $depth   Set the maximum depth. Must be greater than zero.
    *
    * @return string
    * @throws \InvalidArgumentException if the JSON cannot be encoded.
    * @link http://www.php.net/manual/en/function.json-encode.php
    */
    function jsonEncode($value, $options = 0, $depth = 512)
    {
        $json = \json_encode($value, $options, $depth);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new \InvalidArgumentException(
                'json_encode error: ' . json_last_error_msg()
            );
        }

        return $json;
    }

    /**
    * Safely opens a PHP stream resource using a filename.
    *
    * When fopen fails, PHP normally raises a warning. This function adds an
    * error handler that checks for errors and throws an exception instead.
    *
    * @param string $filename File to open
    * @param string $mode     Mode used to open the file
    *
    * @return resource
    * @throws \RuntimeException if the file cannot be opened
    */
    function tryFopen($filename, $mode)
    {
        $ex = null;
        set_error_handler(function () use ($filename, $mode, &$ex) {
            $ex = new \RuntimeException(sprintf(
                'Unable to open %s using mode %s: %s',
                $filename,
                $mode,
                func_get_args()[1]
            ));
        });

        $handle = fopen($filename, $mode);
        restore_error_handler();

        if ($ex) {
            /** @var $ex \RuntimeException */
            throw $ex;
        }

        return $handle;
    }

    /**
    * Build a query string from an array of key value pairs.
    *
    * This function can use the return value of parse_query() to build a query
    * string. This function does not modify the provided keys when an array is
    * encountered (like http_build_query would).
    *
    * @param array     $params   Query string parameters.
    * @param int|false $encoding Set to false to not encode, PHP_QUERY_RFC3986
    *                            to encode using RFC3986, or PHP_QUERY_RFC1738
    *                            to encode using RFC1738.
    * @return string
    */
    function buildQuery(array $params, $encoding = PHP_QUERY_RFC3986)
    {
        if (!$params) {
            return '';
        }
        if ($encoding === false) {
            $encoder = function ($str) { return $str; };
        } elseif ($encoding === PHP_QUERY_RFC3986) {
            $encoder = 'rawurlencode';
        } elseif ($encoding === PHP_QUERY_RFC1738) {
            $encoder = 'urlencode';
        } else {
            throw new \InvalidArgumentException('Invalid type');
        }
        $qs = '';
        foreach ($params as $k => $v) {
            $k = $encoder($k);
            if (!is_array($v)) {
                $qs .= $k;
                if ($v !== null) {
                    $qs .= '=' . $encoder($v);
                }
                $qs .= '&';
            } else {
                foreach ($v as $vv) {
                    $qs .= $k;
                    if ($vv !== null) {
                        $qs .= '=' . $encoder($vv);
                    }
                    $qs .= '&';
                }
            }
        }
        return $qs ? (string) substr($qs, 0, -1) : '';
    }

    /**
     * Build a HTTP message from the supplied parts.
     *
     * @param array $headers includes multipart headers, parameter headers, other headers
     * @param array $query all query parameters
     * @param StreamInterface body payload stream
     * @param string $httpMethod
     * @param string $resourcePath the path relative to the API base path
     */
    protected function buildHttpRequest(
        array $headers,
        array $query,
        ?StreamInterface $httpBody,
        string $httpMethod,
        string $resourcePath
    ) {
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }


        $url = $this->createUri($this->config->getHost() . $resourcePath);

        if (count($query)) {
            $url = $url->withQuery($this->buildQuery($query));
        }

        $request = $this->createRequest($httpMethod, $url);

        foreach ($headers as $name => $value) {
            $request = $request->withHeader($name, $value);
        }

        // Add the body if set.

        if ($httpBody) {
            $request = $request->withBody($httpBody);
        }

        return $request;
    }
}
