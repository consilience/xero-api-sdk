<?php

namespace Consilience\Xero\PayrollAuSdk\Api;

/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payroll - AU
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// PSR-18
use Psr\Http\Client\ClientInterface;
use Psr\Http\Client\RequestExceptionInterface;
use Psr\Http\Client\NetworkExceptionInterface;

// PSR-7
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;
use Psr\Http\Message\StreamInterface;

// PSR-17
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

// Guzzle
use GuzzleHttp\ClientInterface as GuzzleClientInterface;

use Consilience\Xero\PayrollAuSdk\ApiException;
use Consilience\Xero\PayrollAuSdk\Configuration;
use Consilience\Xero\PayrollAuSdk\HeaderSelector;
use Consilience\Xero\PayrollAuSdk\ObjectSerializer;

use InvalidArgumentException;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\PayrollAuSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * FIXME: think about the client. We need a client that can handle both synchronous and
     * asynchronous requests. There is no PSR for asyn as yet, and implementations are so
     * diverse that we need to pick a specific implementaton (Guzzle, I guess). So do we
     * provide a wrapper that we can put one, the other, or both into? Even when there is a
     * PSR for promises, it will not be PSR-18, so we would still need two clients I believe.
     * The wrapper would support both interfaces for PSR-18 and whatever provides async requests.
     * We cannot do that with generator templates alone. We'll just add them to the configuration,
     * like the factories to avoid making this a blocker.
     *
     * @param ClientInterface|GuzzleClient $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->setConfig($config ?: new Configuration());
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function setConfig(Configuration $config)
    {
        $this->config = $config;
        return $this;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function withConfig(Configuration $config)
    {
        $clone = clone $this;
        return $clone->setConfig($config);
    }

    /**
     * Operation employeesEmployeeIDGet
     *
     * Allows you to retrieve, add and update payroll employees in a Xero organisation
     *
     * @param  string $employeeID employeeID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employee
     */
    public function employeesEmployeeIDGet($employeeID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->employeesEmployeeIDGetWithHttpInfo($employeeID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation employeesEmployeeIDGetWithHttpInfo
     *
     * Allows you to retrieve, add and update payroll employees in a Xero organisation
     *
     * @param  string $employeeID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employee, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeesEmployeeIDGetWithHttpInfo($employeeID)
    {
        $request = $this->employeesEmployeeIDGetRequest($employeeID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employee'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employee';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'employeesEmployeeIDGet'
     *
     * @param  string $employeeID (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function employeesEmployeeIDGetRequest($employeeID)
    {
        // Verify the required parameter 'employeeID' is set

        if ($employeeID === null || (is_array($employeeID) && count($employeeID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employeeID',
                'employeesEmployeeIDGet'
            ));
        }

        $resourcePath = '/Employees/{EmployeeID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($employeeID !== null) {
            $resourcePath = str_replace(
                '{' . 'EmployeeID' . '}',
                ObjectSerializer::toPathValue($employeeID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation employeesEmployeeIDPost
     *
     * @param  string $employeeID employeeID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee $employee employee (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employee
     */
    public function employeesEmployeeIDPost($employeeID, $employee)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->employeesEmployeeIDPostWithHttpInfo($employeeID, $employee);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation employeesEmployeeIDPostWithHttpInfo
     *
     * @param  string $employeeID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee $employee (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employee, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeesEmployeeIDPostWithHttpInfo($employeeID, $employee)
    {
        $request = $this->employeesEmployeeIDPostRequest($employeeID, $employee);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employee'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employee';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'employeesEmployeeIDPost'
     *
     * @param  string $employeeID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee $employee (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function employeesEmployeeIDPostRequest($employeeID, $employee)
    {
        // Verify the required parameter 'employeeID' is set

        if ($employeeID === null || (is_array($employeeID) && count($employeeID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employeeID',
                'employeesEmployeeIDPost'
            ));
        }
        // Verify the required parameter 'employee' is set

        if ($employee === null || (is_array($employee) && count($employee) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employee',
                'employeesEmployeeIDPost'
            ));
        }

        $resourcePath = '/Employees/{EmployeeID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($employeeID !== null) {
            $resourcePath = str_replace(
                '{' . 'EmployeeID' . '}',
                ObjectSerializer::toPathValue($employeeID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($employee)) {
            $_tempBody = $employee;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation employeesGet
     *
     * Allows you to retrieve, add and update payroll employees in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employee[]
     */
    public function employeesGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->employeesGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation employeesGetWithHttpInfo
     *
     * Allows you to retrieve, add and update payroll employees in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employee[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeesGetWithHttpInfo()
    {
        $request = $this->employeesGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employee[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employee[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'employeesGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function employeesGetRequest()
    {

        $resourcePath = '/Employees';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation employeesPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee $employee employee (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Employee
     */
    public function employeesPost($employee)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->employeesPostWithHttpInfo($employee);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation employeesPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee $employee (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Employee, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeesPostWithHttpInfo($employee)
    {
        $request = $this->employeesPostRequest($employee);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Employee'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Employee';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'employeesPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Employee $employee (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function employeesPostRequest($employee)
    {
        // Verify the required parameter 'employee' is set

        if ($employee === null || (is_array($employee) && count($employee) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'employee',
                'employeesPost'
            ));
        }

        $resourcePath = '/Employees';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($employee)) {
            $_tempBody = $employee;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation leaveApplicationsGet
     *
     * Allows you to retrieve, add and update Payroll leave applications in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[]
     */
    public function leaveApplicationsGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->leaveApplicationsGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation leaveApplicationsGetWithHttpInfo
     *
     * Allows you to retrieve, add and update Payroll leave applications in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[], HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveApplicationsGetWithHttpInfo()
    {
        $request = $this->leaveApplicationsGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplication[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'leaveApplicationsGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function leaveApplicationsGetRequest()
    {

        $resourcePath = '/LeaveApplications';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation leaveApplicationsPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication $leaveApplication leaveApplication (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication
     */
    public function leaveApplicationsPost($leaveApplication)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->leaveApplicationsPostWithHttpInfo($leaveApplication);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation leaveApplicationsPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication $leaveApplication (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveApplicationsPostWithHttpInfo($leaveApplication)
    {
        $request = $this->leaveApplicationsPostRequest($leaveApplication);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplication'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\LeaveApplication';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'leaveApplicationsPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\LeaveApplication $leaveApplication (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function leaveApplicationsPostRequest($leaveApplication)
    {
        // Verify the required parameter 'leaveApplication' is set

        if ($leaveApplication === null || (is_array($leaveApplication) && count($leaveApplication) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'leaveApplication',
                'leaveApplicationsPost'
            ));
        }

        $resourcePath = '/LeaveApplications';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($leaveApplication)) {
            $_tempBody = $leaveApplication;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation payItemsGet
     *
     * Allows you to retrieve, add, update and delete Payroll Items in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayItem[]
     */
    public function payItemsGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payItemsGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payItemsGetWithHttpInfo
     *
     * Allows you to retrieve, add, update and delete Payroll Items in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payItemsGetWithHttpInfo()
    {
        $request = $this->payItemsGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayItem[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayItem[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payItemsGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payItemsGetRequest()
    {

        $resourcePath = '/PayItems';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation payItemsPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayItem $payItem payItem (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayItem
     */
    public function payItemsPost($payItem)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payItemsPostWithHttpInfo($payItem);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payItemsPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayItem $payItem (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function payItemsPostWithHttpInfo($payItem)
    {
        $request = $this->payItemsPostRequest($payItem);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayItem'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayItem';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payItemsPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayItem $payItem (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payItemsPostRequest($payItem)
    {
        // Verify the required parameter 'payItem' is set

        if ($payItem === null || (is_array($payItem) && count($payItem) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payItem',
                'payItemsPost'
            ));
        }

        $resourcePath = '/PayItems';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payItem)) {
            $_tempBody = $payItem;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation payRunsGet
     *
     * Allows you to retrieve, add and update pay runs in a Xero organisation
     *
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  float $page e.g. page&#x3D;1 – Up to 100 records will be returned in a single API call (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayRun[]
     */
    public function payRunsGet($ifModifiedSince = null, $page = null, $where = null, $order = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payRunsGetWithHttpInfo($ifModifiedSince, $page, $where, $order);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payRunsGetWithHttpInfo
     *
     * Allows you to retrieve, add and update pay runs in a Xero organisation
     *
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  float $page e.g. page&#x3D;1 – Up to 100 records will be returned in a single API call (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayRun[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunsGetWithHttpInfo($ifModifiedSince = null, $page = null, $where = null, $order = null)
    {
        $request = $this->payRunsGetRequest($ifModifiedSince, $page, $where, $order);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayRun[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayRun[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payRunsGet'
     *
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  float $page e.g. page&#x3D;1 – Up to 100 records will be returned in a single API call (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payRunsGetRequest($ifModifiedSince = null, $page = null, $where = null, $order = null)
    {

        $resourcePath = '/PayRuns';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        // Header parameters
        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation payRunsPayRunIDGet
     *
     * Allows you to retrieve, add and update pay runs in a Xero organisation
     *
     * @param  string $payRunID payRunID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayRun
     */
    public function payRunsPayRunIDGet($payRunID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payRunsPayRunIDGetWithHttpInfo($payRunID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payRunsPayRunIDGetWithHttpInfo
     *
     * Allows you to retrieve, add and update pay runs in a Xero organisation
     *
     * @param  string $payRunID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunsPayRunIDGetWithHttpInfo($payRunID)
    {
        $request = $this->payRunsPayRunIDGetRequest($payRunID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayRun'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayRun';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payRunsPayRunIDGet'
     *
     * @param  string $payRunID (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payRunsPayRunIDGetRequest($payRunID)
    {
        // Verify the required parameter 'payRunID' is set

        if ($payRunID === null || (is_array($payRunID) && count($payRunID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payRunID',
                'payRunsPayRunIDGet'
            ));
        }

        $resourcePath = '/PayRuns/{PayRunID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payRunID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayRunID' . '}',
                ObjectSerializer::toPathValue($payRunID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation payRunsPayRunIDPost
     *
     * @param  string $payRunID payRunID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayRun $payRun payRun (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayRun
     */
    public function payRunsPayRunIDPost($payRunID, $payRun)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payRunsPayRunIDPostWithHttpInfo($payRunID, $payRun);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payRunsPayRunIDPostWithHttpInfo
     *
     * @param  string $payRunID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayRun $payRun (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunsPayRunIDPostWithHttpInfo($payRunID, $payRun)
    {
        $request = $this->payRunsPayRunIDPostRequest($payRunID, $payRun);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayRun'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayRun';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payRunsPayRunIDPost'
     *
     * @param  string $payRunID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayRun $payRun (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payRunsPayRunIDPostRequest($payRunID, $payRun)
    {
        // Verify the required parameter 'payRunID' is set

        if ($payRunID === null || (is_array($payRunID) && count($payRunID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payRunID',
                'payRunsPayRunIDPost'
            ));
        }
        // Verify the required parameter 'payRun' is set

        if ($payRun === null || (is_array($payRun) && count($payRun) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payRun',
                'payRunsPayRunIDPost'
            ));
        }

        $resourcePath = '/PayRuns/{PayRunID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payRunID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayRunID' . '}',
                ObjectSerializer::toPathValue($payRunID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($payRun)) {
            $_tempBody = $payRun;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation payRunsPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayRun $payRun payRun (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayRun
     */
    public function payRunsPost($payRun)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payRunsPostWithHttpInfo($payRun);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payRunsPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayRun $payRun (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunsPostWithHttpInfo($payRun)
    {
        $request = $this->payRunsPostRequest($payRun);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayRun'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayRun';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payRunsPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayRun $payRun (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payRunsPostRequest($payRun)
    {
        // Verify the required parameter 'payRun' is set

        if ($payRun === null || (is_array($payRun) && count($payRun) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payRun',
                'payRunsPost'
            ));
        }

        $resourcePath = '/PayRuns';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payRun)) {
            $_tempBody = $payRun;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation payrollCalendarsGet
     *
     * Allows you to retrieve and add Payroll Calendars in a Xero organisation
     *
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  float $page e.g. page&#x3D;1 – Up to 100 records will be returned in a single API call (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar[]
     */
    public function payrollCalendarsGet($ifModifiedSince = null, $page = null, $where = null, $order = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payrollCalendarsGetWithHttpInfo($ifModifiedSince, $page, $where, $order);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payrollCalendarsGetWithHttpInfo
     *
     * Allows you to retrieve and add Payroll Calendars in a Xero organisation
     *
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  float $page e.g. page&#x3D;1 – Up to 100 records will be returned in a single API call (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollCalendarsGetWithHttpInfo($ifModifiedSince = null, $page = null, $where = null, $order = null)
    {
        $request = $this->payrollCalendarsGetRequest($ifModifiedSince, $page, $where, $order);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payrollCalendarsGet'
     *
     * @param  \DateTime $ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param  float $page e.g. page&#x3D;1 – Up to 100 records will be returned in a single API call (optional)
     * @param  string $where Filter by an any element (optional)
     * @param  string $order Order by an any element (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payrollCalendarsGetRequest($ifModifiedSince = null, $page = null, $where = null, $order = null)
    {

        $resourcePath = '/PayrollCalendars';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        if ($where !== null) {
            $queryParams['where'] = ObjectSerializer::toQueryValue($where);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        // Header parameters
        if ($ifModifiedSince !== null) {
            $headers['If-Modified-Since'] = ObjectSerializer::toHeaderValue($ifModifiedSince);
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation payrollCalendarsPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar $payrollCalendar payrollCalendar (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar
     */
    public function payrollCalendarsPost($payrollCalendar)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payrollCalendarsPostWithHttpInfo($payrollCalendar);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payrollCalendarsPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar $payrollCalendar (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollCalendarsPostWithHttpInfo($payrollCalendar)
    {
        $request = $this->payrollCalendarsPostRequest($payrollCalendar);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payrollCalendarsPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\PayrollCalendar $payrollCalendar (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payrollCalendarsPostRequest($payrollCalendar)
    {
        // Verify the required parameter 'payrollCalendar' is set

        if ($payrollCalendar === null || (is_array($payrollCalendar) && count($payrollCalendar) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payrollCalendar',
                'payrollCalendarsPost'
            ));
        }

        $resourcePath = '/PayrollCalendars';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payrollCalendar)) {
            $_tempBody = $payrollCalendar;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation payslipGet
     *
     * Allows you to retrieve and update payslips in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip[]
     */
    public function payslipGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payslipGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payslipGetWithHttpInfo
     *
     * Allows you to retrieve and update payslips in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payslipGetWithHttpInfo()
    {
        $request = $this->payslipGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payslipGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payslipGetRequest()
    {

        $resourcePath = '/Payslip';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation payslipPayslipIDGet
     *
     * Allows you to retrieve and update payslips in a Xero organisation
     *
     * @param  string $payslipID payslipID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip
     */
    public function payslipPayslipIDGet($payslipID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payslipPayslipIDGetWithHttpInfo($payslipID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payslipPayslipIDGetWithHttpInfo
     *
     * Allows you to retrieve and update payslips in a Xero organisation
     *
     * @param  string $payslipID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip, HTTP status code, HTTP response headers (array of strings)
     */
    public function payslipPayslipIDGetWithHttpInfo($payslipID)
    {
        $request = $this->payslipPayslipIDGetRequest($payslipID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payslipPayslipIDGet'
     *
     * @param  string $payslipID (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payslipPayslipIDGetRequest($payslipID)
    {
        // Verify the required parameter 'payslipID' is set

        if ($payslipID === null || (is_array($payslipID) && count($payslipID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslipID',
                'payslipPayslipIDGet'
            ));
        }

        $resourcePath = '/Payslip/{PayslipID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payslipID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayslipID' . '}',
                ObjectSerializer::toPathValue($payslipID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation payslipPayslipIDPost
     *
     * @param  string $payslipID payslipID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip $payslip payslip (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip
     */
    public function payslipPayslipIDPost($payslipID, $payslip)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payslipPayslipIDPostWithHttpInfo($payslipID, $payslip);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payslipPayslipIDPostWithHttpInfo
     *
     * @param  string $payslipID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip $payslip (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip, HTTP status code, HTTP response headers (array of strings)
     */
    public function payslipPayslipIDPostWithHttpInfo($payslipID, $payslip)
    {
        $request = $this->payslipPayslipIDPostRequest($payslipID, $payslip);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payslipPayslipIDPost'
     *
     * @param  string $payslipID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip $payslip (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payslipPayslipIDPostRequest($payslipID, $payslip)
    {
        // Verify the required parameter 'payslipID' is set

        if ($payslipID === null || (is_array($payslipID) && count($payslipID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslipID',
                'payslipPayslipIDPost'
            ));
        }
        // Verify the required parameter 'payslip' is set

        if ($payslip === null || (is_array($payslip) && count($payslip) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslip',
                'payslipPayslipIDPost'
            ));
        }

        $resourcePath = '/Payslip/{PayslipID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($payslipID !== null) {
            $resourcePath = str_replace(
                '{' . 'PayslipID' . '}',
                ObjectSerializer::toPathValue($payslipID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($payslip)) {
            $_tempBody = $payslip;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation payslipPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip $payslip payslip (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Payslip
     */
    public function payslipPost($payslip)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->payslipPostWithHttpInfo($payslip);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation payslipPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip $payslip (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Payslip, HTTP status code, HTTP response headers (array of strings)
     */
    public function payslipPostWithHttpInfo($payslip)
    {
        $request = $this->payslipPostRequest($payslip);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Payslip'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Payslip';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'payslipPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Payslip $payslip (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function payslipPostRequest($payslip)
    {
        // Verify the required parameter 'payslip' is set

        if ($payslip === null || (is_array($payslip) && count($payslip) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'payslip',
                'payslipPost'
            ));
        }

        $resourcePath = '/Payslip';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($payslip)) {
            $_tempBody = $payslip;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation settingsGet
     *
     * Allows you to retrieve the Payroll settings of a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Setting[]
     */
    public function settingsGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->settingsGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation settingsGetWithHttpInfo
     *
     * Allows you to retrieve the Payroll settings of a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Setting[], HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsGetWithHttpInfo()
    {
        $request = $this->settingsGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Setting[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Setting[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'settingsGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsGetRequest()
    {

        $resourcePath = '/Settings';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation superFundProductsGet
     *
     * GET a SuperFundProduct
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperFundProduct[]
     */
    public function superFundProductsGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->superFundProductsGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation superFundProductsGetWithHttpInfo
     *
     * GET a SuperFundProduct
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\SuperFundProduct[], HTTP status code, HTTP response headers (array of strings)
     */
    public function superFundProductsGetWithHttpInfo()
    {
        $request = $this->superFundProductsGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\SuperFundProduct[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\SuperFundProduct[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'superFundProductsGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function superFundProductsGetRequest()
    {

        $resourcePath = '/SuperFundProducts';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation superFundsGet
     *
     * Allows you to retrieve, add and update Payroll Super Funds in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperFund[]
     */
    public function superFundsGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->superFundsGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation superFundsGetWithHttpInfo
     *
     * Allows you to retrieve, add and update Payroll Super Funds in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\SuperFund[], HTTP status code, HTTP response headers (array of strings)
     */
    public function superFundsGetWithHttpInfo()
    {
        $request = $this->superFundsGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\SuperFund[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\SuperFund[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'superFundsGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function superFundsGetRequest()
    {

        $resourcePath = '/SuperFunds';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation superFundsPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\SuperFund $superFund superFund (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperFund
     */
    public function superFundsPost($superFund)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->superFundsPostWithHttpInfo($superFund);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation superFundsPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\SuperFund $superFund (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\SuperFund, HTTP status code, HTTP response headers (array of strings)
     */
    public function superFundsPostWithHttpInfo($superFund)
    {
        $request = $this->superFundsPostRequest($superFund);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\SuperFund'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\SuperFund';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'superFundsPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\SuperFund $superFund (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function superFundsPostRequest($superFund)
    {
        // Verify the required parameter 'superFund' is set

        if ($superFund === null || (is_array($superFund) && count($superFund) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superFund',
                'superFundsPost'
            ));
        }

        $resourcePath = '/SuperFunds';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($superFund)) {
            $_tempBody = $superFund;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation superFundsSuperFundIDGet
     *
     * Allows you to retrieve, add and update Payroll Super Funds in a Xero organisation
     *
     * @param  string $superFundID superFundID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperFund
     */
    public function superFundsSuperFundIDGet($superFundID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->superFundsSuperFundIDGetWithHttpInfo($superFundID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation superFundsSuperFundIDGetWithHttpInfo
     *
     * Allows you to retrieve, add and update Payroll Super Funds in a Xero organisation
     *
     * @param  string $superFundID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\SuperFund, HTTP status code, HTTP response headers (array of strings)
     */
    public function superFundsSuperFundIDGetWithHttpInfo($superFundID)
    {
        $request = $this->superFundsSuperFundIDGetRequest($superFundID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\SuperFund'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\SuperFund';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'superFundsSuperFundIDGet'
     *
     * @param  string $superFundID (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function superFundsSuperFundIDGetRequest($superFundID)
    {
        // Verify the required parameter 'superFundID' is set

        if ($superFundID === null || (is_array($superFundID) && count($superFundID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superFundID',
                'superFundsSuperFundIDGet'
            ));
        }

        $resourcePath = '/SuperFunds/{SuperFundID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($superFundID !== null) {
            $resourcePath = str_replace(
                '{' . 'SuperFundID' . '}',
                ObjectSerializer::toPathValue($superFundID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation superFundsSuperFundIDPost
     *
     * @param  string $superFundID superFundID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\SuperFund $superFund superFund (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\SuperFund
     */
    public function superFundsSuperFundIDPost($superFundID, $superFund)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->superFundsSuperFundIDPostWithHttpInfo($superFundID, $superFund);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation superFundsSuperFundIDPostWithHttpInfo
     *
     * @param  string $superFundID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\SuperFund $superFund (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\SuperFund, HTTP status code, HTTP response headers (array of strings)
     */
    public function superFundsSuperFundIDPostWithHttpInfo($superFundID, $superFund)
    {
        $request = $this->superFundsSuperFundIDPostRequest($superFundID, $superFund);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\SuperFund'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\SuperFund';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'superFundsSuperFundIDPost'
     *
     * @param  string $superFundID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\SuperFund $superFund (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function superFundsSuperFundIDPostRequest($superFundID, $superFund)
    {
        // Verify the required parameter 'superFundID' is set

        if ($superFundID === null || (is_array($superFundID) && count($superFundID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superFundID',
                'superFundsSuperFundIDPost'
            ));
        }
        // Verify the required parameter 'superFund' is set

        if ($superFund === null || (is_array($superFund) && count($superFund) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'superFund',
                'superFundsSuperFundIDPost'
            ));
        }

        $resourcePath = '/SuperFunds/{SuperFundID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($superFundID !== null) {
            $resourcePath = str_replace(
                '{' . 'SuperFundID' . '}',
                ObjectSerializer::toPathValue($superFundID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($superFund)) {
            $_tempBody = $superFund;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation timesheetsGet
     *
     * Allows you to retrieve, add and update Payroll Timesheet in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheet[]
     */
    public function timesheetsGet()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->timesheetsGetWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation timesheetsGetWithHttpInfo
     *
     * Allows you to retrieve, add and update Payroll Timesheet in a Xero organisation
     *
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function timesheetsGetWithHttpInfo()
    {
        $request = $this->timesheetsGetRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheet[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheet[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'timesheetsGet'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function timesheetsGetRequest()
    {

        $resourcePath = '/Timesheets';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation timesheetsPost
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheet $timesheet timesheet (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheet
     */
    public function timesheetsPost($timesheet)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->timesheetsPostWithHttpInfo($timesheet);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation timesheetsPostWithHttpInfo
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheet $timesheet (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheet, HTTP status code, HTTP response headers (array of strings)
     */
    public function timesheetsPostWithHttpInfo($timesheet)
    {
        $request = $this->timesheetsPostRequest($timesheet);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheet'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheet';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'timesheetsPost'
     *
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheet $timesheet (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function timesheetsPostRequest($timesheet)
    {
        // Verify the required parameter 'timesheet' is set

        if ($timesheet === null || (is_array($timesheet) && count($timesheet) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheet',
                'timesheetsPost'
            ));
        }

        $resourcePath = '/Timesheets';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($timesheet)) {
            $_tempBody = $timesheet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation timesheetsTimesheetIDGet
     *
     * Allows you to retrieve, add and update Payroll Timesheet in a Xero organisation
     *
     * @param  string $timesheetID timesheetID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheet
     */
    public function timesheetsTimesheetIDGet($timesheetID)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->timesheetsTimesheetIDGetWithHttpInfo($timesheetID);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation timesheetsTimesheetIDGetWithHttpInfo
     *
     * Allows you to retrieve, add and update Payroll Timesheet in a Xero organisation
     *
     * @param  string $timesheetID (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheet, HTTP status code, HTTP response headers (array of strings)
     */
    public function timesheetsTimesheetIDGetWithHttpInfo($timesheetID)
    {
        $request = $this->timesheetsTimesheetIDGetRequest($timesheetID);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheet'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheet';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'timesheetsTimesheetIDGet'
     *
     * @param  string $timesheetID (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function timesheetsTimesheetIDGetRequest($timesheetID)
    {
        // Verify the required parameter 'timesheetID' is set

        if ($timesheetID === null || (is_array($timesheetID) && count($timesheetID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheetID',
                'timesheetsTimesheetIDGet'
            ));
        }

        $resourcePath = '/Timesheets/{TimesheetID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($timesheetID !== null) {
            $resourcePath = str_replace(
                '{' . 'TimesheetID' . '}',
                ObjectSerializer::toPathValue($timesheetID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation timesheetsTimesheetIDPost
     *
     * @param  string $timesheetID timesheetID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheet $timesheet timesheet (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\PayrollAuSdk\Model\Timesheet
     */
    public function timesheetsTimesheetIDPost($timesheetID, $timesheet)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->timesheetsTimesheetIDPostWithHttpInfo($timesheetID, $timesheet);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation timesheetsTimesheetIDPostWithHttpInfo
     *
     * @param  string $timesheetID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheet $timesheet (required)
     *
     * @throws \Consilience\Xero\PayrollAuSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\PayrollAuSdk\Model\Timesheet, HTTP status code, HTTP response headers (array of strings)
     */
    public function timesheetsTimesheetIDPostWithHttpInfo($timesheetID, $timesheet)
    {
        $request = $this->timesheetsTimesheetIDPostRequest($timesheetID, $timesheet);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\PayrollAuSdk\Model\Timesheet'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\PayrollAuSdk\Model\Timesheet';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'timesheetsTimesheetIDPost'
     *
     * @param  string $timesheetID (required)
     * @param  \Consilience\Xero\PayrollAuSdk\Model\Timesheet $timesheet (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function timesheetsTimesheetIDPostRequest($timesheetID, $timesheet)
    {
        // Verify the required parameter 'timesheetID' is set

        if ($timesheetID === null || (is_array($timesheetID) && count($timesheetID) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheetID',
                'timesheetsTimesheetIDPost'
            ));
        }
        // Verify the required parameter 'timesheet' is set

        if ($timesheet === null || (is_array($timesheet) && count($timesheet) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'timesheet',
                'timesheetsTimesheetIDPost'
            ));
        }

        $resourcePath = '/Timesheets/{TimesheetID}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($timesheetID !== null) {
            $resourcePath = str_replace(
                '{' . 'TimesheetID' . '}',
                ObjectSerializer::toPathValue($timesheetID),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($timesheet)) {
            $_tempBody = $timesheet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml', 'application/json'],
                ['text/xml', 'application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }


    /**
     * Return a PSR-7 request.
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri): RequestInterface
    {
        // Get the factory from Configuration.

        $requestFactory = $this->config->getRequestFactory();

        return $requestFactory->createRequest($method, $uri);
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createUri(string $uri = ''): UriInterface
    {
        // Get the factory from Configuration.

        $uriFactory = $this->config->getUriFactory();

        return $uriFactory->createUri($uri);
    }

    /**
     * Get a synchronous client.
     */
    protected function getSyncClient(): ClientInterface
    {
        return $this->config->getSyncClient();
    }

    /**
     * Get an asynchronous client.
     */
    protected function getAsyncClient(): GuzzleClientInterface
    {
        return $this->config->getAsyncClient();
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createStream(string $content = ''): StreamInterface
    {
        // Get the factory from Configuration.

        $streamFactory = $this->config->getStreamFactory();

        return $streamFactory->createStream($content);
    }

    /**
    * Wrapper for JSON encoding that throws when an error occurs.
    *
    * @param mixed $value   The value being encoded
    * @param int    $options JSON encode option bitmask
    * @param int    $depth   Set the maximum depth. Must be greater than zero.
    *
    * @return string
    * @throws \InvalidArgumentException if the JSON cannot be encoded.
    * @link http://www.php.net/manual/en/function.json-encode.php
    */
    function jsonEncode($value, $options = 0, $depth = 512)
    {
        $json = \json_encode($value, $options, $depth);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new \InvalidArgumentException(
                'json_encode error: ' . json_last_error_msg()
            );
        }

        return $json;
    }

    /**
    * Safely opens a PHP stream resource using a filename.
    *
    * When fopen fails, PHP normally raises a warning. This function adds an
    * error handler that checks for errors and throws an exception instead.
    *
    * @param string $filename File to open
    * @param string $mode     Mode used to open the file
    *
    * @return resource
    * @throws \RuntimeException if the file cannot be opened
    */
    function tryFopen($filename, $mode)
    {
        $ex = null;
        set_error_handler(function () use ($filename, $mode, &$ex) {
            $ex = new \RuntimeException(sprintf(
                'Unable to open %s using mode %s: %s',
                $filename,
                $mode,
                func_get_args()[1]
            ));
        });

        $handle = fopen($filename, $mode);
        restore_error_handler();

        if ($ex) {
            /** @var $ex \RuntimeException */
            throw $ex;
        }

        return $handle;
    }

    /**
    * Build a query string from an array of key value pairs.
    *
    * This function can use the return value of parse_query() to build a query
    * string. This function does not modify the provided keys when an array is
    * encountered (like http_build_query would).
    *
    * @param array     $params   Query string parameters.
    * @param int|false $encoding Set to false to not encode, PHP_QUERY_RFC3986
    *                            to encode using RFC3986, or PHP_QUERY_RFC1738
    *                            to encode using RFC1738.
    * @return string
    */
    function buildQuery(array $params, $encoding = PHP_QUERY_RFC3986)
    {
        if (!$params) {
            return '';
        }
        if ($encoding === false) {
            $encoder = function ($str) { return $str; };
        } elseif ($encoding === PHP_QUERY_RFC3986) {
            $encoder = 'rawurlencode';
        } elseif ($encoding === PHP_QUERY_RFC1738) {
            $encoder = 'urlencode';
        } else {
            throw new \InvalidArgumentException('Invalid type');
        }
        $qs = '';
        foreach ($params as $k => $v) {
            $k = $encoder($k);
            if (!is_array($v)) {
                $qs .= $k;
                if ($v !== null) {
                    $qs .= '=' . $encoder($v);
                }
                $qs .= '&';
            } else {
                foreach ($v as $vv) {
                    $qs .= $k;
                    if ($vv !== null) {
                        $qs .= '=' . $encoder($vv);
                    }
                    $qs .= '&';
                }
            }
        }
        return $qs ? (string) substr($qs, 0, -1) : '';
    }

    /**
     * Build a HTTP message from the supplied parts.
     *
     * @param array $headers includes multipart headers, parameter headers, other headers
     * @param array $query all query parameters
     * @param StreamInterface body payload stream
     * @param string $httpMethod
     * @param string $resourcePath the path relative to the API base path
     */
    protected function buildHttpRequest(
        array $headers,
        array $query,
        ?StreamInterface $httpBody,
        string $httpMethod,
        string $resourcePath
    ) {
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }


        $url = $this->createUri($this->config->getHost() . $resourcePath);

        if (count($query)) {
            $url = $url->withQuery($this->buildQuery($query));
        }

        $request = $this->createRequest($httpMethod, $url);

        foreach ($headers as $name => $value) {
            $request = $request->withHeader($name, $value);
        }

        // Add the body if set.

        if ($httpBody) {
            $request = $request->withBody($httpBody);
        }

        return $request;
    }
}
