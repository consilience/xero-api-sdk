<?php

namespace Consilience\Xero\AssetsSdk\Model;

/**
 * Setting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AssetsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Xero Assets API
 *
 * This the Xero Assets API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AssetsSdk\ObjectSerializer;

/**
 * Setting Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AssetsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Setting implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Setting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assetNumberPrefix' => 'string',
        'assetNumberSequence' => 'string',
        'assetStartDate' => '\DateTime',
        'lastDepreciationDate' => '\DateTime',
        'defaultGainOnDisposalAccountId' => 'string',
        'defaultLossOnDisposalAccountId' => 'string',
        'defaultCapitalGainOnDisposalAccountId' => 'string',
        'optInForTax' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'assetNumberPrefix' => null,
        'assetNumberSequence' => null,
        'assetStartDate' => 'date',
        'lastDepreciationDate' => 'date',
        'defaultGainOnDisposalAccountId' => 'uuid',
        'defaultLossOnDisposalAccountId' => 'uuid',
        'defaultCapitalGainOnDisposalAccountId' => 'uuid',
        'optInForTax' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assetNumberPrefix' => 'assetNumberPrefix',
        'assetNumberSequence' => 'assetNumberSequence',
        'assetStartDate' => 'assetStartDate',
        'lastDepreciationDate' => 'lastDepreciationDate',
        'defaultGainOnDisposalAccountId' => 'defaultGainOnDisposalAccountId',
        'defaultLossOnDisposalAccountId' => 'defaultLossOnDisposalAccountId',
        'defaultCapitalGainOnDisposalAccountId' => 'defaultCapitalGainOnDisposalAccountId',
        'optInForTax' => 'optInForTax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assetNumberPrefix' => 'setAssetNumberPrefix',
        'assetNumberSequence' => 'setAssetNumberSequence',
        'assetStartDate' => 'setAssetStartDate',
        'lastDepreciationDate' => 'setLastDepreciationDate',
        'defaultGainOnDisposalAccountId' => 'setDefaultGainOnDisposalAccountId',
        'defaultLossOnDisposalAccountId' => 'setDefaultLossOnDisposalAccountId',
        'defaultCapitalGainOnDisposalAccountId' => 'setDefaultCapitalGainOnDisposalAccountId',
        'optInForTax' => 'setOptInForTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assetNumberPrefix' => 'getAssetNumberPrefix',
        'assetNumberSequence' => 'getAssetNumberSequence',
        'assetStartDate' => 'getAssetStartDate',
        'lastDepreciationDate' => 'getLastDepreciationDate',
        'defaultGainOnDisposalAccountId' => 'getDefaultGainOnDisposalAccountId',
        'defaultLossOnDisposalAccountId' => 'getDefaultLossOnDisposalAccountId',
        'defaultCapitalGainOnDisposalAccountId' => 'getDefaultCapitalGainOnDisposalAccountId',
        'optInForTax' => 'getOptInForTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assetNumberPrefix'] = isset($data['assetNumberPrefix']) ? $data['assetNumberPrefix'] : null;
        $this->container['assetNumberSequence'] = isset($data['assetNumberSequence']) ? $data['assetNumberSequence'] : null;
        $this->container['assetStartDate'] = isset($data['assetStartDate']) ? $data['assetStartDate'] : null;
        $this->container['lastDepreciationDate'] = isset($data['lastDepreciationDate']) ? $data['lastDepreciationDate'] : null;
        $this->container['defaultGainOnDisposalAccountId'] = isset($data['defaultGainOnDisposalAccountId']) ? $data['defaultGainOnDisposalAccountId'] : null;
        $this->container['defaultLossOnDisposalAccountId'] = isset($data['defaultLossOnDisposalAccountId']) ? $data['defaultLossOnDisposalAccountId'] : null;
        $this->container['defaultCapitalGainOnDisposalAccountId'] = isset($data['defaultCapitalGainOnDisposalAccountId']) ? $data['defaultCapitalGainOnDisposalAccountId'] : null;
        $this->container['optInForTax'] = isset($data['optInForTax']) ? $data['optInForTax'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assetNumberPrefix
     *
     * @return string|null
     */
    public function getAssetNumberPrefix()
    {
        return $this->container['assetNumberPrefix'];
    }

    /**
     * Sets assetNumberPrefix
     *
     * @param string|null $assetNumberPrefix The prefix used for fixed asset numbers (“FA-” by default)
     *
     * @return $this
     */
    public function setAssetNumberPrefix($assetNumberPrefix)
    {
        $this->container['assetNumberPrefix'] = $assetNumberPrefix;

        return $this;
    }

    /**
     * Gets assetNumberSequence
     *
     * @return string|null
     */
    public function getAssetNumberSequence()
    {
        return $this->container['assetNumberSequence'];
    }

    /**
     * Sets assetNumberSequence
     *
     * @param string|null $assetNumberSequence The next available sequence number
     *
     * @return $this
     */
    public function setAssetNumberSequence($assetNumberSequence)
    {
        $this->container['assetNumberSequence'] = $assetNumberSequence;

        return $this;
    }

    /**
     * Gets assetStartDate
     *
     * @return \DateTime|null
     */
    public function getAssetStartDate()
    {
        return $this->container['assetStartDate'];
    }

    /**
     * Sets assetStartDate
     *
     * @param \DateTime|null $assetStartDate The date depreciation calculations started on registered fixed assets in Xero
     *
     * @return $this
     */
    public function setAssetStartDate($assetStartDate)
    {
        $this->container['assetStartDate'] = $assetStartDate;

        return $this;
    }

    /**
     * Gets lastDepreciationDate
     *
     * @return \DateTime|null
     */
    public function getLastDepreciationDate()
    {
        return $this->container['lastDepreciationDate'];
    }

    /**
     * Sets lastDepreciationDate
     *
     * @param \DateTime|null $lastDepreciationDate The last depreciation date
     *
     * @return $this
     */
    public function setLastDepreciationDate($lastDepreciationDate)
    {
        $this->container['lastDepreciationDate'] = $lastDepreciationDate;

        return $this;
    }

    /**
     * Gets defaultGainOnDisposalAccountId
     *
     * @return string|null
     */
    public function getDefaultGainOnDisposalAccountId()
    {
        return $this->container['defaultGainOnDisposalAccountId'];
    }

    /**
     * Sets defaultGainOnDisposalAccountId
     *
     * @param string|null $defaultGainOnDisposalAccountId Default account that gains are posted to
     *
     * @return $this
     */
    public function setDefaultGainOnDisposalAccountId($defaultGainOnDisposalAccountId)
    {
        $this->container['defaultGainOnDisposalAccountId'] = $defaultGainOnDisposalAccountId;

        return $this;
    }

    /**
     * Gets defaultLossOnDisposalAccountId
     *
     * @return string|null
     */
    public function getDefaultLossOnDisposalAccountId()
    {
        return $this->container['defaultLossOnDisposalAccountId'];
    }

    /**
     * Sets defaultLossOnDisposalAccountId
     *
     * @param string|null $defaultLossOnDisposalAccountId Default account that losses are posted to
     *
     * @return $this
     */
    public function setDefaultLossOnDisposalAccountId($defaultLossOnDisposalAccountId)
    {
        $this->container['defaultLossOnDisposalAccountId'] = $defaultLossOnDisposalAccountId;

        return $this;
    }

    /**
     * Gets defaultCapitalGainOnDisposalAccountId
     *
     * @return string|null
     */
    public function getDefaultCapitalGainOnDisposalAccountId()
    {
        return $this->container['defaultCapitalGainOnDisposalAccountId'];
    }

    /**
     * Sets defaultCapitalGainOnDisposalAccountId
     *
     * @param string|null $defaultCapitalGainOnDisposalAccountId Default account that capital gains are posted to
     *
     * @return $this
     */
    public function setDefaultCapitalGainOnDisposalAccountId($defaultCapitalGainOnDisposalAccountId)
    {
        $this->container['defaultCapitalGainOnDisposalAccountId'] = $defaultCapitalGainOnDisposalAccountId;

        return $this;
    }

    /**
     * Gets optInForTax
     *
     * @return bool|null
     */
    public function getOptInForTax()
    {
        return $this->container['optInForTax'];
    }

    /**
     * Sets optInForTax
     *
     * @param bool|null $optInForTax opt in for tax calculation
     *
     * @return $this
     */
    public function setOptInForTax($optInForTax)
    {
        $this->container['optInForTax'] = $optInForTax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
