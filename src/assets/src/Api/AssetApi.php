<?php

namespace Consilience\Xero\AssetsSdk\Api;

/**
 * AssetApi
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AssetsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Xero Assets API
 *
 * This the Xero Assets API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// PSR-18
use Psr\Http\Client\ClientInterface;
use Psr\Http\Client\RequestExceptionInterface;
use Psr\Http\Client\NetworkExceptionInterface;

// PSR-7
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;
use Psr\Http\Message\StreamInterface;

// PSR-17
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

// Guzzle
use GuzzleHttp\ClientInterface as GuzzleClientInterface;

use Consilience\Xero\AssetsSdk\ApiException;
use Consilience\Xero\AssetsSdk\Configuration;
use Consilience\Xero\AssetsSdk\HeaderSelector;
use Consilience\Xero\AssetsSdk\ObjectSerializer;

use InvalidArgumentException;

/**
 * AssetApi Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AssetsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetApi
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * FIXME: think about the client. We need a client that can handle both synchronous and
     * asynchronous requests. There is no PSR for asyn as yet, and implementations are so
     * diverse that we need to pick a specific implementaton (Guzzle, I guess). So do we
     * provide a wrapper that we can put one, the other, or both into? Even when there is a
     * PSR for promises, it will not be PSR-18, so we would still need two clients I believe.
     * The wrapper would support both interfaces for PSR-18 and whatever provides async requests.
     * We cannot do that with generator templates alone. We'll just add them to the configuration,
     * like the factories to avoid making this a blocker.
     *
     * @param ClientInterface|GuzzleClient $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->setConfig($config ?: new Configuration());
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function setConfig(Configuration $config)
    {
        $this->config = $config;
        return $this;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function withConfig(Configuration $config)
    {
        $clone = clone $this;
        return $clone->setConfig($config);
    }

    /**
     * Operation createAsset
     *
     * adds a fixed asset
     *
     * @param  \Consilience\Xero\AssetsSdk\Model\Asset $asset Fixed asset to add (required)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\AssetsSdk\Model\Asset
     */
    public function createAsset($asset)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->createAssetWithHttpInfo($asset);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation createAssetWithHttpInfo
     *
     * adds a fixed asset
     *
     * @param  \Consilience\Xero\AssetsSdk\Model\Asset $asset Fixed asset to add (required)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\AssetsSdk\Model\Asset, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssetWithHttpInfo($asset)
    {
        $request = $this->createAssetRequest($asset);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\AssetsSdk\Model\Asset'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\AssetsSdk\Model\Asset';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createAsset'
     *
     * @param  \Consilience\Xero\AssetsSdk\Model\Asset $asset Fixed asset to add (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createAssetRequest($asset)
    {
        // Verify the required parameter 'asset' is set

        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'asset',
                'createAsset'
            ));
        }

        $resourcePath = '/Assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($asset)) {
            $_tempBody = $asset;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createAssetType
     *
     * adds a fixed asset type
     *
     * @param  \Consilience\Xero\AssetsSdk\Model\AssetType $assetType Asset type to add (optional)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\AssetsSdk\Model\AssetType
     */
    public function createAssetType($assetType = null)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->createAssetTypeWithHttpInfo($assetType);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation createAssetTypeWithHttpInfo
     *
     * adds a fixed asset type
     *
     * @param  \Consilience\Xero\AssetsSdk\Model\AssetType $assetType Asset type to add (optional)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\AssetsSdk\Model\AssetType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssetTypeWithHttpInfo($assetType = null)
    {
        $request = $this->createAssetTypeRequest($assetType);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\AssetsSdk\Model\AssetType'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\AssetsSdk\Model\AssetType';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createAssetType'
     *
     * @param  \Consilience\Xero\AssetsSdk\Model\AssetType $assetType Asset type to add (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createAssetTypeRequest($assetType = null)
    {

        $resourcePath = '/AssetTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($assetType)) {
            $_tempBody = $assetType;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation getAssetById
     *
     * retrieves fixed asset by id
     *
     * @param  string $id fixed asset id for single object (required)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\AssetsSdk\Model\Asset
     */
    public function getAssetById($id)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getAssetByIdWithHttpInfo($id);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getAssetByIdWithHttpInfo
     *
     * retrieves fixed asset by id
     *
     * @param  string $id fixed asset id for single object (required)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\AssetsSdk\Model\Asset, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetByIdWithHttpInfo($id)
    {
        $request = $this->getAssetByIdRequest($id);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\AssetsSdk\Model\Asset'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\AssetsSdk\Model\Asset';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getAssetById'
     *
     * @param  string $id fixed asset id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getAssetByIdRequest($id)
    {
        // Verify the required parameter 'id' is set

        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'id',
                'getAssetById'
            ));
        }

        $resourcePath = '/Assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getAssetSettings
     *
     * searches fixed asset settings
     *
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\AssetsSdk\Model\Setting
     */
    public function getAssetSettings()
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getAssetSettingsWithHttpInfo();

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getAssetSettingsWithHttpInfo
     *
     * searches fixed asset settings
     *
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\AssetsSdk\Model\Setting, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetSettingsWithHttpInfo()
    {
        $request = $this->getAssetSettingsRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\AssetsSdk\Model\Setting'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\AssetsSdk\Model\Setting';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getAssetSettings'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getAssetSettingsRequest()
    {

        $resourcePath = '/Settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getAssetTypes
     *
     * searches fixed asset types
     *
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\AssetsSdk\Model\AssetType[]
     */
    public function getAssetTypes()
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getAssetTypesWithHttpInfo();

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getAssetTypesWithHttpInfo
     *
     * searches fixed asset types
     *
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\AssetsSdk\Model\AssetType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetTypesWithHttpInfo()
    {
        $request = $this->getAssetTypesRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\AssetsSdk\Model\AssetType[]'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\AssetsSdk\Model\AssetType[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getAssetTypes'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getAssetTypesRequest()
    {

        $resourcePath = '/AssetTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getAssets
     *
     * searches fixed asset
     *
     * @param  string $status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param  int $page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param  int $pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param  string $orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param  string $sortDirection ASC or DESC (optional)
     * @param  string $filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\AssetsSdk\Model\Assets
     */
    public function getAssets($status, $page = null, $pageSize = null, $orderBy = null, $sortDirection = null, $filterBy = null)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getAssetsWithHttpInfo($status, $page, $pageSize, $orderBy, $sortDirection, $filterBy);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getAssetsWithHttpInfo
     *
     * searches fixed asset
     *
     * @param  string $status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param  int $page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param  int $pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param  string $orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param  string $sortDirection ASC or DESC (optional)
     * @param  string $filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     *
     * @throws \Consilience\Xero\AssetsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\AssetsSdk\Model\Assets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetsWithHttpInfo($status, $page = null, $pageSize = null, $orderBy = null, $sortDirection = null, $filterBy = null)
    {
        $request = $this->getAssetsRequest($status, $page, $pageSize, $orderBy, $sortDirection, $filterBy);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\AssetsSdk\Model\Assets'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\AssetsSdk\Model\Assets';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getAssets'
     *
     * @param  string $status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param  int $page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param  int $pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param  string $orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param  string $sortDirection ASC or DESC (optional)
     * @param  string $filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getAssetsRequest($status, $page = null, $pageSize = null, $orderBy = null, $sortDirection = null, $filterBy = null)
    {
        // Verify the required parameter 'status' is set

        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'status',
                'getAssets'
            ));
        }

        $resourcePath = '/Assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy);
        }
        // query params
        if ($sortDirection !== null) {
            $queryParams['sortDirection'] = ObjectSerializer::toQueryValue($sortDirection);
        }
        // query params
        if ($filterBy !== null) {
            $queryParams['filterBy'] = ObjectSerializer::toQueryValue($filterBy);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }


    /**
     * Return a PSR-7 request.
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri): RequestInterface
    {
        // Get the factory from Configuration.

        $requestFactory = $this->config->getRequestFactory();

        return $requestFactory->createRequest($method, $uri);
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createUri(string $uri = ''): UriInterface
    {
        // Get the factory from Configuration.

        $uriFactory = $this->config->getUriFactory();

        return $uriFactory->createUri($uri);
    }

    /**
     * Get a synchronous client.
     */
    protected function getSyncClient(): ClientInterface
    {
        return $this->config->getSyncClient();
    }

    /**
     * Get an asynchronous client.
     */
    protected function getAsyncClient(): GuzzleClientInterface
    {
        return $this->config->getAsyncClient();
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createStream(string $content = ''): StreamInterface
    {
        // Get the factory from Configuration.

        $streamFactory = $this->config->getStreamFactory();

        return $streamFactory->createStream($content);
    }

    /**
    * Wrapper for JSON encoding that throws when an error occurs.
    *
    * @param mixed $value   The value being encoded
    * @param int    $options JSON encode option bitmask
    * @param int    $depth   Set the maximum depth. Must be greater than zero.
    *
    * @return string
    * @throws \InvalidArgumentException if the JSON cannot be encoded.
    * @link http://www.php.net/manual/en/function.json-encode.php
    */
    function jsonEncode($value, $options = 0, $depth = 512)
    {
        $json = \json_encode($value, $options, $depth);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new \InvalidArgumentException(
                'json_encode error: ' . json_last_error_msg()
            );
        }

        return $json;
    }

    /**
    * Safely opens a PHP stream resource using a filename.
    *
    * When fopen fails, PHP normally raises a warning. This function adds an
    * error handler that checks for errors and throws an exception instead.
    *
    * @param string $filename File to open
    * @param string $mode     Mode used to open the file
    *
    * @return resource
    * @throws \RuntimeException if the file cannot be opened
    */
    function tryFopen($filename, $mode)
    {
        $ex = null;
        set_error_handler(function () use ($filename, $mode, &$ex) {
            $ex = new \RuntimeException(sprintf(
                'Unable to open %s using mode %s: %s',
                $filename,
                $mode,
                func_get_args()[1]
            ));
        });

        $handle = fopen($filename, $mode);
        restore_error_handler();

        if ($ex) {
            /** @var $ex \RuntimeException */
            throw $ex;
        }

        return $handle;
    }

    /**
    * Build a query string from an array of key value pairs.
    *
    * This function can use the return value of parse_query() to build a query
    * string. This function does not modify the provided keys when an array is
    * encountered (like http_build_query would).
    *
    * @param array     $params   Query string parameters.
    * @param int|false $encoding Set to false to not encode, PHP_QUERY_RFC3986
    *                            to encode using RFC3986, or PHP_QUERY_RFC1738
    *                            to encode using RFC1738.
    * @return string
    */
    function buildQuery(array $params, $encoding = PHP_QUERY_RFC3986)
    {
        if (!$params) {
            return '';
        }
        if ($encoding === false) {
            $encoder = function ($str) { return $str; };
        } elseif ($encoding === PHP_QUERY_RFC3986) {
            $encoder = 'rawurlencode';
        } elseif ($encoding === PHP_QUERY_RFC1738) {
            $encoder = 'urlencode';
        } else {
            throw new \InvalidArgumentException('Invalid type');
        }
        $qs = '';
        foreach ($params as $k => $v) {
            $k = $encoder($k);
            if (!is_array($v)) {
                $qs .= $k;
                if ($v !== null) {
                    $qs .= '=' . $encoder($v);
                }
                $qs .= '&';
            } else {
                foreach ($v as $vv) {
                    $qs .= $k;
                    if ($vv !== null) {
                        $qs .= '=' . $encoder($vv);
                    }
                    $qs .= '&';
                }
            }
        }
        return $qs ? (string) substr($qs, 0, -1) : '';
    }

    function buildHttpRequest(
        array $headerParams,
        array $headers,
        array $queryParams,
        $httpBody,
        string $method,
        string $resourcePath
    ) {
        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $url = $this->createUri($this->config->getHost() . $resourcePath);

        if ($queryParams) {
            $url = $url->withQuery($this->buildQuery($queryParams));
        }

        $request = $this->createRequest($method, $url);

        if ($headers) {
            foreach ($headers as $name => $value) {
                $request = $request->withHeader($name, $value);
            }
        }

        // Add the body if set.

        if ($httpBody) {
            $request = $request->withBody($httpBody);
        }

        return $request;
    }
}
