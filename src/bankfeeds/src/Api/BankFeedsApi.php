<?php

namespace Consilience\Xero\BankfeedsSdk\Api;

/**
 * BankFeedsApi
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\BankfeedsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bank Feeds API
 *
 * The Xero Bank Feeds API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// PSR-18
use Psr\Http\Client\ClientInterface;
use Psr\Http\Client\RequestExceptionInterface;
use Psr\Http\Client\NetworkExceptionInterface;

// PSR-7
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;
use Psr\Http\Message\StreamInterface;

// PSR-17
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

// Guzzle
use GuzzleHttp\ClientInterface as GuzzleClientInterface;

use Consilience\Xero\BankfeedsSdk\ApiException;
use Consilience\Xero\BankfeedsSdk\Configuration;
use Consilience\Xero\BankfeedsSdk\HeaderSelector;
use Consilience\Xero\BankfeedsSdk\ObjectSerializer;

use InvalidArgumentException;

/**
 * BankFeedsApi Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\BankfeedsSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BankFeedsApi
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * FIXME: think about the client. We need a client that can handle both synchronous and
     * asynchronous requests. There is no PSR for asyn as yet, and implementations are so
     * diverse that we need to pick a specific implementaton (Guzzle, I guess). So do we
     * provide a wrapper that we can put one, the other, or both into? Even when there is a
     * PSR for promises, it will not be PSR-18, so we would still need two clients I believe.
     * The wrapper would support both interfaces for PSR-18 and whatever provides async requests.
     * We cannot do that with generator templates alone. We'll just add them to the configuration,
     * like the factories to avoid making this a blocker.
     *
     * @param ClientInterface|GuzzleClient $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->setConfig($config ?: new Configuration());
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function setConfig(Configuration $config)
    {
        $this->config = $config;
        return $this;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function withConfig(Configuration $config)
    {
        $clone = clone $this;
        return $clone->setConfig($config);
    }

    /**
     * Operation createFeedConnections
     *
     * create one or more new feed connection
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\FeedConnections $feedConnections Feed Connection(s) to add (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\FeedConnections
     */
    public function createFeedConnections($feedConnections)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->createFeedConnectionsWithHttpInfo($feedConnections);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation createFeedConnectionsWithHttpInfo
     *
     * create one or more new feed connection
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\FeedConnections $feedConnections Feed Connection(s) to add (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\FeedConnections, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFeedConnectionsWithHttpInfo($feedConnections)
    {
        $request = $this->createFeedConnectionsRequest($feedConnections);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 201:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\FeedConnections'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\FeedConnections';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createFeedConnections'
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\FeedConnections $feedConnections Feed Connection(s) to add (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createFeedConnectionsRequest($feedConnections)
    {
        // Verify the required parameter 'feedConnections' is set

        if ($feedConnections === null || (is_array($feedConnections) && count($feedConnections) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'feedConnections',
                'createFeedConnections'
            ));
        }

        $resourcePath = '/FeedConnections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($feedConnections)) {
            $_tempBody = $feedConnections;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createStatements
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\Statements $statements Feed Connection(s) to add (optional)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Error|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements
     */
    public function createStatements($statements = null)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->createStatementsWithHttpInfo($statements);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation createStatementsWithHttpInfo
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\Statements $statements Feed Connection(s) to add (optional)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Error|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStatementsWithHttpInfo($statements = null)
    {
        $request = $this->createStatementsRequest($statements);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 202:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
            case 400:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
            case 403:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Error'),
                    $request,
                    $response
                ];
            case 409:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
            case 413:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
            case 422:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
            case 500:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\Statements';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createStatements'
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\Statements $statements Feed Connection(s) to add (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createStatementsRequest($statements = null)
    {

        $resourcePath = '/Statements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($statements)) {
            $_tempBody = $statements;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                ['application/json']
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation deleteFeedConnections
     *
     * delete an exsiting feed connection
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\FeedConnections $feedConnections Feed Connections to delete (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\FeedConnections
     */
    public function deleteFeedConnections($feedConnections)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->deleteFeedConnectionsWithHttpInfo($feedConnections);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation deleteFeedConnectionsWithHttpInfo
     *
     * delete an exsiting feed connection
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\FeedConnections $feedConnections Feed Connections to delete (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\FeedConnections, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFeedConnectionsWithHttpInfo($feedConnections)
    {
        $request = $this->deleteFeedConnectionsRequest($feedConnections);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 202:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\FeedConnections'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\FeedConnections';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'deleteFeedConnections'
     *
     * @param  \Consilience\Xero\BankfeedsSdk\Model\FeedConnections $feedConnections Feed Connections to delete (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteFeedConnectionsRequest($feedConnections)
    {
        // Verify the required parameter 'feedConnections' is set

        if ($feedConnections === null || (is_array($feedConnections) && count($feedConnections) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'feedConnections',
                'deleteFeedConnections'
            ));
        }

        $resourcePath = '/FeedConnections/DeleteRequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($feedConnections)) {
            $_tempBody = $feedConnections;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation getFeedConnection
     *
     * get single feed connection by id
     *
     * @param  string $id feed connection id for single object (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\FeedConnection
     */
    public function getFeedConnection($id)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getFeedConnectionWithHttpInfo($id);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getFeedConnectionWithHttpInfo
     *
     * get single feed connection by id
     *
     * @param  string $id feed connection id for single object (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\FeedConnection, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeedConnectionWithHttpInfo($id)
    {
        $request = $this->getFeedConnectionRequest($id);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\FeedConnection'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\FeedConnection';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFeedConnection'
     *
     * @param  string $id feed connection id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFeedConnectionRequest($id)
    {
        // Verify the required parameter 'id' is set

        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'id',
                'getFeedConnection'
            ));
        }

        $resourcePath = '/FeedConnections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFeedConnections
     *
     * searches feed connections
     *
     * @param  int $page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param  int $pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\FeedConnections
     */
    public function getFeedConnections($page = null, $pageSize = null)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getFeedConnectionsWithHttpInfo($page, $pageSize);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getFeedConnectionsWithHttpInfo
     *
     * searches feed connections
     *
     * @param  int $page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param  int $pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\FeedConnections, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeedConnectionsWithHttpInfo($page = null, $pageSize = null)
    {
        $request = $this->getFeedConnectionsRequest($page, $pageSize);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 201:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\FeedConnections'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\FeedConnections';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFeedConnections'
     *
     * @param  int $page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param  int $pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFeedConnectionsRequest($page = null, $pageSize = null)
    {

        $resourcePath = '/FeedConnections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getStatement
     *
     * @param  string $statementId statementId (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\Statement
     */
    public function getStatement($statementId)
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getStatementWithHttpInfo($statementId);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getStatementWithHttpInfo
     *
     * @param  string $statementId (required)
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\Statement, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatementWithHttpInfo($statementId)
    {
        $request = $this->getStatementRequest($statementId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statement'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\Statement';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getStatement'
     *
     * @param  string $statementId (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getStatementRequest($statementId)
    {
        // Verify the required parameter 'statementId' is set

        if ($statementId === null || (is_array($statementId) && count($statementId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'statementId',
                'getStatement'
            ));
        }

        $resourcePath = '/Statements/{statementId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($statementId !== null) {
            $resourcePath = str_replace(
                '{' . 'statementId' . '}',
                ObjectSerializer::toPathValue($statementId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getStatements
     *
     * @param  int $page page (optional)
     * @param  int $pageSize pageSize (optional)
     * @param  string $xeroApplicationId xeroApplicationId (optional, default to '00000000-0000-0000-0000-0000000010000')
     * @param  string $xeroTenantId xeroTenantId (optional, default to '00000000-0000-0000-0000-0000020000000')
     * @param  string $xeroUserId xeroUserId (optional, default to '00000000-0000-0000-0000-0000030000000')
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements
     */
    public function getStatements($page = null, $pageSize = null, $xeroApplicationId = '00000000-0000-0000-0000-0000000010000', $xeroTenantId = '00000000-0000-0000-0000-0000020000000', $xeroUserId = '00000000-0000-0000-0000-0000030000000')
    {
        list($responseData, $requestMessage, $responseMessage) = $this->getStatementsWithHttpInfo($page, $pageSize, $xeroApplicationId, $xeroTenantId, $xeroUserId);

        $statusCode = (int)$responseMessage->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $requestMessage->getUri()
                ),
                $statusCode,
                $requestMessage,
                $responseMessage
            );
        }

        return $responseData;
    }

    /**
     * Operation getStatementsWithHttpInfo
     *
     * @param  int $page (optional)
     * @param  int $pageSize (optional)
     * @param  string $xeroApplicationId (optional, default to '00000000-0000-0000-0000-0000000010000')
     * @param  string $xeroTenantId (optional, default to '00000000-0000-0000-0000-0000020000000')
     * @param  string $xeroUserId (optional, default to '00000000-0000-0000-0000-0000030000000')
     *
     * @throws \Consilience\Xero\BankfeedsSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\BankfeedsSdk\Model\Statements|\Consilience\Xero\BankfeedsSdk\Model\Statements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatementsWithHttpInfo($page = null, $pageSize = null, $xeroApplicationId = '00000000-0000-0000-0000-0000000010000', $xeroTenantId = '00000000-0000-0000-0000-0000020000000', $xeroUserId = '00000000-0000-0000-0000-0000030000000')
    {
        $request = $this->getStatementsRequest($page, $pageSize, $xeroApplicationId, $xeroTenantId, $xeroUserId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();


        $responseBody = $response->getBody();

        switch($statusCode) {
            case 200:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
            case 400:
                return [
                    ObjectSerializer::deserialize($response, '\Consilience\Xero\BankfeedsSdk\Model\Statements'),
                    $request,
                    $response
                ];
        }

        $returnType = '\Consilience\Xero\BankfeedsSdk\Model\Statements';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getStatements'
     *
     * @param  int $page (optional)
     * @param  int $pageSize (optional)
     * @param  string $xeroApplicationId (optional, default to '00000000-0000-0000-0000-0000000010000')
     * @param  string $xeroTenantId (optional, default to '00000000-0000-0000-0000-0000020000000')
     * @param  string $xeroUserId (optional, default to '00000000-0000-0000-0000-0000030000000')
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getStatementsRequest($page = null, $pageSize = null, $xeroApplicationId = '00000000-0000-0000-0000-0000000010000', $xeroTenantId = '00000000-0000-0000-0000-0000020000000', $xeroUserId = '00000000-0000-0000-0000-0000030000000')
    {

        $resourcePath = '/Statements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // header params
        if ($xeroApplicationId !== null) {
            $headerParams['Xero-Application-Id'] = ObjectSerializer::toHeaderValue($xeroApplicationId);
        }
        // header params
        if ($xeroTenantId !== null) {
            $headerParams['Xero-Tenant-Id'] = ObjectSerializer::toHeaderValue($xeroTenantId);
        }
        // header params
        if ($xeroUserId !== null) {
            $headerParams['Xero-User-Id'] = ObjectSerializer::toHeaderValue($xeroUserId);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headerParams,
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }


    /**
     * Return a PSR-7 request.
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri): RequestInterface
    {
        // Get the factory from Configuration.

        $requestFactory = $this->config->getRequestFactory();

        return $requestFactory->createRequest($method, $uri);
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createUri(string $uri = ''): UriInterface
    {
        // Get the factory from Configuration.

        $uriFactory = $this->config->getUriFactory();

        return $uriFactory->createUri($uri);
    }

    /**
     * Get a synchronous client.
     */
    protected function getSyncClient(): ClientInterface
    {
        return $this->config->getSyncClient();
    }

    /**
     * Get an asynchronous client.
     */
    protected function getAsyncClient(): GuzzleClientInterface
    {
        return $this->config->getAsyncClient();
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createStream(string $content = ''): StreamInterface
    {
        // Get the factory from Configuration.

        $streamFactory = $this->config->getStreamFactory();

        return $streamFactory->createStream($content);
    }

    /**
    * Wrapper for JSON encoding that throws when an error occurs.
    *
    * @param mixed $value   The value being encoded
    * @param int    $options JSON encode option bitmask
    * @param int    $depth   Set the maximum depth. Must be greater than zero.
    *
    * @return string
    * @throws \InvalidArgumentException if the JSON cannot be encoded.
    * @link http://www.php.net/manual/en/function.json-encode.php
    */
    function jsonEncode($value, $options = 0, $depth = 512)
    {
        $json = \json_encode($value, $options, $depth);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new \InvalidArgumentException(
                'json_encode error: ' . json_last_error_msg()
            );
        }

        return $json;
    }

    /**
    * Safely opens a PHP stream resource using a filename.
    *
    * When fopen fails, PHP normally raises a warning. This function adds an
    * error handler that checks for errors and throws an exception instead.
    *
    * @param string $filename File to open
    * @param string $mode     Mode used to open the file
    *
    * @return resource
    * @throws \RuntimeException if the file cannot be opened
    */
    function tryFopen($filename, $mode)
    {
        $ex = null;
        set_error_handler(function () use ($filename, $mode, &$ex) {
            $ex = new \RuntimeException(sprintf(
                'Unable to open %s using mode %s: %s',
                $filename,
                $mode,
                func_get_args()[1]
            ));
        });

        $handle = fopen($filename, $mode);
        restore_error_handler();

        if ($ex) {
            /** @var $ex \RuntimeException */
            throw $ex;
        }

        return $handle;
    }

    /**
    * Build a query string from an array of key value pairs.
    *
    * This function can use the return value of parse_query() to build a query
    * string. This function does not modify the provided keys when an array is
    * encountered (like http_build_query would).
    *
    * @param array     $params   Query string parameters.
    * @param int|false $encoding Set to false to not encode, PHP_QUERY_RFC3986
    *                            to encode using RFC3986, or PHP_QUERY_RFC1738
    *                            to encode using RFC1738.
    * @return string
    */
    function buildQuery(array $params, $encoding = PHP_QUERY_RFC3986)
    {
        if (!$params) {
            return '';
        }
        if ($encoding === false) {
            $encoder = function ($str) { return $str; };
        } elseif ($encoding === PHP_QUERY_RFC3986) {
            $encoder = 'rawurlencode';
        } elseif ($encoding === PHP_QUERY_RFC1738) {
            $encoder = 'urlencode';
        } else {
            throw new \InvalidArgumentException('Invalid type');
        }
        $qs = '';
        foreach ($params as $k => $v) {
            $k = $encoder($k);
            if (!is_array($v)) {
                $qs .= $k;
                if ($v !== null) {
                    $qs .= '=' . $encoder($v);
                }
                $qs .= '&';
            } else {
                foreach ($v as $vv) {
                    $qs .= $k;
                    if ($vv !== null) {
                        $qs .= '=' . $encoder($vv);
                    }
                    $qs .= '&';
                }
            }
        }
        return $qs ? (string) substr($qs, 0, -1) : '';
    }

    function buildHttpRequest(
        array $headerParams,
        array $headers,
        array $queryParams,
        $httpBody,
        string $method,
        string $resourcePath
    ) {
        $defaultHeaders = [];

        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $url = $this->createUri($this->config->getHost() . $resourcePath);

        if ($queryParams) {
            $url = $url->withQuery($this->buildQuery($queryParams));
        }

        $request = $this->createRequest($method, $url);

        if ($headers) {
            foreach ($headers as $name => $value) {
                $request = $request->withHeader($name, $value);
            }
        }

        // Add the body if set.

        if ($httpBody) {
            $request = $request->withBody($httpBody);
        }

        return $request;
    }
}
