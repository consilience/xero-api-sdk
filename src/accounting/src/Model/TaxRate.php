<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * TaxRate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * TaxRate Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaxRate implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxRate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'taxType' => 'string',
        'taxComponents' => '\Consilience\Xero\AccountingSdk\Model\TaxComponent[]',
        'status' => 'string',
        'reportTaxType' => 'string',
        'canApplyToAssets' => 'bool',
        'canApplyToEquity' => 'bool',
        'canApplyToExpenses' => 'bool',
        'canApplyToLiabilities' => 'bool',
        'canApplyToRevenue' => 'bool',
        'displayTaxRate' => 'double',
        'effectiveRate' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'taxType' => null,
        'taxComponents' => null,
        'status' => null,
        'reportTaxType' => null,
        'canApplyToAssets' => null,
        'canApplyToEquity' => null,
        'canApplyToExpenses' => null,
        'canApplyToLiabilities' => null,
        'canApplyToRevenue' => null,
        'displayTaxRate' => 'double',
        'effectiveRate' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'taxType' => 'TaxType',
        'taxComponents' => 'TaxComponents',
        'status' => 'Status',
        'reportTaxType' => 'ReportTaxType',
        'canApplyToAssets' => 'CanApplyToAssets',
        'canApplyToEquity' => 'CanApplyToEquity',
        'canApplyToExpenses' => 'CanApplyToExpenses',
        'canApplyToLiabilities' => 'CanApplyToLiabilities',
        'canApplyToRevenue' => 'CanApplyToRevenue',
        'displayTaxRate' => 'DisplayTaxRate',
        'effectiveRate' => 'EffectiveRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'taxType' => 'setTaxType',
        'taxComponents' => 'setTaxComponents',
        'status' => 'setStatus',
        'reportTaxType' => 'setReportTaxType',
        'canApplyToAssets' => 'setCanApplyToAssets',
        'canApplyToEquity' => 'setCanApplyToEquity',
        'canApplyToExpenses' => 'setCanApplyToExpenses',
        'canApplyToLiabilities' => 'setCanApplyToLiabilities',
        'canApplyToRevenue' => 'setCanApplyToRevenue',
        'displayTaxRate' => 'setDisplayTaxRate',
        'effectiveRate' => 'setEffectiveRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'taxType' => 'getTaxType',
        'taxComponents' => 'getTaxComponents',
        'status' => 'getStatus',
        'reportTaxType' => 'getReportTaxType',
        'canApplyToAssets' => 'getCanApplyToAssets',
        'canApplyToEquity' => 'getCanApplyToEquity',
        'canApplyToExpenses' => 'getCanApplyToExpenses',
        'canApplyToLiabilities' => 'getCanApplyToLiabilities',
        'canApplyToRevenue' => 'getCanApplyToRevenue',
        'displayTaxRate' => 'getDisplayTaxRate',
        'effectiveRate' => 'getEffectiveRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_DELETED = 'DELETED';
    const STATUS_ARCHIVED = 'ARCHIVED';
    const REPORT_TAX_TYPE_OUTPUT = 'OUTPUT';
    const REPORT_TAX_TYPE_INPUT = 'INPUT';
    const REPORT_TAX_TYPE_EXEMPTOUTPUT = 'EXEMPTOUTPUT';
    const REPORT_TAX_TYPE_INPUTTAXED = 'INPUTTAXED';
    const REPORT_TAX_TYPE_BASEXCLUDED = 'BASEXCLUDED';
    const REPORT_TAX_TYPE_EXEMPTEXPENSES = 'EXEMPTEXPENSES';
    const REPORT_TAX_TYPE_EXEMPTINPUT = 'EXEMPTINPUT';
    const REPORT_TAX_TYPE_ECOUTPUT = 'ECOUTPUT';
    const REPORT_TAX_TYPE_ECOUTPUTSERVICES = 'ECOUTPUTSERVICES';
    const REPORT_TAX_TYPE_ECINPUT = 'ECINPUT';
    const REPORT_TAX_TYPE_ECACQUISITIONS = 'ECACQUISITIONS';
    const REPORT_TAX_TYPE_CAPITALSALESOUTPUT = 'CAPITALSALESOUTPUT';
    const REPORT_TAX_TYPE_CAPITALEXPENSESINPUT = 'CAPITALEXPENSESINPUT';
    const REPORT_TAX_TYPE_MOSSSALES = 'MOSSSALES';
    const REPORT_TAX_TYPE_NONE = 'NONE';
    const REPORT_TAX_TYPE_GSTONIMPORTS = 'GSTONIMPORTS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_DELETED,
            self::STATUS_ARCHIVED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportTaxTypeAllowableValues()
    {
        return [
            self::REPORT_TAX_TYPE_OUTPUT,
            self::REPORT_TAX_TYPE_INPUT,
            self::REPORT_TAX_TYPE_EXEMPTOUTPUT,
            self::REPORT_TAX_TYPE_INPUTTAXED,
            self::REPORT_TAX_TYPE_BASEXCLUDED,
            self::REPORT_TAX_TYPE_EXEMPTEXPENSES,
            self::REPORT_TAX_TYPE_EXEMPTINPUT,
            self::REPORT_TAX_TYPE_ECOUTPUT,
            self::REPORT_TAX_TYPE_ECOUTPUTSERVICES,
            self::REPORT_TAX_TYPE_ECINPUT,
            self::REPORT_TAX_TYPE_ECACQUISITIONS,
            self::REPORT_TAX_TYPE_CAPITALSALESOUTPUT,
            self::REPORT_TAX_TYPE_CAPITALEXPENSESINPUT,
            self::REPORT_TAX_TYPE_MOSSSALES,
            self::REPORT_TAX_TYPE_NONE,
            self::REPORT_TAX_TYPE_GSTONIMPORTS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['taxType'] = isset($data['taxType']) ? $data['taxType'] : null;
        $this->container['taxComponents'] = isset($data['taxComponents']) ? $data['taxComponents'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['reportTaxType'] = isset($data['reportTaxType']) ? $data['reportTaxType'] : null;
        $this->container['canApplyToAssets'] = isset($data['canApplyToAssets']) ? $data['canApplyToAssets'] : null;
        $this->container['canApplyToEquity'] = isset($data['canApplyToEquity']) ? $data['canApplyToEquity'] : null;
        $this->container['canApplyToExpenses'] = isset($data['canApplyToExpenses']) ? $data['canApplyToExpenses'] : null;
        $this->container['canApplyToLiabilities'] = isset($data['canApplyToLiabilities']) ? $data['canApplyToLiabilities'] : null;
        $this->container['canApplyToRevenue'] = isset($data['canApplyToRevenue']) ? $data['canApplyToRevenue'] : null;
        $this->container['displayTaxRate'] = isset($data['displayTaxRate']) ? $data['displayTaxRate'] : null;
        $this->container['effectiveRate'] = isset($data['effectiveRate']) ? $data['effectiveRate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reportTaxType'] === null) {
            $invalidProperties[] = "'reportTaxType' can't be null";
        }
        $allowedValues = $this->getReportTaxTypeAllowableValues();
        if (!is_null($this->container['reportTaxType']) && !in_array($this->container['reportTaxType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reportTaxType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of tax rate
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets taxType
     *
     * @return string|null
     */
    public function getTaxType()
    {
        return $this->container['taxType'];
    }

    /**
     * Sets taxType
     *
     * @param string|null $taxType The tax type
     *
     * @return $this
     */
    public function setTaxType($taxType)
    {
        $this->container['taxType'] = $taxType;

        return $this;
    }

    /**
     * Gets taxComponents
     *
     * @return \Consilience\Xero\AccountingSdk\Model\TaxComponent[]|null
     */
    public function getTaxComponents()
    {
        return $this->container['taxComponents'];
    }

    /**
     * Sets taxComponents
     *
     * @param \Consilience\Xero\AccountingSdk\Model\TaxComponent[]|null $taxComponents See TaxComponents
     *
     * @return $this
     */
    public function setTaxComponents($taxComponents)
    {
        $this->container['taxComponents'] = $taxComponents;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status See Status Codes
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reportTaxType
     *
     * @return string
     */
    public function getReportTaxType()
    {
        return $this->container['reportTaxType'];
    }

    /**
     * Sets reportTaxType
     *
     * @param string $reportTaxType See ReportTaxTypes
     *
     * @return $this
     */
    public function setReportTaxType($reportTaxType)
    {
        $allowedValues = $this->getReportTaxTypeAllowableValues();
        if (!in_array($reportTaxType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reportTaxType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reportTaxType'] = $reportTaxType;

        return $this;
    }

    /**
     * Gets canApplyToAssets
     *
     * @return bool|null
     */
    public function getCanApplyToAssets()
    {
        return $this->container['canApplyToAssets'];
    }

    /**
     * Sets canApplyToAssets
     *
     * @param bool|null $canApplyToAssets Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
     *
     * @return $this
     */
    public function setCanApplyToAssets($canApplyToAssets)
    {
        $this->container['canApplyToAssets'] = $canApplyToAssets;

        return $this;
    }

    /**
     * Gets canApplyToEquity
     *
     * @return bool|null
     */
    public function getCanApplyToEquity()
    {
        return $this->container['canApplyToEquity'];
    }

    /**
     * Sets canApplyToEquity
     *
     * @param bool|null $canApplyToEquity Boolean to describe if tax rate can be used for equity accounts i.e true,false
     *
     * @return $this
     */
    public function setCanApplyToEquity($canApplyToEquity)
    {
        $this->container['canApplyToEquity'] = $canApplyToEquity;

        return $this;
    }

    /**
     * Gets canApplyToExpenses
     *
     * @return bool|null
     */
    public function getCanApplyToExpenses()
    {
        return $this->container['canApplyToExpenses'];
    }

    /**
     * Sets canApplyToExpenses
     *
     * @param bool|null $canApplyToExpenses Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
     *
     * @return $this
     */
    public function setCanApplyToExpenses($canApplyToExpenses)
    {
        $this->container['canApplyToExpenses'] = $canApplyToExpenses;

        return $this;
    }

    /**
     * Gets canApplyToLiabilities
     *
     * @return bool|null
     */
    public function getCanApplyToLiabilities()
    {
        return $this->container['canApplyToLiabilities'];
    }

    /**
     * Sets canApplyToLiabilities
     *
     * @param bool|null $canApplyToLiabilities Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
     *
     * @return $this
     */
    public function setCanApplyToLiabilities($canApplyToLiabilities)
    {
        $this->container['canApplyToLiabilities'] = $canApplyToLiabilities;

        return $this;
    }

    /**
     * Gets canApplyToRevenue
     *
     * @return bool|null
     */
    public function getCanApplyToRevenue()
    {
        return $this->container['canApplyToRevenue'];
    }

    /**
     * Sets canApplyToRevenue
     *
     * @param bool|null $canApplyToRevenue Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
     *
     * @return $this
     */
    public function setCanApplyToRevenue($canApplyToRevenue)
    {
        $this->container['canApplyToRevenue'] = $canApplyToRevenue;

        return $this;
    }

    /**
     * Gets displayTaxRate
     *
     * @return double|null
     */
    public function getDisplayTaxRate()
    {
        return $this->container['displayTaxRate'];
    }

    /**
     * Sets displayTaxRate
     *
     * @param double|null $displayTaxRate Tax Rate (decimal to 4dp) e.g 12.5000
     *
     * @return $this
     */
    public function setDisplayTaxRate($displayTaxRate)
    {
        $this->container['displayTaxRate'] = $displayTaxRate;

        return $this;
    }

    /**
     * Gets effectiveRate
     *
     * @return double|null
     */
    public function getEffectiveRate()
    {
        return $this->container['effectiveRate'];
    }

    /**
     * Sets effectiveRate
     *
     * @param double|null $effectiveRate Effective Tax Rate (decimal to 4dp) e.g 12.5000
     *
     * @return $this
     */
    public function setEffectiveRate($effectiveRate)
    {
        $this->container['effectiveRate'] = $effectiveRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
