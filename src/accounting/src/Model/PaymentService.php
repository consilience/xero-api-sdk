<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * PaymentService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * PaymentService Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentService implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentServiceID' => 'string',
        'paymentServiceName' => 'string',
        'paymentServiceUrl' => 'string',
        'payNowText' => 'string',
        'paymentServiceType' => 'string',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'paymentServiceID' => 'uuid',
        'paymentServiceName' => null,
        'paymentServiceUrl' => null,
        'payNowText' => null,
        'paymentServiceType' => null,
        'validationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentServiceID' => 'PaymentServiceID',
        'paymentServiceName' => 'PaymentServiceName',
        'paymentServiceUrl' => 'PaymentServiceUrl',
        'payNowText' => 'PayNowText',
        'paymentServiceType' => 'PaymentServiceType',
        'validationErrors' => 'ValidationErrors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentServiceID' => 'setPaymentServiceID',
        'paymentServiceName' => 'setPaymentServiceName',
        'paymentServiceUrl' => 'setPaymentServiceUrl',
        'payNowText' => 'setPayNowText',
        'paymentServiceType' => 'setPaymentServiceType',
        'validationErrors' => 'setValidationErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentServiceID' => 'getPaymentServiceID',
        'paymentServiceName' => 'getPaymentServiceName',
        'paymentServiceUrl' => 'getPaymentServiceUrl',
        'payNowText' => 'getPayNowText',
        'paymentServiceType' => 'getPaymentServiceType',
        'validationErrors' => 'getValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paymentServiceID'] = isset($data['paymentServiceID']) ? $data['paymentServiceID'] : null;
        $this->container['paymentServiceName'] = isset($data['paymentServiceName']) ? $data['paymentServiceName'] : null;
        $this->container['paymentServiceUrl'] = isset($data['paymentServiceUrl']) ? $data['paymentServiceUrl'] : null;
        $this->container['payNowText'] = isset($data['payNowText']) ? $data['payNowText'] : null;
        $this->container['paymentServiceType'] = isset($data['paymentServiceType']) ? $data['paymentServiceType'] : null;
        $this->container['validationErrors'] = isset($data['validationErrors']) ? $data['validationErrors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentServiceID
     *
     * @return string|null
     */
    public function getPaymentServiceID()
    {
        return $this->container['paymentServiceID'];
    }

    /**
     * Sets paymentServiceID
     *
     * @param string|null $paymentServiceID Xero identifier
     *
     * @return $this
     */
    public function setPaymentServiceID($paymentServiceID)
    {
        $this->container['paymentServiceID'] = $paymentServiceID;

        return $this;
    }

    /**
     * Gets paymentServiceName
     *
     * @return string|null
     */
    public function getPaymentServiceName()
    {
        return $this->container['paymentServiceName'];
    }

    /**
     * Sets paymentServiceName
     *
     * @param string|null $paymentServiceName Name of payment service
     *
     * @return $this
     */
    public function setPaymentServiceName($paymentServiceName)
    {
        $this->container['paymentServiceName'] = $paymentServiceName;

        return $this;
    }

    /**
     * Gets paymentServiceUrl
     *
     * @return string|null
     */
    public function getPaymentServiceUrl()
    {
        return $this->container['paymentServiceUrl'];
    }

    /**
     * Sets paymentServiceUrl
     *
     * @param string|null $paymentServiceUrl The custom payment URL
     *
     * @return $this
     */
    public function setPaymentServiceUrl($paymentServiceUrl)
    {
        $this->container['paymentServiceUrl'] = $paymentServiceUrl;

        return $this;
    }

    /**
     * Gets payNowText
     *
     * @return string|null
     */
    public function getPayNowText()
    {
        return $this->container['payNowText'];
    }

    /**
     * Sets payNowText
     *
     * @param string|null $payNowText The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card
     *
     * @return $this
     */
    public function setPayNowText($payNowText)
    {
        $this->container['payNowText'] = $payNowText;

        return $this;
    }

    /**
     * Gets paymentServiceType
     *
     * @return string|null
     */
    public function getPaymentServiceType()
    {
        return $this->container['paymentServiceType'];
    }

    /**
     * Sets paymentServiceType
     *
     * @param string|null $paymentServiceType This will always be CUSTOM for payment services created via the API.
     *
     * @return $this
     */
    public function setPaymentServiceType($paymentServiceType)
    {
        $this->container['paymentServiceType'] = $paymentServiceType;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->container['validationErrors'];
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
