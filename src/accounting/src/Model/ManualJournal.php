<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * ManualJournal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * ManualJournal Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManualJournal implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ManualJournal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'narration' => 'string',
        'journalLines' => '\Consilience\Xero\AccountingSdk\Model\ManualJournalLine[]',
        'date' => '\DateTime',
        'lineAmountTypes' => '\Consilience\Xero\AccountingSdk\Model\LineAmountTypes',
        'status' => 'string',
        'url' => 'string',
        'showOnCashBasisReports' => 'bool',
        'hasAttachments' => 'bool',
        'updatedDateUTC' => '\DateTime',
        'manualJournalID' => 'string',
        'warnings' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]',
        'attachments' => '\Consilience\Xero\AccountingSdk\Model\Attachment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'narration' => null,
        'journalLines' => null,
        'date' => 'date',
        'lineAmountTypes' => null,
        'status' => null,
        'url' => null,
        'showOnCashBasisReports' => null,
        'hasAttachments' => null,
        'updatedDateUTC' => 'date-time',
        'manualJournalID' => 'uuid',
        'warnings' => null,
        'validationErrors' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'narration' => 'Narration',
        'journalLines' => 'JournalLines',
        'date' => 'Date',
        'lineAmountTypes' => 'LineAmountTypes',
        'status' => 'Status',
        'url' => 'Url',
        'showOnCashBasisReports' => 'ShowOnCashBasisReports',
        'hasAttachments' => 'HasAttachments',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'manualJournalID' => 'ManualJournalID',
        'warnings' => 'Warnings',
        'validationErrors' => 'ValidationErrors',
        'attachments' => 'Attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'narration' => 'setNarration',
        'journalLines' => 'setJournalLines',
        'date' => 'setDate',
        'lineAmountTypes' => 'setLineAmountTypes',
        'status' => 'setStatus',
        'url' => 'setUrl',
        'showOnCashBasisReports' => 'setShowOnCashBasisReports',
        'hasAttachments' => 'setHasAttachments',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'manualJournalID' => 'setManualJournalID',
        'warnings' => 'setWarnings',
        'validationErrors' => 'setValidationErrors',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'narration' => 'getNarration',
        'journalLines' => 'getJournalLines',
        'date' => 'getDate',
        'lineAmountTypes' => 'getLineAmountTypes',
        'status' => 'getStatus',
        'url' => 'getUrl',
        'showOnCashBasisReports' => 'getShowOnCashBasisReports',
        'hasAttachments' => 'getHasAttachments',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'manualJournalID' => 'getManualJournalID',
        'warnings' => 'getWarnings',
        'validationErrors' => 'getValidationErrors',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DRAFT = 'DRAFT';
    const STATUS_POSTED = 'POSTED';
    const STATUS_DELETED = 'DELETED';
    const STATUS_VOIDED = 'VOIDED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_POSTED,
            self::STATUS_DELETED,
            self::STATUS_VOIDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['narration'] = isset($data['narration']) ? $data['narration'] : null;
        $this->container['journalLines'] = isset($data['journalLines']) ? $data['journalLines'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['lineAmountTypes'] = isset($data['lineAmountTypes']) ? $data['lineAmountTypes'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['showOnCashBasisReports'] = isset($data['showOnCashBasisReports']) ? $data['showOnCashBasisReports'] : null;
        $this->container['hasAttachments'] = isset($data['hasAttachments']) ? $data['hasAttachments'] : null;
        $this->container['updatedDateUTC'] = isset($data['updatedDateUTC']) ? $data['updatedDateUTC'] : null;
        $this->container['manualJournalID'] = isset($data['manualJournalID']) ? $data['manualJournalID'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
        $this->container['validationErrors'] = isset($data['validationErrors']) ? $data['validationErrors'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['narration'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'narration');
        }
        if ($this->container['journalLines'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'journalLines');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'status',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets narration
     *
     * @return string
     */
    public function getNarration()
    {
        return $this->container['narration'];
    }

    /**
     * Sets narration
     *
     * @param string $narration Description of journal being posted
     *
     * @return $this
     */
    public function setNarration($narration)
    {
        $this->container['narration'] = $narration;

        return $this;
    }

    /**
     * Gets journalLines
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ManualJournalLine[]
     */
    public function getJournalLines()
    {
        return $this->container['journalLines'];
    }

    /**
     * Sets journalLines
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ManualJournalLine[] $journalLines See JournalLines
     *
     * @return $this
     */
    public function setJournalLines($journalLines)
    {
        $this->container['journalLines'] = $journalLines;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date journal was posted – YYYY-MM-DD
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets lineAmountTypes
     *
     * @return \Consilience\Xero\AccountingSdk\Model\LineAmountTypes|null
     */
    public function getLineAmountTypes()
    {
        return $this->container['lineAmountTypes'];
    }

    /**
     * Sets lineAmountTypes
     *
     * @param \Consilience\Xero\AccountingSdk\Model\LineAmountTypes|null $lineAmountTypes lineAmountTypes
     *
     * @return $this
     */
    public function setLineAmountTypes($lineAmountTypes)
    {
        $this->container['lineAmountTypes'] = $lineAmountTypes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status See Manual Journal Status Codes
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'status',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Url link to a source document – shown as “Go to [appName]” in the Xero app
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets showOnCashBasisReports
     *
     * @return bool|null
     */
    public function getShowOnCashBasisReports()
    {
        return $this->container['showOnCashBasisReports'];
    }

    /**
     * Sets showOnCashBasisReports
     *
     * @param bool|null $showOnCashBasisReports Boolean – default is true if not specified
     *
     * @return $this
     */
    public function setShowOnCashBasisReports($showOnCashBasisReports)
    {
        $this->container['showOnCashBasisReports'] = $showOnCashBasisReports;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments()
    {
        return $this->container['hasAttachments'];
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments Boolean to indicate if a manual journal has an attachment
     *
     * @return $this
     */
    public function setHasAttachments($hasAttachments)
    {
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->container['updatedDateUTC'];
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified date UTC format
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets manualJournalID
     *
     * @return string|null
     */
    public function getManualJournalID()
    {
        return $this->container['manualJournalID'];
    }

    /**
     * Sets manualJournalID
     *
     * @param string|null $manualJournalID The Xero identifier for a Manual Journal
     *
     * @return $this
     */
    public function setManualJournalID($manualJournalID)
    {
        $this->container['manualJournalID'] = $manualJournalID;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $warnings Displays array of warning messages from the API
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->container['validationErrors'];
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Attachment[]|null $attachments Displays array of attachments from the API
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
