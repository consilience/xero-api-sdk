<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * Organisation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * Organisation Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Organisation implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Organisation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organisationID' => 'string',
        'aPIKey' => 'string',
        'name' => 'string',
        'legalName' => 'string',
        'paysTax' => 'bool',
        'version' => 'string',
        'organisationType' => 'string',
        'baseCurrency' => '\Consilience\Xero\AccountingSdk\Model\CurrencyCode',
        'countryCode' => '\Consilience\Xero\AccountingSdk\Model\CountryCode',
        'isDemoCompany' => 'bool',
        'organisationStatus' => 'string',
        'registrationNumber' => 'string',
        'taxNumber' => 'string',
        'financialYearEndDay' => 'int',
        'financialYearEndMonth' => 'int',
        'salesTaxBasis' => 'string',
        'salesTaxPeriod' => 'string',
        'defaultSalesTax' => 'string',
        'defaultPurchasesTax' => 'string',
        'periodLockDate' => '\DateTime',
        'endOfYearLockDate' => '\DateTime',
        'createdDateUTC' => '\DateTime',
        'timezone' => '\Consilience\Xero\AccountingSdk\Model\TimeZone',
        'organisationEntityType' => 'string',
        'shortCode' => 'string',
        'class' => 'string',
        'edition' => 'string',
        'lineOfBusiness' => 'string',
        'addresses' => '\Consilience\Xero\AccountingSdk\Model\Address[]',
        'phones' => '\Consilience\Xero\AccountingSdk\Model\Phone[]',
        'externalLinks' => '\Consilience\Xero\AccountingSdk\Model\ExternalLink[]',
        'paymentTerms' => '\Consilience\Xero\AccountingSdk\Model\PaymentTerm'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'organisationID' => 'uuid',
        'aPIKey' => null,
        'name' => null,
        'legalName' => null,
        'paysTax' => null,
        'version' => null,
        'organisationType' => null,
        'baseCurrency' => null,
        'countryCode' => null,
        'isDemoCompany' => null,
        'organisationStatus' => null,
        'registrationNumber' => null,
        'taxNumber' => null,
        'financialYearEndDay' => null,
        'financialYearEndMonth' => null,
        'salesTaxBasis' => null,
        'salesTaxPeriod' => null,
        'defaultSalesTax' => null,
        'defaultPurchasesTax' => null,
        'periodLockDate' => 'date',
        'endOfYearLockDate' => 'date',
        'createdDateUTC' => 'date-time',
        'timezone' => null,
        'organisationEntityType' => null,
        'shortCode' => null,
        'class' => null,
        'edition' => null,
        'lineOfBusiness' => null,
        'addresses' => null,
        'phones' => null,
        'externalLinks' => null,
        'paymentTerms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organisationID' => 'OrganisationID',
        'aPIKey' => 'APIKey',
        'name' => 'Name',
        'legalName' => 'LegalName',
        'paysTax' => 'PaysTax',
        'version' => 'Version',
        'organisationType' => 'OrganisationType',
        'baseCurrency' => 'BaseCurrency',
        'countryCode' => 'CountryCode',
        'isDemoCompany' => 'IsDemoCompany',
        'organisationStatus' => 'OrganisationStatus',
        'registrationNumber' => 'RegistrationNumber',
        'taxNumber' => 'TaxNumber',
        'financialYearEndDay' => 'FinancialYearEndDay',
        'financialYearEndMonth' => 'FinancialYearEndMonth',
        'salesTaxBasis' => 'SalesTaxBasis',
        'salesTaxPeriod' => 'SalesTaxPeriod',
        'defaultSalesTax' => 'DefaultSalesTax',
        'defaultPurchasesTax' => 'DefaultPurchasesTax',
        'periodLockDate' => 'PeriodLockDate',
        'endOfYearLockDate' => 'EndOfYearLockDate',
        'createdDateUTC' => 'CreatedDateUTC',
        'timezone' => 'Timezone',
        'organisationEntityType' => 'OrganisationEntityType',
        'shortCode' => 'ShortCode',
        'class' => 'Class',
        'edition' => 'Edition',
        'lineOfBusiness' => 'LineOfBusiness',
        'addresses' => 'Addresses',
        'phones' => 'Phones',
        'externalLinks' => 'ExternalLinks',
        'paymentTerms' => 'PaymentTerms'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'organisationID' => 'setOrganisationID',
        'aPIKey' => 'setAPIKey',
        'name' => 'setName',
        'legalName' => 'setLegalName',
        'paysTax' => 'setPaysTax',
        'version' => 'setVersion',
        'organisationType' => 'setOrganisationType',
        'baseCurrency' => 'setBaseCurrency',
        'countryCode' => 'setCountryCode',
        'isDemoCompany' => 'setIsDemoCompany',
        'organisationStatus' => 'setOrganisationStatus',
        'registrationNumber' => 'setRegistrationNumber',
        'taxNumber' => 'setTaxNumber',
        'financialYearEndDay' => 'setFinancialYearEndDay',
        'financialYearEndMonth' => 'setFinancialYearEndMonth',
        'salesTaxBasis' => 'setSalesTaxBasis',
        'salesTaxPeriod' => 'setSalesTaxPeriod',
        'defaultSalesTax' => 'setDefaultSalesTax',
        'defaultPurchasesTax' => 'setDefaultPurchasesTax',
        'periodLockDate' => 'setPeriodLockDate',
        'endOfYearLockDate' => 'setEndOfYearLockDate',
        'createdDateUTC' => 'setCreatedDateUTC',
        'timezone' => 'setTimezone',
        'organisationEntityType' => 'setOrganisationEntityType',
        'shortCode' => 'setShortCode',
        'class' => 'setClass',
        'edition' => 'setEdition',
        'lineOfBusiness' => 'setLineOfBusiness',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'externalLinks' => 'setExternalLinks',
        'paymentTerms' => 'setPaymentTerms'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'organisationID' => 'getOrganisationID',
        'aPIKey' => 'getAPIKey',
        'name' => 'getName',
        'legalName' => 'getLegalName',
        'paysTax' => 'getPaysTax',
        'version' => 'getVersion',
        'organisationType' => 'getOrganisationType',
        'baseCurrency' => 'getBaseCurrency',
        'countryCode' => 'getCountryCode',
        'isDemoCompany' => 'getIsDemoCompany',
        'organisationStatus' => 'getOrganisationStatus',
        'registrationNumber' => 'getRegistrationNumber',
        'taxNumber' => 'getTaxNumber',
        'financialYearEndDay' => 'getFinancialYearEndDay',
        'financialYearEndMonth' => 'getFinancialYearEndMonth',
        'salesTaxBasis' => 'getSalesTaxBasis',
        'salesTaxPeriod' => 'getSalesTaxPeriod',
        'defaultSalesTax' => 'getDefaultSalesTax',
        'defaultPurchasesTax' => 'getDefaultPurchasesTax',
        'periodLockDate' => 'getPeriodLockDate',
        'endOfYearLockDate' => 'getEndOfYearLockDate',
        'createdDateUTC' => 'getCreatedDateUTC',
        'timezone' => 'getTimezone',
        'organisationEntityType' => 'getOrganisationEntityType',
        'shortCode' => 'getShortCode',
        'class' => 'getClass',
        'edition' => 'getEdition',
        'lineOfBusiness' => 'getLineOfBusiness',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'externalLinks' => 'getExternalLinks',
        'paymentTerms' => 'getPaymentTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VERSION_AU = 'AU';
    const VERSION_NZ = 'NZ';
    const VERSION__GLOBAL = 'GLOBAL';
    const VERSION_UK = 'UK';
    const VERSION_US = 'US';
    const VERSION_AUONRAMP = 'AUONRAMP';
    const VERSION_NZONRAMP = 'NZONRAMP';
    const VERSION_GLOBALONRAMP = 'GLOBALONRAMP';
    const VERSION_UKONRAMP = 'UKONRAMP';
    const VERSION_USONRAMP = 'USONRAMP';const ORGANISATION_TYPE_COMPANY = 'COMPANY';
    const ORGANISATION_TYPE_CHARITY = 'CHARITY';
    const ORGANISATION_TYPE_CLUBSOCIETY = 'CLUBSOCIETY';
    const ORGANISATION_TYPE_PARTNERSHIP = 'PARTNERSHIP';
    const ORGANISATION_TYPE_PRACTICE = 'PRACTICE';
    const ORGANISATION_TYPE_PERSON = 'PERSON';
    const ORGANISATION_TYPE_SOLETRADER = 'SOLETRADER';
    const ORGANISATION_TYPE_TRUST = 'TRUST';const SALES_TAX_BASIS_PAYMENTS = 'PAYMENTS';
    const SALES_TAX_BASIS_INVOICE = 'INVOICE';
    const SALES_TAX_BASIS_NONE = 'NONE';
    const SALES_TAX_BASIS_CASH = 'CASH';
    const SALES_TAX_BASIS_ACCRUAL = 'ACCRUAL';
    const SALES_TAX_BASIS_FLATRATECASH = 'FLATRATECASH';
    const SALES_TAX_BASIS_FLATRATEACCRUAL = 'FLATRATEACCRUAL';
    const SALES_TAX_BASIS_ACCRUALS = 'ACCRUALS';const SALES_TAX_PERIOD_MONTHLY = 'MONTHLY';
    const SALES_TAX_PERIOD_QUARTERLY1 = 'QUARTERLY1';
    const SALES_TAX_PERIOD_QUARTERLY2 = 'QUARTERLY2';
    const SALES_TAX_PERIOD_QUARTERLY3 = 'QUARTERLY3';
    const SALES_TAX_PERIOD_ANNUALLY = 'ANNUALLY';
    const SALES_TAX_PERIOD_ONEMONTHS = 'ONEMONTHS';
    const SALES_TAX_PERIOD_TWOMONTHS = 'TWOMONTHS';
    const SALES_TAX_PERIOD_SIXMONTHS = 'SIXMONTHS';
    const SALES_TAX_PERIOD__1_MONTHLY = '1MONTHLY';
    const SALES_TAX_PERIOD__2_MONTHLY = '2MONTHLY';
    const SALES_TAX_PERIOD__3_MONTHLY = '3MONTHLY';
    const SALES_TAX_PERIOD__6_MONTHLY = '6MONTHLY';
    const SALES_TAX_PERIOD_QUARTERLY = 'QUARTERLY';
    const SALES_TAX_PERIOD_YEARLY = 'YEARLY';const ORGANISATION_ENTITY_TYPE_COMPANY = 'COMPANY';
    const ORGANISATION_ENTITY_TYPE_CHARITY = 'CHARITY';
    const ORGANISATION_ENTITY_TYPE_CLUBSOCIETY = 'CLUBSOCIETY';
    const ORGANISATION_ENTITY_TYPE_PARTNERSHIP = 'PARTNERSHIP';
    const ORGANISATION_ENTITY_TYPE_PRACTICE = 'PRACTICE';
    const ORGANISATION_ENTITY_TYPE_PERSON = 'PERSON';
    const ORGANISATION_ENTITY_TYPE_SOLETRADER = 'SOLETRADER';
    const ORGANISATION_ENTITY_TYPE_TRUST = 'TRUST';const MODEL_CLASS_DEMO = 'DEMO';
    const MODEL_CLASS_TRIAL = 'TRIAL';
    const MODEL_CLASS_STARTER = 'STARTER';
    const MODEL_CLASS_STANDARD = 'STANDARD';
    const MODEL_CLASS_PREMIUM = 'PREMIUM';
    const MODEL_CLASS_PREMIUM_20 = 'PREMIUM_20';
    const MODEL_CLASS_PREMIUM_50 = 'PREMIUM_50';
    const MODEL_CLASS_PREMIUM_100 = 'PREMIUM_100';
    const MODEL_CLASS_LEDGER = 'LEDGER';
    const MODEL_CLASS_GST_CASHBOOK = 'GST_CASHBOOK';
    const MODEL_CLASS_NON_GST_CASHBOOK = 'NON_GST_CASHBOOK';const EDITION_BUSINESS = 'BUSINESS';
    const EDITION_PARTNER = 'PARTNER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionAllowableValues()
    {
        return [
            self::VERSION_AU,
            self::VERSION_NZ,
            self::VERSION__GLOBAL,
            self::VERSION_UK,
            self::VERSION_US,
            self::VERSION_AUONRAMP,
            self::VERSION_NZONRAMP,
            self::VERSION_GLOBALONRAMP,
            self::VERSION_UKONRAMP,
            self::VERSION_USONRAMP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganisationTypeAllowableValues()
    {
        return [
            self::ORGANISATION_TYPE_COMPANY,
            self::ORGANISATION_TYPE_CHARITY,
            self::ORGANISATION_TYPE_CLUBSOCIETY,
            self::ORGANISATION_TYPE_PARTNERSHIP,
            self::ORGANISATION_TYPE_PRACTICE,
            self::ORGANISATION_TYPE_PERSON,
            self::ORGANISATION_TYPE_SOLETRADER,
            self::ORGANISATION_TYPE_TRUST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesTaxBasisAllowableValues()
    {
        return [
            self::SALES_TAX_BASIS_PAYMENTS,
            self::SALES_TAX_BASIS_INVOICE,
            self::SALES_TAX_BASIS_NONE,
            self::SALES_TAX_BASIS_CASH,
            self::SALES_TAX_BASIS_ACCRUAL,
            self::SALES_TAX_BASIS_FLATRATECASH,
            self::SALES_TAX_BASIS_FLATRATEACCRUAL,
            self::SALES_TAX_BASIS_ACCRUALS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesTaxPeriodAllowableValues()
    {
        return [
            self::SALES_TAX_PERIOD_MONTHLY,
            self::SALES_TAX_PERIOD_QUARTERLY1,
            self::SALES_TAX_PERIOD_QUARTERLY2,
            self::SALES_TAX_PERIOD_QUARTERLY3,
            self::SALES_TAX_PERIOD_ANNUALLY,
            self::SALES_TAX_PERIOD_ONEMONTHS,
            self::SALES_TAX_PERIOD_TWOMONTHS,
            self::SALES_TAX_PERIOD_SIXMONTHS,
            self::SALES_TAX_PERIOD__1_MONTHLY,
            self::SALES_TAX_PERIOD__2_MONTHLY,
            self::SALES_TAX_PERIOD__3_MONTHLY,
            self::SALES_TAX_PERIOD__6_MONTHLY,
            self::SALES_TAX_PERIOD_QUARTERLY,
            self::SALES_TAX_PERIOD_YEARLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganisationEntityTypeAllowableValues()
    {
        return [
            self::ORGANISATION_ENTITY_TYPE_COMPANY,
            self::ORGANISATION_ENTITY_TYPE_CHARITY,
            self::ORGANISATION_ENTITY_TYPE_CLUBSOCIETY,
            self::ORGANISATION_ENTITY_TYPE_PARTNERSHIP,
            self::ORGANISATION_ENTITY_TYPE_PRACTICE,
            self::ORGANISATION_ENTITY_TYPE_PERSON,
            self::ORGANISATION_ENTITY_TYPE_SOLETRADER,
            self::ORGANISATION_ENTITY_TYPE_TRUST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassAllowableValues()
    {
        return [
            self::MODEL_CLASS_DEMO,
            self::MODEL_CLASS_TRIAL,
            self::MODEL_CLASS_STARTER,
            self::MODEL_CLASS_STANDARD,
            self::MODEL_CLASS_PREMIUM,
            self::MODEL_CLASS_PREMIUM_20,
            self::MODEL_CLASS_PREMIUM_50,
            self::MODEL_CLASS_PREMIUM_100,
            self::MODEL_CLASS_LEDGER,
            self::MODEL_CLASS_GST_CASHBOOK,
            self::MODEL_CLASS_NON_GST_CASHBOOK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEditionAllowableValues()
    {
        return [
            self::EDITION_BUSINESS,
            self::EDITION_PARTNER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organisationID'] = $data['organisationID'] ?? null;
        $this->container['aPIKey'] = $data['aPIKey'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['legalName'] = $data['legalName'] ?? null;
        $this->container['paysTax'] = $data['paysTax'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['organisationType'] = $data['organisationType'] ?? null;
        $this->container['baseCurrency'] = $data['baseCurrency'] ?? null;
        $this->container['countryCode'] = $data['countryCode'] ?? null;
        $this->container['isDemoCompany'] = $data['isDemoCompany'] ?? null;
        $this->container['organisationStatus'] = $data['organisationStatus'] ?? null;
        $this->container['registrationNumber'] = $data['registrationNumber'] ?? null;
        $this->container['taxNumber'] = $data['taxNumber'] ?? null;
        $this->container['financialYearEndDay'] = $data['financialYearEndDay'] ?? null;
        $this->container['financialYearEndMonth'] = $data['financialYearEndMonth'] ?? null;
        $this->container['salesTaxBasis'] = $data['salesTaxBasis'] ?? null;
        $this->container['salesTaxPeriod'] = $data['salesTaxPeriod'] ?? null;
        $this->container['defaultSalesTax'] = $data['defaultSalesTax'] ?? null;
        $this->container['defaultPurchasesTax'] = $data['defaultPurchasesTax'] ?? null;
        $this->container['periodLockDate'] = $data['periodLockDate'] ?? null;
        $this->container['endOfYearLockDate'] = $data['endOfYearLockDate'] ?? null;
        $this->container['createdDateUTC'] = $data['createdDateUTC'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['organisationEntityType'] = $data['organisationEntityType'] ?? null;
        $this->container['shortCode'] = $data['shortCode'] ?? null;
        $this->container['class'] = $data['class'] ?? null;
        $this->container['edition'] = $data['edition'] ?? null;
        $this->container['lineOfBusiness'] = $data['lineOfBusiness'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['phones'] = $data['phones'] ?? null;
        $this->container['externalLinks'] = $data['externalLinks'] ?? null;
        $this->container['paymentTerms'] = $data['paymentTerms'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($this->container['version']) && !in_array($this->container['version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'version',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getOrganisationTypeAllowableValues();
        if (!is_null($this->container['organisationType']) && !in_array($this->container['organisationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'organisationType',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getSalesTaxBasisAllowableValues();
        if (!is_null($this->container['salesTaxBasis']) && !in_array($this->container['salesTaxBasis'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'salesTaxBasis',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getSalesTaxPeriodAllowableValues();
        if (!is_null($this->container['salesTaxPeriod']) && !in_array($this->container['salesTaxPeriod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'salesTaxPeriod',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getOrganisationEntityTypeAllowableValues();
        if (!is_null($this->container['organisationEntityType']) && !in_array($this->container['organisationEntityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'organisationEntityType',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getClassAllowableValues();
        if (!is_null($this->container['class']) && !in_array($this->container['class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'class',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getEditionAllowableValues();
        if (!is_null($this->container['edition']) && !in_array($this->container['edition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'edition',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organisationID
     *
     * @return string|null
     */
    public function getOrganisationID()
    {
        return $this->get('organisationID');
    }

    /**
     * Sets organisationID
     *
     * @param string|null $organisationID Unique Xero identifier
     *
     * @return $this
     */
    public function setOrganisationID($organisationID)
    {
        $this->container['organisationID'] = $organisationID;

        return $this;
    }

    /**
     * Gets aPIKey
     *
     * @return string|null
     */
    public function getAPIKey()
    {
        return $this->get('aPIKey');
    }

    /**
     * Sets aPIKey
     *
     * @param string|null $aPIKey Display a unique key used for Xero-to-Xero transactions
     *
     * @return $this
     */
    public function setAPIKey($aPIKey)
    {
        $this->container['aPIKey'] = $aPIKey;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->get('name');
    }

    /**
     * Sets name
     *
     * @param string|null $name Display name of organisation shown in Xero
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets legalName
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->get('legalName');
    }

    /**
     * Sets legalName
     *
     * @param string|null $legalName Organisation name shown on Reports
     *
     * @return $this
     */
    public function setLegalName($legalName)
    {
        $this->container['legalName'] = $legalName;

        return $this;
    }

    /**
     * Gets paysTax
     *
     * @return bool|null
     */
    public function getPaysTax()
    {
        return $this->get('paysTax');
    }

    /**
     * Sets paysTax
     *
     * @param bool|null $paysTax Boolean to describe if organisation is registered with a local tax authority i.e. true, false
     *
     * @return $this
     */
    public function setPaysTax($paysTax)
    {
        $this->container['paysTax'] = $paysTax;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->get('version');
    }

    /**
     * Sets version
     *
     * @param string|null $version See Version Types
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $allowedValues = $this->getVersionAllowableValues();
        if (! is_null($version) && !in_array($version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'version',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets organisationType
     *
     * @return string|null
     */
    public function getOrganisationType()
    {
        return $this->get('organisationType');
    }

    /**
     * Sets organisationType
     *
     * @param string|null $organisationType Organisation Type
     *
     * @return $this
     */
    public function setOrganisationType($organisationType)
    {
        $allowedValues = $this->getOrganisationTypeAllowableValues();
        if (! is_null($organisationType) && !in_array($organisationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'organisationType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['organisationType'] = $organisationType;

        return $this;
    }

    /**
     * Gets baseCurrency
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null
     */
    public function getBaseCurrency()
    {
        return $this->get('baseCurrency');
    }

    /**
     * Sets baseCurrency
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null $baseCurrency baseCurrency
     *
     * @return $this
     */
    public function setBaseCurrency($baseCurrency)
    {
        $this->container['baseCurrency'] = $baseCurrency;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CountryCode|null
     */
    public function getCountryCode()
    {
        return $this->get('countryCode');
    }

    /**
     * Sets countryCode
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CountryCode|null $countryCode countryCode
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets isDemoCompany
     *
     * @return bool|null
     */
    public function getIsDemoCompany()
    {
        return $this->get('isDemoCompany');
    }

    /**
     * Sets isDemoCompany
     *
     * @param bool|null $isDemoCompany Boolean to describe if organisation is a demo company.
     *
     * @return $this
     */
    public function setIsDemoCompany($isDemoCompany)
    {
        $this->container['isDemoCompany'] = $isDemoCompany;

        return $this;
    }

    /**
     * Gets organisationStatus
     *
     * @return string|null
     */
    public function getOrganisationStatus()
    {
        return $this->get('organisationStatus');
    }

    /**
     * Sets organisationStatus
     *
     * @param string|null $organisationStatus Will be set to ACTIVE if you can connect to organisation via the Xero API
     *
     * @return $this
     */
    public function setOrganisationStatus($organisationStatus)
    {
        $this->container['organisationStatus'] = $organisationStatus;

        return $this;
    }

    /**
     * Gets registrationNumber
     *
     * @return string|null
     */
    public function getRegistrationNumber()
    {
        return $this->get('registrationNumber');
    }

    /**
     * Sets registrationNumber
     *
     * @param string|null $registrationNumber Shows for New Zealand, Australian and UK organisations
     *
     * @return $this
     */
    public function setRegistrationNumber($registrationNumber)
    {
        $this->container['registrationNumber'] = $registrationNumber;

        return $this;
    }

    /**
     * Gets taxNumber
     *
     * @return string|null
     */
    public function getTaxNumber()
    {
        return $this->get('taxNumber');
    }

    /**
     * Sets taxNumber
     *
     * @param string|null $taxNumber Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).
     *
     * @return $this
     */
    public function setTaxNumber($taxNumber)
    {
        $this->container['taxNumber'] = $taxNumber;

        return $this;
    }

    /**
     * Gets financialYearEndDay
     *
     * @return int|null
     */
    public function getFinancialYearEndDay()
    {
        return $this->get('financialYearEndDay');
    }

    /**
     * Sets financialYearEndDay
     *
     * @param int|null $financialYearEndDay Calendar day e.g. 0-31
     *
     * @return $this
     */
    public function setFinancialYearEndDay($financialYearEndDay)
    {
        $this->container['financialYearEndDay'] = $financialYearEndDay;

        return $this;
    }

    /**
     * Gets financialYearEndMonth
     *
     * @return int|null
     */
    public function getFinancialYearEndMonth()
    {
        return $this->get('financialYearEndMonth');
    }

    /**
     * Sets financialYearEndMonth
     *
     * @param int|null $financialYearEndMonth Calendar Month e.g. 1-12
     *
     * @return $this
     */
    public function setFinancialYearEndMonth($financialYearEndMonth)
    {
        $this->container['financialYearEndMonth'] = $financialYearEndMonth;

        return $this;
    }

    /**
     * Gets salesTaxBasis
     *
     * @return string|null
     */
    public function getSalesTaxBasis()
    {
        return $this->get('salesTaxBasis');
    }

    /**
     * Sets salesTaxBasis
     *
     * @param string|null $salesTaxBasis The accounting basis used for tax returns. See Sales Tax Basis
     *
     * @return $this
     */
    public function setSalesTaxBasis($salesTaxBasis)
    {
        $allowedValues = $this->getSalesTaxBasisAllowableValues();
        if (! is_null($salesTaxBasis) && !in_array($salesTaxBasis, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'salesTaxBasis',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['salesTaxBasis'] = $salesTaxBasis;

        return $this;
    }

    /**
     * Gets salesTaxPeriod
     *
     * @return string|null
     */
    public function getSalesTaxPeriod()
    {
        return $this->get('salesTaxPeriod');
    }

    /**
     * Sets salesTaxPeriod
     *
     * @param string|null $salesTaxPeriod The frequency with which tax returns are processed. See Sales Tax Period
     *
     * @return $this
     */
    public function setSalesTaxPeriod($salesTaxPeriod)
    {
        $allowedValues = $this->getSalesTaxPeriodAllowableValues();
        if (! is_null($salesTaxPeriod) && !in_array($salesTaxPeriod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'salesTaxPeriod',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['salesTaxPeriod'] = $salesTaxPeriod;

        return $this;
    }

    /**
     * Gets defaultSalesTax
     *
     * @return string|null
     */
    public function getDefaultSalesTax()
    {
        return $this->get('defaultSalesTax');
    }

    /**
     * Sets defaultSalesTax
     *
     * @param string|null $defaultSalesTax The default for LineAmountTypes on sales transactions
     *
     * @return $this
     */
    public function setDefaultSalesTax($defaultSalesTax)
    {
        $this->container['defaultSalesTax'] = $defaultSalesTax;

        return $this;
    }

    /**
     * Gets defaultPurchasesTax
     *
     * @return string|null
     */
    public function getDefaultPurchasesTax()
    {
        return $this->get('defaultPurchasesTax');
    }

    /**
     * Sets defaultPurchasesTax
     *
     * @param string|null $defaultPurchasesTax The default for LineAmountTypes on purchase transactions
     *
     * @return $this
     */
    public function setDefaultPurchasesTax($defaultPurchasesTax)
    {
        $this->container['defaultPurchasesTax'] = $defaultPurchasesTax;

        return $this;
    }

    /**
     * Gets periodLockDate
     *
     * @return \DateTime|null
     */
    public function getPeriodLockDate()
    {
        return $this->get('periodLockDate');
    }

    /**
     * Sets periodLockDate
     *
     * @param \DateTime|null $periodLockDate Shown if set. See lock dates
     *
     * @return $this
     */
    public function setPeriodLockDate($periodLockDate)
    {
        $this->container['periodLockDate'] = $periodLockDate;

        return $this;
    }

    /**
     * Gets endOfYearLockDate
     *
     * @return \DateTime|null
     */
    public function getEndOfYearLockDate()
    {
        return $this->get('endOfYearLockDate');
    }

    /**
     * Sets endOfYearLockDate
     *
     * @param \DateTime|null $endOfYearLockDate Shown if set. See lock dates
     *
     * @return $this
     */
    public function setEndOfYearLockDate($endOfYearLockDate)
    {
        $this->container['endOfYearLockDate'] = $endOfYearLockDate;

        return $this;
    }

    /**
     * Gets createdDateUTC
     *
     * @return \DateTime|null
     */
    public function getCreatedDateUTC()
    {
        return $this->get('createdDateUTC');
    }

    /**
     * Sets createdDateUTC
     *
     * @param \DateTime|null $createdDateUTC Timestamp when the organisation was created in Xero
     *
     * @return $this
     */
    public function setCreatedDateUTC($createdDateUTC)
    {
        $this->container['createdDateUTC'] = $createdDateUTC;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \Consilience\Xero\AccountingSdk\Model\TimeZone|null
     */
    public function getTimezone()
    {
        return $this->get('timezone');
    }

    /**
     * Sets timezone
     *
     * @param \Consilience\Xero\AccountingSdk\Model\TimeZone|null $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets organisationEntityType
     *
     * @return string|null
     */
    public function getOrganisationEntityType()
    {
        return $this->get('organisationEntityType');
    }

    /**
     * Sets organisationEntityType
     *
     * @param string|null $organisationEntityType Organisation Type
     *
     * @return $this
     */
    public function setOrganisationEntityType($organisationEntityType)
    {
        $allowedValues = $this->getOrganisationEntityTypeAllowableValues();
        if (! is_null($organisationEntityType) && !in_array($organisationEntityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'organisationEntityType',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['organisationEntityType'] = $organisationEntityType;

        return $this;
    }

    /**
     * Gets shortCode
     *
     * @return string|null
     */
    public function getShortCode()
    {
        return $this->get('shortCode');
    }

    /**
     * Sets shortCode
     *
     * @param string|null $shortCode A unique identifier for the organisation. Potential uses.
     *
     * @return $this
     */
    public function setShortCode($shortCode)
    {
        $this->container['shortCode'] = $shortCode;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->get('class');
    }

    /**
     * Sets class
     *
     * @param string|null $class Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
     *
     * @return $this
     */
    public function setClass($class)
    {
        $allowedValues = $this->getClassAllowableValues();
        if (! is_null($class) && !in_array($class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'class',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets edition
     *
     * @return string|null
     */
    public function getEdition()
    {
        return $this->get('edition');
    }

    /**
     * Sets edition
     *
     * @param string|null $edition BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
     *
     * @return $this
     */
    public function setEdition($edition)
    {
        $allowedValues = $this->getEditionAllowableValues();
        if (! is_null($edition) && !in_array($edition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'edition',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['edition'] = $edition;

        return $this;
    }

    /**
     * Gets lineOfBusiness
     *
     * @return string|null
     */
    public function getLineOfBusiness()
    {
        return $this->get('lineOfBusiness');
    }

    /**
     * Sets lineOfBusiness
     *
     * @param string|null $lineOfBusiness Description of business type as defined in Organisation settings
     *
     * @return $this
     */
    public function setLineOfBusiness($lineOfBusiness)
    {
        $this->container['lineOfBusiness'] = $lineOfBusiness;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->get('addresses');
    }

    /**
     * Sets addresses
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Address[]|null $addresses Address details for organisation – see Addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Phone[]|null
     */
    public function getPhones()
    {
        return $this->get('phones');
    }

    /**
     * Sets phones
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Phone[]|null $phones Phones details for organisation – see Phones
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets externalLinks
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ExternalLink[]|null
     */
    public function getExternalLinks()
    {
        return $this->get('externalLinks');
    }

    /**
     * Sets externalLinks
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ExternalLink[]|null $externalLinks Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
     *
     * @return $this
     */
    public function setExternalLinks($externalLinks)
    {
        $this->container['externalLinks'] = $externalLinks;

        return $this;
    }

    /**
     * Gets paymentTerms
     *
     * @return \Consilience\Xero\AccountingSdk\Model\PaymentTerm|null
     */
    public function getPaymentTerms()
    {
        return $this->get('paymentTerms');
    }

    /**
     * Sets paymentTerms
     *
     * @param \Consilience\Xero\AccountingSdk\Model\PaymentTerm|null $paymentTerms paymentTerms
     *
     * @return $this
     */
    public function setPaymentTerms($paymentTerms)
    {
        $this->container['paymentTerms'] = $paymentTerms;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
