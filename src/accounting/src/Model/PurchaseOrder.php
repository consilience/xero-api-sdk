<?php

namespace Consilience\Xero\AccountingSdk\Model;

/**
 * PurchaseOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\Xero\AccountingSdk\ObjectSerializer;

/**
 * PurchaseOrder Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\AccountingSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseOrder implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PurchaseOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact' => '\Consilience\Xero\AccountingSdk\Model\Contact',
        'lineItems' => '\Consilience\Xero\AccountingSdk\Model\LineItem[]',
        'date' => '\DateTime',
        'deliveryDate' => '\DateTime',
        'lineAmountTypes' => '\Consilience\Xero\AccountingSdk\Model\LineAmountTypes',
        'purchaseOrderNumber' => 'string',
        'reference' => 'string',
        'brandingThemeID' => 'string',
        'currencyCode' => '\Consilience\Xero\AccountingSdk\Model\CurrencyCode',
        'status' => 'string',
        'sentToContact' => 'bool',
        'deliveryAddress' => 'string',
        'attentionTo' => 'string',
        'telephone' => 'string',
        'deliveryInstructions' => 'string',
        'expectedArrivalDate' => '\DateTime',
        'purchaseOrderID' => 'string',
        'currencyRate' => 'double',
        'subTotal' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'totalDiscount' => 'double',
        'hasAttachments' => 'bool',
        'updatedDateUTC' => '\DateTime',
        'statusAttributeString' => 'string',
        'validationErrors' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]',
        'warnings' => '\Consilience\Xero\AccountingSdk\Model\ValidationError[]',
        'attachments' => '\Consilience\Xero\AccountingSdk\Model\Attachment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'contact' => null,
        'lineItems' => null,
        'date' => 'date',
        'deliveryDate' => 'date',
        'lineAmountTypes' => null,
        'purchaseOrderNumber' => null,
        'reference' => null,
        'brandingThemeID' => 'uuid',
        'currencyCode' => null,
        'status' => null,
        'sentToContact' => null,
        'deliveryAddress' => null,
        'attentionTo' => null,
        'telephone' => null,
        'deliveryInstructions' => null,
        'expectedArrivalDate' => 'date',
        'purchaseOrderID' => 'uuid',
        'currencyRate' => 'double',
        'subTotal' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'totalDiscount' => 'double',
        'hasAttachments' => null,
        'updatedDateUTC' => 'date-time',
        'statusAttributeString' => null,
        'validationErrors' => null,
        'warnings' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact' => 'Contact',
        'lineItems' => 'LineItems',
        'date' => 'Date',
        'deliveryDate' => 'DeliveryDate',
        'lineAmountTypes' => 'LineAmountTypes',
        'purchaseOrderNumber' => 'PurchaseOrderNumber',
        'reference' => 'Reference',
        'brandingThemeID' => 'BrandingThemeID',
        'currencyCode' => 'CurrencyCode',
        'status' => 'Status',
        'sentToContact' => 'SentToContact',
        'deliveryAddress' => 'DeliveryAddress',
        'attentionTo' => 'AttentionTo',
        'telephone' => 'Telephone',
        'deliveryInstructions' => 'DeliveryInstructions',
        'expectedArrivalDate' => 'ExpectedArrivalDate',
        'purchaseOrderID' => 'PurchaseOrderID',
        'currencyRate' => 'CurrencyRate',
        'subTotal' => 'SubTotal',
        'totalTax' => 'TotalTax',
        'total' => 'Total',
        'totalDiscount' => 'TotalDiscount',
        'hasAttachments' => 'HasAttachments',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'statusAttributeString' => 'StatusAttributeString',
        'validationErrors' => 'ValidationErrors',
        'warnings' => 'Warnings',
        'attachments' => 'Attachments'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'contact' => 'setContact',
        'lineItems' => 'setLineItems',
        'date' => 'setDate',
        'deliveryDate' => 'setDeliveryDate',
        'lineAmountTypes' => 'setLineAmountTypes',
        'purchaseOrderNumber' => 'setPurchaseOrderNumber',
        'reference' => 'setReference',
        'brandingThemeID' => 'setBrandingThemeID',
        'currencyCode' => 'setCurrencyCode',
        'status' => 'setStatus',
        'sentToContact' => 'setSentToContact',
        'deliveryAddress' => 'setDeliveryAddress',
        'attentionTo' => 'setAttentionTo',
        'telephone' => 'setTelephone',
        'deliveryInstructions' => 'setDeliveryInstructions',
        'expectedArrivalDate' => 'setExpectedArrivalDate',
        'purchaseOrderID' => 'setPurchaseOrderID',
        'currencyRate' => 'setCurrencyRate',
        'subTotal' => 'setSubTotal',
        'totalTax' => 'setTotalTax',
        'total' => 'setTotal',
        'totalDiscount' => 'setTotalDiscount',
        'hasAttachments' => 'setHasAttachments',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'statusAttributeString' => 'setStatusAttributeString',
        'validationErrors' => 'setValidationErrors',
        'warnings' => 'setWarnings',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'contact' => 'getContact',
        'lineItems' => 'getLineItems',
        'date' => 'getDate',
        'deliveryDate' => 'getDeliveryDate',
        'lineAmountTypes' => 'getLineAmountTypes',
        'purchaseOrderNumber' => 'getPurchaseOrderNumber',
        'reference' => 'getReference',
        'brandingThemeID' => 'getBrandingThemeID',
        'currencyCode' => 'getCurrencyCode',
        'status' => 'getStatus',
        'sentToContact' => 'getSentToContact',
        'deliveryAddress' => 'getDeliveryAddress',
        'attentionTo' => 'getAttentionTo',
        'telephone' => 'getTelephone',
        'deliveryInstructions' => 'getDeliveryInstructions',
        'expectedArrivalDate' => 'getExpectedArrivalDate',
        'purchaseOrderID' => 'getPurchaseOrderID',
        'currencyRate' => 'getCurrencyRate',
        'subTotal' => 'getSubTotal',
        'totalTax' => 'getTotalTax',
        'total' => 'getTotal',
        'totalDiscount' => 'getTotalDiscount',
        'hasAttachments' => 'getHasAttachments',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'statusAttributeString' => 'getStatusAttributeString',
        'validationErrors' => 'getValidationErrors',
        'warnings' => 'getWarnings',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_DRAFT = 'DRAFT';
    const STATUS_SUBMITTED = 'SUBMITTED';
    const STATUS_AUTHORISED = 'AUTHORISED';
    const STATUS_BILLED = 'BILLED';
    const STATUS_DELETED = 'DELETED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_SUBMITTED,
            self::STATUS_AUTHORISED,
            self::STATUS_BILLED,
            self::STATUS_DELETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact'] = $data['contact'] ?? null;
        $this->container['lineItems'] = $data['lineItems'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['deliveryDate'] = $data['deliveryDate'] ?? null;
        $this->container['lineAmountTypes'] = $data['lineAmountTypes'] ?? null;
        $this->container['purchaseOrderNumber'] = $data['purchaseOrderNumber'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['brandingThemeID'] = $data['brandingThemeID'] ?? null;
        $this->container['currencyCode'] = $data['currencyCode'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['sentToContact'] = $data['sentToContact'] ?? null;
        $this->container['deliveryAddress'] = $data['deliveryAddress'] ?? null;
        $this->container['attentionTo'] = $data['attentionTo'] ?? null;
        $this->container['telephone'] = $data['telephone'] ?? null;
        $this->container['deliveryInstructions'] = $data['deliveryInstructions'] ?? null;
        $this->container['expectedArrivalDate'] = $data['expectedArrivalDate'] ?? null;
        $this->container['purchaseOrderID'] = $data['purchaseOrderID'] ?? null;
        $this->container['currencyRate'] = $data['currencyRate'] ?? null;
        $this->container['subTotal'] = $data['subTotal'] ?? null;
        $this->container['totalTax'] = $data['totalTax'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['totalDiscount'] = $data['totalDiscount'] ?? null;
        $this->container['hasAttachments'] = $data['hasAttachments'] ?? null;
        $this->container['updatedDateUTC'] = $data['updatedDateUTC'] ?? null;
        $this->container['statusAttributeString'] = $data['statusAttributeString'] ?? null;
        $this->container['validationErrors'] = $data['validationErrors'] ?? null;
        $this->container['warnings'] = $data['warnings'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contact'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'contact');
        }
        if ($this->container['lineItems'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'lineItems');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'status',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Contact
     */
    public function getContact()
    {
        return $this->get('contact');
    }

    /**
     * Sets contact
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Contact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets lineItems
     *
     * @return \Consilience\Xero\AccountingSdk\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->get('lineItems');
    }

    /**
     * Sets lineItems
     *
     * @param \Consilience\Xero\AccountingSdk\Model\LineItem[] $lineItems See LineItems
     *
     * @return $this
     */
    public function setLineItems($lineItems)
    {
        $this->container['lineItems'] = $lineItems;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->get('date');
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->get('deliveryDate');
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime|null $deliveryDate Date the goods are to be delivered – YYYY-MM-DD
     *
     * @return $this
     */
    public function setDeliveryDate($deliveryDate)
    {
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets lineAmountTypes
     *
     * @return \Consilience\Xero\AccountingSdk\Model\LineAmountTypes|null
     */
    public function getLineAmountTypes()
    {
        return $this->get('lineAmountTypes');
    }

    /**
     * Sets lineAmountTypes
     *
     * @param \Consilience\Xero\AccountingSdk\Model\LineAmountTypes|null $lineAmountTypes lineAmountTypes
     *
     * @return $this
     */
    public function setLineAmountTypes($lineAmountTypes)
    {
        $this->container['lineAmountTypes'] = $lineAmountTypes;

        return $this;
    }

    /**
     * Gets purchaseOrderNumber
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->get('purchaseOrderNumber');
    }

    /**
     * Sets purchaseOrderNumber
     *
     * @param string|null $purchaseOrderNumber Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchaseOrderNumber)
    {
        $this->container['purchaseOrderNumber'] = $purchaseOrderNumber;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->get('reference');
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Additional reference number
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets brandingThemeID
     *
     * @return string|null
     */
    public function getBrandingThemeID()
    {
        return $this->get('brandingThemeID');
    }

    /**
     * Sets brandingThemeID
     *
     * @param string|null $brandingThemeID See BrandingThemes
     *
     * @return $this
     */
    public function setBrandingThemeID($brandingThemeID)
    {
        $this->container['brandingThemeID'] = $brandingThemeID;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null
     */
    public function getCurrencyCode()
    {
        return $this->get('currencyCode');
    }

    /**
     * Sets currencyCode
     *
     * @param \Consilience\Xero\AccountingSdk\Model\CurrencyCode|null $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->get('status');
    }

    /**
     * Sets status
     *
     * @param string|null $status See Purchase Order Status Codes
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'status',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sentToContact
     *
     * @return bool|null
     */
    public function getSentToContact()
    {
        return $this->get('sentToContact');
    }

    /**
     * Sets sentToContact
     *
     * @param bool|null $sentToContact Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
     *
     * @return $this
     */
    public function setSentToContact($sentToContact)
    {
        $this->container['sentToContact'] = $sentToContact;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return string|null
     */
    public function getDeliveryAddress()
    {
        return $this->get('deliveryAddress');
    }

    /**
     * Sets deliveryAddress
     *
     * @param string|null $deliveryAddress The address the goods are to be delivered to
     *
     * @return $this
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets attentionTo
     *
     * @return string|null
     */
    public function getAttentionTo()
    {
        return $this->get('attentionTo');
    }

    /**
     * Sets attentionTo
     *
     * @param string|null $attentionTo The person that the delivery is going to
     *
     * @return $this
     */
    public function setAttentionTo($attentionTo)
    {
        $this->container['attentionTo'] = $attentionTo;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone()
    {
        return $this->get('telephone');
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone The phone number for the person accepting the delivery
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets deliveryInstructions
     *
     * @return string|null
     */
    public function getDeliveryInstructions()
    {
        return $this->get('deliveryInstructions');
    }

    /**
     * Sets deliveryInstructions
     *
     * @param string|null $deliveryInstructions A free text feild for instructions (500 characters max)
     *
     * @return $this
     */
    public function setDeliveryInstructions($deliveryInstructions)
    {
        $this->container['deliveryInstructions'] = $deliveryInstructions;

        return $this;
    }

    /**
     * Gets expectedArrivalDate
     *
     * @return \DateTime|null
     */
    public function getExpectedArrivalDate()
    {
        return $this->get('expectedArrivalDate');
    }

    /**
     * Sets expectedArrivalDate
     *
     * @param \DateTime|null $expectedArrivalDate The date the goods are expected to arrive.
     *
     * @return $this
     */
    public function setExpectedArrivalDate($expectedArrivalDate)
    {
        $this->container['expectedArrivalDate'] = $expectedArrivalDate;

        return $this;
    }

    /**
     * Gets purchaseOrderID
     *
     * @return string|null
     */
    public function getPurchaseOrderID()
    {
        return $this->get('purchaseOrderID');
    }

    /**
     * Sets purchaseOrderID
     *
     * @param string|null $purchaseOrderID Xero generated unique identifier for purchase order
     *
     * @return $this
     */
    public function setPurchaseOrderID($purchaseOrderID)
    {
        $this->container['purchaseOrderID'] = $purchaseOrderID;

        return $this;
    }

    /**
     * Gets currencyRate
     *
     * @return double|null
     */
    public function getCurrencyRate()
    {
        return $this->get('currencyRate');
    }

    /**
     * Sets currencyRate
     *
     * @param double|null $currencyRate The currency rate for a multicurrency purchase order. As no rate can  be specified, the XE.com day rate is used.
     *
     * @return $this
     */
    public function setCurrencyRate($currencyRate)
    {
        $this->container['currencyRate'] = $currencyRate;

        return $this;
    }

    /**
     * Gets subTotal
     *
     * @return double|null
     */
    public function getSubTotal()
    {
        return $this->get('subTotal');
    }

    /**
     * Sets subTotal
     *
     * @param double|null $subTotal Total of purchase order excluding taxes
     *
     * @return $this
     */
    public function setSubTotal($subTotal)
    {
        $this->container['subTotal'] = $subTotal;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return double|null
     */
    public function getTotalTax()
    {
        return $this->get('totalTax');
    }

    /**
     * Sets totalTax
     *
     * @param double|null $totalTax Total tax on purchase order
     *
     * @return $this
     */
    public function setTotalTax($totalTax)
    {
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double|null
     */
    public function getTotal()
    {
        return $this->get('total');
    }

    /**
     * Sets total
     *
     * @param double|null $total Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets totalDiscount
     *
     * @return double|null
     */
    public function getTotalDiscount()
    {
        return $this->get('totalDiscount');
    }

    /**
     * Sets totalDiscount
     *
     * @param double|null $totalDiscount Total of discounts applied on the purchase order line items
     *
     * @return $this
     */
    public function setTotalDiscount($totalDiscount)
    {
        $this->container['totalDiscount'] = $totalDiscount;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments()
    {
        return $this->get('hasAttachments');
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments boolean to indicate if a purchase order has an attachment
     *
     * @return $this
     */
    public function setHasAttachments($hasAttachments)
    {
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->get('updatedDateUTC');
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified date UTC format
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets statusAttributeString
     *
     * @return string|null
     */
    public function getStatusAttributeString()
    {
        return $this->get('statusAttributeString');
    }

    /**
     * Sets statusAttributeString
     *
     * @param string|null $statusAttributeString A string to indicate if a invoice status
     *
     * @return $this
     */
    public function setStatusAttributeString($statusAttributeString)
    {
        $this->container['statusAttributeString'] = $statusAttributeString;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->get('validationErrors');
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null
     */
    public function getWarnings()
    {
        return $this->get('warnings');
    }

    /**
     * Sets warnings
     *
     * @param \Consilience\Xero\AccountingSdk\Model\ValidationError[]|null $warnings Displays array of warning messages from the API
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Consilience\Xero\AccountingSdk\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->get('attachments');
    }

    /**
     * Sets attachments
     *
     * @param \Consilience\Xero\AccountingSdk\Model\Attachment[]|null $attachments Displays array of attachments from the API
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
