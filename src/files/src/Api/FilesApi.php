<?php

namespace Consilience\Xero\FilesSdk\Api;

/**
 * FilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\Xero\FilesSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Xero Files API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// PSR-18
use Psr\Http\Client\ClientInterface;
use Psr\Http\Client\RequestExceptionInterface;
use Psr\Http\Client\NetworkExceptionInterface;

// PSR-7
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;
use Psr\Http\Message\StreamInterface;

// PSR-17
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

// Guzzle
use GuzzleHttp\ClientInterface as GuzzleClientInterface;

use Consilience\Xero\FilesSdk\ApiException;
use Consilience\Xero\FilesSdk\Configuration;
use Consilience\Xero\FilesSdk\HeaderSelector;
use Consilience\Xero\FilesSdk\ObjectSerializer;

use InvalidArgumentException;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Consilience\Xero\FilesSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FilesApi
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * FIXME: think about the client. We need a client that can handle both synchronous and
     * asynchronous requests. There is no PSR for asyn as yet, and implementations are so
     * diverse that we need to pick a specific implementaton (Guzzle, I guess). So do we
     * provide a wrapper that we can put one, the other, or both into? Even when there is a
     * PSR for promises, it will not be PSR-18, so we would still need two clients I believe.
     * The wrapper would support both interfaces for PSR-18 and whatever provides async requests.
     * We cannot do that with generator templates alone. We'll just add them to the configuration,
     * like the factories to avoid making this a blocker.
     *
     * @param ClientInterface|GuzzleClient $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->setConfig($config ?: new Configuration());
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function setConfig(Configuration $config)
    {
        $this->config = $config;
        return $this;
    }

    /**
     * @param Configuration $config
     * @return $this
     */
    protected function withConfig(Configuration $config)
    {
        $clone = clone $this;
        return $clone->setConfig($config);
    }

    /**
     * Operation createFileAssociation
     *
     * create a new association
     *
     * @param  string $fileId File id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\Association $association association (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Association
     */
    public function createFileAssociation($fileId, $association = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createFileAssociationWithHttpInfo($fileId, $association);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation createFileAssociationWithHttpInfo
     *
     * create a new association
     *
     * @param  string $fileId File id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\Association $association (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Association, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFileAssociationWithHttpInfo($fileId, $association = null)
    {
        $request = $this->createFileAssociationRequest($fileId, $association);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Association'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Association';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createFileAssociation'
     *
     * @param  string $fileId File id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\Association $association (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createFileAssociationRequest($fileId, $association = null)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'createFileAssociation'
            ));
        }

        $resourcePath = '/Files/{FileId}/Associations';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($association)) {
            $_tempBody = $association;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation createFolder
     *
     * create a new folder
     *
     * @param  \Consilience\Xero\FilesSdk\Model\Folder $folder folder (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Folder
     */
    public function createFolder($folder = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->createFolderWithHttpInfo($folder);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation createFolderWithHttpInfo
     *
     * create a new folder
     *
     * @param  \Consilience\Xero\FilesSdk\Model\Folder $folder (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFolderWithHttpInfo($folder = null)
    {
        $request = $this->createFolderRequest($folder);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Folder'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Folder';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'createFolder'
     *
     * @param  \Consilience\Xero\FilesSdk\Model\Folder $folder (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function createFolderRequest($folder = null)
    {

        $resourcePath = '/Folders';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;
        if (isset($folder)) {
            $_tempBody = $folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }

    /**
     * Operation deleteFile
     *
     * delete a file
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\FileResponse204
     */
    public function deleteFile($fileId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->deleteFileWithHttpInfo($fileId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation deleteFileWithHttpInfo
     *
     * delete a file
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\FileResponse204, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileWithHttpInfo($fileId)
    {
        $request = $this->deleteFileRequest($fileId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 204:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\FileResponse204'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\FileResponse204';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'deleteFile'
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteFileRequest($fileId)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'deleteFile'
            ));
        }

        $resourcePath = '/Files/{FileId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'DELETE',
            $resourcePath
        );
    }

    /**
     * Operation deleteFileAssociation
     *
     * create a new association
     *
     * @param  string $fileId File id for single object (required)
     * @param  string $objectId Object id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\FileResponse204
     */
    public function deleteFileAssociation($fileId, $objectId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->deleteFileAssociationWithHttpInfo($fileId, $objectId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation deleteFileAssociationWithHttpInfo
     *
     * create a new association
     *
     * @param  string $fileId File id for single object (required)
     * @param  string $objectId Object id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\FileResponse204, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileAssociationWithHttpInfo($fileId, $objectId)
    {
        $request = $this->deleteFileAssociationRequest($fileId, $objectId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 204:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\FileResponse204'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\FileResponse204';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'deleteFileAssociation'
     *
     * @param  string $fileId File id for single object (required)
     * @param  string $objectId Object id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteFileAssociationRequest($fileId, $objectId)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'deleteFileAssociation'
            ));
        }
        // Verify the required parameter 'objectId' is set

        if ($objectId === null || (is_array($objectId) && count($objectId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'objectId',
                'deleteFileAssociation'
            ));
        }

        $resourcePath = '/Files/{FileId}/Associations/{ObjectId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }

        if ($objectId !== null) {
            $resourcePath = str_replace(
                '{' . 'ObjectId' . '}',
                ObjectSerializer::toPathValue($objectId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'DELETE',
            $resourcePath
        );
    }

    /**
     * Operation deleteFolder
     *
     * delete a folder
     *
     * @param  string $folderId Folder id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\FileResponse204
     */
    public function deleteFolder($folderId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->deleteFolderWithHttpInfo($folderId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation deleteFolderWithHttpInfo
     *
     * delete a folder
     *
     * @param  string $folderId Folder id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\FileResponse204, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFolderWithHttpInfo($folderId)
    {
        $request = $this->deleteFolderRequest($folderId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 204:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\FileResponse204'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\FileResponse204';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'deleteFolder'
     *
     * @param  string $folderId Folder id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteFolderRequest($folderId)
    {
        // Verify the required parameter 'folderId' is set

        if ($folderId === null || (is_array($folderId) && count($folderId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'folderId',
                'deleteFolder'
            ));
        }

        $resourcePath = '/Folders/{FolderId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($folderId !== null) {
            $resourcePath = str_replace(
                '{' . 'FolderId' . '}',
                ObjectSerializer::toPathValue($folderId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'DELETE',
            $resourcePath
        );
    }

    /**
     * Operation getAssociationsByObject
     *
     * searches files
     *
     * @param  string $objectId Object id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Association[]
     */
    public function getAssociationsByObject($objectId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getAssociationsByObjectWithHttpInfo($objectId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getAssociationsByObjectWithHttpInfo
     *
     * searches files
     *
     * @param  string $objectId Object id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Association[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssociationsByObjectWithHttpInfo($objectId)
    {
        $request = $this->getAssociationsByObjectRequest($objectId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Association[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Association[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getAssociationsByObject'
     *
     * @param  string $objectId Object id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getAssociationsByObjectRequest($objectId)
    {
        // Verify the required parameter 'objectId' is set

        if ($objectId === null || (is_array($objectId) && count($objectId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'objectId',
                'getAssociationsByObject'
            ));
        }

        $resourcePath = '/Associations/{ObjectId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($objectId !== null) {
            $resourcePath = str_replace(
                '{' . 'ObjectId' . '}',
                ObjectSerializer::toPathValue($objectId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFile
     *
     * searches for file by unique id
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\FileObject
     */
    public function getFile($fileId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getFileWithHttpInfo($fileId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getFileWithHttpInfo
     *
     * searches for file by unique id
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\FileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileWithHttpInfo($fileId)
    {
        $request = $this->getFileRequest($fileId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\FileObject'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\FileObject';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFile'
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFileRequest($fileId)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'getFile'
            ));
        }

        $resourcePath = '/Files/{FileId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFileAssociations
     *
     * searches files
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Association[]
     */
    public function getFileAssociations($fileId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getFileAssociationsWithHttpInfo($fileId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getFileAssociationsWithHttpInfo
     *
     * searches files
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Association[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileAssociationsWithHttpInfo($fileId)
    {
        $request = $this->getFileAssociationsRequest($fileId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Association[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Association[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFileAssociations'
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFileAssociationsRequest($fileId)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'getFileAssociations'
            ));
        }

        $resourcePath = '/Files/{FileId}/Associations';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFileContent
     *
     * searches files to retrieve the data
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \SplFileObject
     */
    public function getFileContent($fileId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getFileContentWithHttpInfo($fileId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getFileContentWithHttpInfo
     *
     * searches files to retrieve the data
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileContentWithHttpInfo($fileId)
    {
        $request = $this->getFileContentRequest($fileId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\SplFileObject'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\SplFileObject';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFileContent'
     *
     * @param  string $fileId File id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFileContentRequest($fileId)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'getFileContent'
            ));
        }

        $resourcePath = '/Files/{FileId}/Content';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFiles
     *
     * searches files
     *
     * @param  int $pagesize pass an optional page size value (optional)
     * @param  int $page number of records to skip for pagination (optional)
     * @param  string $sort values to sort by (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Files
     */
    public function getFiles($pagesize = null, $page = null, $sort = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getFilesWithHttpInfo($pagesize, $page, $sort);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getFilesWithHttpInfo
     *
     * searches files
     *
     * @param  int $pagesize pass an optional page size value (optional)
     * @param  int $page number of records to skip for pagination (optional)
     * @param  string $sort values to sort by (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Files, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFilesWithHttpInfo($pagesize = null, $page = null, $sort = null)
    {
        $request = $this->getFilesRequest($pagesize, $page, $sort);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Files'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Files';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFiles'
     *
     * @param  int $pagesize pass an optional page size value (optional)
     * @param  int $page number of records to skip for pagination (optional)
     * @param  string $sort values to sort by (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFilesRequest($pagesize = null, $page = null, $sort = null)
    {
        if ($pagesize !== null && $pagesize > 100) {
            throw new InvalidArgumentException(sprintf(
                'invalid value for "$%s" when calling %s.%s, must be smaller than or equal to %d.',
                'pagesize',
                'FilesApi',
                'getFiles',
                100
            ));
        }

        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException(sprintf(
                'invalid value for "$%s" when calling %s.%s, must be bigger than or equal to %d.',
                'page',
                'FilesApi',
                'getFiles',
                1
            ));
        }


        $resourcePath = '/Files';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($pagesize !== null) {
            $queryParams['pagesize'] = ObjectSerializer::toQueryValue($pagesize);
        }
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFolder
     *
     * searches specific folder by id
     *
     * @param  string $folderId Folder id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Folder
     */
    public function getFolder($folderId)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getFolderWithHttpInfo($folderId);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getFolderWithHttpInfo
     *
     * searches specific folder by id
     *
     * @param  string $folderId Folder id for single object (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderWithHttpInfo($folderId)
    {
        $request = $this->getFolderRequest($folderId);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Folder'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Folder';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFolder'
     *
     * @param  string $folderId Folder id for single object (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFolderRequest($folderId)
    {
        // Verify the required parameter 'folderId' is set

        if ($folderId === null || (is_array($folderId) && count($folderId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'folderId',
                'getFolder'
            ));
        }

        $resourcePath = '/Folders/{FolderId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($folderId !== null) {
            $resourcePath = str_replace(
                '{' . 'FolderId' . '}',
                ObjectSerializer::toPathValue($folderId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getFolders
     *
     * searches folder
     *
     * @param  string $sort values to sort by (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Folder[]
     */
    public function getFolders($sort = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getFoldersWithHttpInfo($sort);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getFoldersWithHttpInfo
     *
     * searches folder
     *
     * @param  string $sort values to sort by (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Folder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFoldersWithHttpInfo($sort = null)
    {
        $request = $this->getFoldersRequest($sort);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Folder[]'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Folder[]';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getFolders'
     *
     * @param  string $sort values to sort by (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getFoldersRequest($sort = null)
    {

        $resourcePath = '/Folders';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation getInbox
     *
     * searches inbox folder
     *
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Folder
     */
    public function getInbox()
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->getInboxWithHttpInfo();

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation getInboxWithHttpInfo
     *
     * searches inbox folder
     *
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboxWithHttpInfo()
    {
        $request = $this->getInboxRequest();

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Folder'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Folder';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'getInbox'
     *
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function getInboxRequest()
    {

        $resourcePath = '/Inbox';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        



        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'GET',
            $resourcePath
        );
    }

    /**
     * Operation updateFile
     *
     * Update a file
     *
     * @param  string $fileId File id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\FileObject $fileObject fileObject (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\FileObject
     */
    public function updateFile($fileId, $fileObject = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updateFileWithHttpInfo($fileId, $fileObject);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation updateFileWithHttpInfo
     *
     * Update a file
     *
     * @param  string $fileId File id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\FileObject $fileObject (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\FileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFileWithHttpInfo($fileId, $fileObject = null)
    {
        $request = $this->updateFileRequest($fileId, $fileObject);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\FileObject'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\FileObject';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updateFile'
     *
     * @param  string $fileId File id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\FileObject $fileObject (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updateFileRequest($fileId, $fileObject = null)
    {
        // Verify the required parameter 'fileId' is set

        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'fileId',
                'updateFile'
            ));
        }

        $resourcePath = '/Files/{FileId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'FileId' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($fileObject)) {
            $_tempBody = $fileObject;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'PUT',
            $resourcePath
        );
    }

    /**
     * Operation updateFolder
     *
     * update folder
     *
     * @param  string $folderId Folder id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\Folder $folder folder (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\Folder
     */
    public function updateFolder($folderId, $folder)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->updateFolderWithHttpInfo($folderId, $folder);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation updateFolderWithHttpInfo
     *
     * update folder
     *
     * @param  string $folderId Folder id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\Folder $folder (required)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFolderWithHttpInfo($folderId, $folder)
    {
        $request = $this->updateFolderRequest($folderId, $folder);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\Folder'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\Folder';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'updateFolder'
     *
     * @param  string $folderId Folder id for single object (required)
     * @param  \Consilience\Xero\FilesSdk\Model\Folder $folder (required)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function updateFolderRequest($folderId, $folder)
    {
        // Verify the required parameter 'folderId' is set

        if ($folderId === null || (is_array($folderId) && count($folderId) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'folderId',
                'updateFolder'
            ));
        }
        // Verify the required parameter 'folder' is set

        if ($folder === null || (is_array($folder) && count($folder) === 0)) {
            throw new InvalidArgumentException(sprintf(
                'Missing the required parameter $%s when calling %s',
                'folder',
                'updateFolder'
            ));
        }

        $resourcePath = '/Folders/{FolderId}';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        

// Path parameters
        if ($folderId !== null) {
            $resourcePath = str_replace(
                '{' . 'FolderId' . '}',
                ObjectSerializer::toPathValue($folderId),
                $resourcePath
            );
        }


        // Body parameter
        $_tempBody = null;
        if (isset($folder)) {
            $_tempBody = $folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'PUT',
            $resourcePath
        );
    }

    /**
     * Operation uploadFile
     *
     * upload an File
     *
     * @param  string $folderId pass an optional folder id to save file to specific folder (optional)
     * @param  string $body body (optional)
     * @param  string $name exact name of the file you are uploading (optional)
     * @param  string $filename filename (optional)
     * @param  string $mimeType mimeType (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \Consilience\Xero\FilesSdk\Model\FileObject
     */
    public function uploadFile($folderId = null, $body = null, $name = null, $filename = null, $mimeType = null)
    {
        ['model' => $model, 'request' => $request, 'response' => $response]
            = $this->uploadFileWithHttpInfo($folderId, $body, $name, $filename, $mimeType);

        $statusCode = (int)$response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $request,
                $response
            );
        }

        return $model;
    }

    /**
     * Operation uploadFileWithHttpInfo
     *
     * upload an File
     *
     * @param  string $folderId pass an optional folder id to save file to specific folder (optional)
     * @param  string $body (optional)
     * @param  string $name exact name of the file you are uploading (optional)
     * @param  string $filename (optional)
     * @param  string $mimeType (optional)
     *
     * @throws \Consilience\Xero\FilesSdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @throws RequestExceptionInterface if the request is malformed
     * @throws NetworkExceptionInterface if the network is down
     * @return array of \Consilience\Xero\FilesSdk\Model\FileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadFileWithHttpInfo($folderId = null, $body = null, $name = null, $filename = null, $mimeType = null)
    {
        $request = $this->uploadFileRequest($folderId, $body, $name, $filename, $mimeType);

        $response = $this->getSyncClient()->sendRequest($request);

        $statusCode = (int)$response->getStatusCode();

        switch($statusCode) {
            case 200:
                return [
                    'model' => ObjectSerializer::deserialize($response, '\Consilience\Xero\FilesSdk\Model\FileObject'),
                    'request' => $request,
                    'response' => $response
                ];
        }

        $returnType = '\Consilience\Xero\FilesSdk\Model\FileObject';

        return [
            'model' => ObjectSerializer::deserialize($response, $returnType),
            'request' => $request,
            'response' => $response
        ];
    }


    /**
     * Create request for operation 'uploadFile'
     *
     * @param  string $folderId pass an optional folder id to save file to specific folder (optional)
     * @param  string $body (optional)
     * @param  string $name exact name of the file you are uploading (optional)
     * @param  string $filename (optional)
     * @param  string $mimeType (optional)
     *
     * @throws InvalidArgumentException
     * @return RequestInterface
     */
    public function uploadFileRequest($folderId = null, $body = null, $name = null, $filename = null, $mimeType = null)
    {

        $resourcePath = '/Files';
        $formParams = [];
        $queryParams = [];
        $httpBody = null;
        $multipart = false;

        // Query parameters
        if ($folderId !== null) {
            $queryParams['folderId'] = ObjectSerializer::toQueryValue($folderId);
        }


// Form parameters
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }

        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }

        if ($filename !== null) {
            $formParams['filename'] = ObjectSerializer::toFormValue($filename);
        }

        if ($mimeType !== null) {
            $formParams['mimeType'] = ObjectSerializer::toFormValue($mimeType);
        }

        // Body parameter
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        
        // For model (json/xml)

        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present.

            if ($headers['Content-Type'] === 'application/json') {
                $httpBodyText = $this->jsonEncode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBodyText = $_tempBody;
            }

            $httpBody = $this->createStream($httpBodyText);
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }

                // FIXME: how do we do multiparts with PSR-7?
                // MultipartStream() is a Guzzle tool.

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = $this->createStream($this->jsonEncode($formParams));

            } else {
                // for HTTP post (form)
                $httpBody = $this->createStream($this->buildQuery($formParams));
            }
        }


        return $this->buildHttpRequest(
            $headers,
            $queryParams,
            $httpBody,
            'POST',
            $resourcePath
        );
    }


    /**
     * Return a PSR-7 request.
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri): RequestInterface
    {
        // Get the factory from Configuration.

        $requestFactory = $this->config->getRequestFactory();

        return $requestFactory->createRequest($method, $uri);
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createUri(string $uri = ''): UriInterface
    {
        // Get the factory from Configuration.

        $uriFactory = $this->config->getUriFactory();

        return $uriFactory->createUri($uri);
    }

    /**
     * Get a synchronous client.
     */
    protected function getSyncClient(): ClientInterface
    {
        return $this->config->getSyncClient();
    }

    /**
     * Get an asynchronous client.
     */
    protected function getAsyncClient(): GuzzleClientInterface
    {
        return $this->config->getAsyncClient();
    }

    /**
     * Return a PSR-7 URI.
     *
     * @return UriInterface
     */
    protected function createStream(string $content = ''): StreamInterface
    {
        // Get the factory from Configuration.

        $streamFactory = $this->config->getStreamFactory();

        return $streamFactory->createStream($content);
    }

    /**
    * Wrapper for JSON encoding that throws when an error occurs.
    *
    * @param mixed $value   The value being encoded
    * @param int    $options JSON encode option bitmask
    * @param int    $depth   Set the maximum depth. Must be greater than zero.
    *
    * @return string
    * @throws \InvalidArgumentException if the JSON cannot be encoded.
    * @link http://www.php.net/manual/en/function.json-encode.php
    */
    function jsonEncode($value, $options = 0, $depth = 512)
    {
        $json = \json_encode($value, $options, $depth);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new \InvalidArgumentException(
                'json_encode error: ' . json_last_error_msg()
            );
        }

        return $json;
    }

    /**
    * Safely opens a PHP stream resource using a filename.
    *
    * When fopen fails, PHP normally raises a warning. This function adds an
    * error handler that checks for errors and throws an exception instead.
    *
    * @param string $filename File to open
    * @param string $mode     Mode used to open the file
    *
    * @return resource
    * @throws \RuntimeException if the file cannot be opened
    */
    function tryFopen($filename, $mode)
    {
        $ex = null;
        set_error_handler(function () use ($filename, $mode, &$ex) {
            $ex = new \RuntimeException(sprintf(
                'Unable to open %s using mode %s: %s',
                $filename,
                $mode,
                func_get_args()[1]
            ));
        });

        $handle = fopen($filename, $mode);
        restore_error_handler();

        if ($ex) {
            /** @var $ex \RuntimeException */
            throw $ex;
        }

        return $handle;
    }

    /**
    * Build a query string from an array of key value pairs.
    *
    * This function can use the return value of parse_query() to build a query
    * string. This function does not modify the provided keys when an array is
    * encountered (like http_build_query would).
    *
    * @param array     $params   Query string parameters.
    * @param int|false $encoding Set to false to not encode, PHP_QUERY_RFC3986
    *                            to encode using RFC3986, or PHP_QUERY_RFC1738
    *                            to encode using RFC1738.
    * @return string
    */
    function buildQuery(array $params, $encoding = PHP_QUERY_RFC3986)
    {
        if (!$params) {
            return '';
        }
        if ($encoding === false) {
            $encoder = function ($str) { return $str; };
        } elseif ($encoding === PHP_QUERY_RFC3986) {
            $encoder = 'rawurlencode';
        } elseif ($encoding === PHP_QUERY_RFC1738) {
            $encoder = 'urlencode';
        } else {
            throw new \InvalidArgumentException('Invalid type');
        }
        $qs = '';
        foreach ($params as $k => $v) {
            $k = $encoder($k);
            if (!is_array($v)) {
                $qs .= $k;
                if ($v !== null) {
                    $qs .= '=' . $encoder($v);
                }
                $qs .= '&';
            } else {
                foreach ($v as $vv) {
                    $qs .= $k;
                    if ($vv !== null) {
                        $qs .= '=' . $encoder($vv);
                    }
                    $qs .= '&';
                }
            }
        }
        return $qs ? (string) substr($qs, 0, -1) : '';
    }

    /**
     * Build a HTTP message from the supplied parts.
     *
     * @param array $headers includes multipart headers, parameter headers, other headers
     * @param array $query all query parameters
     * @param StreamInterface body payload stream
     * @param string $httpMethod
     * @param string $resourcePath the path relative to the API base path
     */
    protected function buildHttpRequest(
        array $headers,
        array $query,
        ?StreamInterface $httpBody,
        string $httpMethod,
        string $resourcePath
    ) {
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }


        $url = $this->createUri($this->config->getHost() . $resourcePath);

        if (count($query)) {
            $url = $url->withQuery($this->buildQuery($query));
        }

        $request = $this->createRequest($httpMethod, $url);

        foreach ($headers as $name => $value) {
            $request = $request->withHeader($name, $value);
        }

        // Add the body if set.

        if ($httpBody) {
            $request = $request->withBody($httpBody);
        }

        return $request;
    }
}
