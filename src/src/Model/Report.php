<?php

namespace Consilience\XeroAccounting\Sdk\Model;

/**
 * Report
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\XeroAccounting\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\XeroAccounting\Sdk\ObjectSerializer;

/**
 * Report Class Doc Comment
 *
 * @category Class
 * @package  Consilience\XeroAccounting\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Report implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Report';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reportID' => 'string',
        'reportName' => 'string',
        'reportType' => 'string',
        'reportTitle' => 'string',
        'reportDate' => 'string',
        'updatedDateUTC' => '\DateTime',
        'contacts' => '\Consilience\XeroAccounting\Sdk\Model\TenNinteyNineContact[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'reportID' => 'UUID',
        'reportName' => null,
        'reportType' => null,
        'reportTitle' => null,
        'reportDate' => null,
        'updatedDateUTC' => 'date-time',
        'contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reportID' => 'ReportID',
        'reportName' => 'ReportName',
        'reportType' => 'ReportType',
        'reportTitle' => 'ReportTitle',
        'reportDate' => 'ReportDate',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'contacts' => 'Contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reportID' => 'setReportID',
        'reportName' => 'setReportName',
        'reportType' => 'setReportType',
        'reportTitle' => 'setReportTitle',
        'reportDate' => 'setReportDate',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'contacts' => 'setContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reportID' => 'getReportID',
        'reportName' => 'getReportName',
        'reportType' => 'getReportType',
        'reportTitle' => 'getReportTitle',
        'reportDate' => 'getReportDate',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'contacts' => 'getContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REPORT_TYPE_AGED_PAYABLES_BY_CONTACT = 'AgedPayablesByContact';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportTypeAllowableValues()
    {
        return [
            self::REPORT_TYPE_AGED_PAYABLES_BY_CONTACT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reportID'] = isset($data['reportID']) ? $data['reportID'] : null;
        $this->container['reportName'] = isset($data['reportName']) ? $data['reportName'] : null;
        $this->container['reportType'] = isset($data['reportType']) ? $data['reportType'] : null;
        $this->container['reportTitle'] = isset($data['reportTitle']) ? $data['reportTitle'] : null;
        $this->container['reportDate'] = isset($data['reportDate']) ? $data['reportDate'] : null;
        $this->container['updatedDateUTC'] = isset($data['updatedDateUTC']) ? $data['updatedDateUTC'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($this->container['reportType']) && !in_array($this->container['reportType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reportType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reportID
     *
     * @return string|null
     */
    public function getReportID()
    {
        return $this->container['reportID'];
    }

    /**
     * Sets reportID
     *
     * @param string|null $reportID See Prepayment Types
     *
     * @return $this
     */
    public function setReportID($reportID)
    {
        $this->container['reportID'] = $reportID;

        return $this;
    }

    /**
     * Gets reportName
     *
     * @return string|null
     */
    public function getReportName()
    {
        return $this->container['reportName'];
    }

    /**
     * Sets reportName
     *
     * @param string|null $reportName See Prepayment Types
     *
     * @return $this
     */
    public function setReportName($reportName)
    {
        $this->container['reportName'] = $reportName;

        return $this;
    }

    /**
     * Gets reportType
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType
     *
     * @param string|null $reportType See Prepayment Types
     *
     * @return $this
     */
    public function setReportType($reportType)
    {
        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($reportType) && !in_array($reportType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reportType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reportType'] = $reportType;

        return $this;
    }

    /**
     * Gets reportTitle
     *
     * @return string|null
     */
    public function getReportTitle()
    {
        return $this->container['reportTitle'];
    }

    /**
     * Sets reportTitle
     *
     * @param string|null $reportTitle See Prepayment Types
     *
     * @return $this
     */
    public function setReportTitle($reportTitle)
    {
        $this->container['reportTitle'] = $reportTitle;

        return $this;
    }

    /**
     * Gets reportDate
     *
     * @return string|null
     */
    public function getReportDate()
    {
        return $this->container['reportDate'];
    }

    /**
     * Sets reportDate
     *
     * @param string|null $reportDate Date of report
     *
     * @return $this
     */
    public function setReportDate($reportDate)
    {
        $this->container['reportDate'] = $reportDate;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->container['updatedDateUTC'];
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Updated Date
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\TenNinteyNineContact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\TenNinteyNineContact[]|null $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
