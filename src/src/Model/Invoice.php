<?php

namespace Consilience\XeroAccounting\Sdk\Model;

/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Consilience\XeroAccounting\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Consilience\XeroAccounting\Sdk\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Consilience\XeroAccounting\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Invoice implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'contact' => '\Consilience\XeroAccounting\Sdk\Model\Contact',
        'lineItems' => '\Consilience\XeroAccounting\Sdk\Model\LineItem[]',
        'date' => '\DateTime',
        'dueDate' => '\DateTime',
        'lineAmountTypes' => '\Consilience\XeroAccounting\Sdk\Model\LineAmountTypes',
        'invoiceNumber' => 'string',
        'reference' => 'string',
        'brandingThemeID' => 'string',
        'url' => 'string',
        'currencyCode' => '\Consilience\XeroAccounting\Sdk\Model\CurrencyCode',
        'currencyRate' => 'double',
        'status' => 'string',
        'sentToContact' => 'bool',
        'expectedPaymentDate' => '\DateTime',
        'plannedPaymentDate' => '\DateTime',
        'subTotal' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'totalDiscount' => 'double',
        'invoiceID' => 'string',
        'hasAttachments' => 'bool',
        'isDiscounted' => 'bool',
        'payments' => '\Consilience\XeroAccounting\Sdk\Model\Payment[]',
        'prepayments' => '\Consilience\XeroAccounting\Sdk\Model\Prepayment[]',
        'overpayments' => '\Consilience\XeroAccounting\Sdk\Model\Overpayment[]',
        'amountDue' => 'double',
        'amountPaid' => 'double',
        'fullyPaidOnDate' => '\DateTime',
        'amountCredited' => 'double',
        'updatedDateUTC' => '\DateTime',
        'creditNotes' => '\Consilience\XeroAccounting\Sdk\Model\CreditNote[]',
        'attachments' => '\Consilience\XeroAccounting\Sdk\Model\Attachment[]',
        'hasErrors' => 'bool',
        'statusAttributeString' => 'string',
        'validationErrors' => '\Consilience\XeroAccounting\Sdk\Model\ValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'contact' => null,
        'lineItems' => null,
        'date' => 'date',
        'dueDate' => 'date',
        'lineAmountTypes' => null,
        'invoiceNumber' => null,
        'reference' => null,
        'brandingThemeID' => 'uuid',
        'url' => null,
        'currencyCode' => null,
        'currencyRate' => 'double',
        'status' => null,
        'sentToContact' => null,
        'expectedPaymentDate' => 'date',
        'plannedPaymentDate' => 'date',
        'subTotal' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'totalDiscount' => 'double',
        'invoiceID' => 'uuid',
        'hasAttachments' => null,
        'isDiscounted' => null,
        'payments' => null,
        'prepayments' => null,
        'overpayments' => null,
        'amountDue' => 'double',
        'amountPaid' => 'double',
        'fullyPaidOnDate' => 'date',
        'amountCredited' => 'double',
        'updatedDateUTC' => 'date-time',
        'creditNotes' => null,
        'attachments' => null,
        'hasErrors' => null,
        'statusAttributeString' => null,
        'validationErrors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'contact' => 'Contact',
        'lineItems' => 'LineItems',
        'date' => 'Date',
        'dueDate' => 'DueDate',
        'lineAmountTypes' => 'LineAmountTypes',
        'invoiceNumber' => 'InvoiceNumber',
        'reference' => 'Reference',
        'brandingThemeID' => 'BrandingThemeID',
        'url' => 'Url',
        'currencyCode' => 'CurrencyCode',
        'currencyRate' => 'CurrencyRate',
        'status' => 'Status',
        'sentToContact' => 'SentToContact',
        'expectedPaymentDate' => 'ExpectedPaymentDate',
        'plannedPaymentDate' => 'PlannedPaymentDate',
        'subTotal' => 'SubTotal',
        'totalTax' => 'TotalTax',
        'total' => 'Total',
        'totalDiscount' => 'TotalDiscount',
        'invoiceID' => 'InvoiceID',
        'hasAttachments' => 'HasAttachments',
        'isDiscounted' => 'IsDiscounted',
        'payments' => 'Payments',
        'prepayments' => 'Prepayments',
        'overpayments' => 'Overpayments',
        'amountDue' => 'AmountDue',
        'amountPaid' => 'AmountPaid',
        'fullyPaidOnDate' => 'FullyPaidOnDate',
        'amountCredited' => 'AmountCredited',
        'updatedDateUTC' => 'UpdatedDateUTC',
        'creditNotes' => 'CreditNotes',
        'attachments' => 'Attachments',
        'hasErrors' => 'HasErrors',
        'statusAttributeString' => 'StatusAttributeString',
        'validationErrors' => 'ValidationErrors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'contact' => 'setContact',
        'lineItems' => 'setLineItems',
        'date' => 'setDate',
        'dueDate' => 'setDueDate',
        'lineAmountTypes' => 'setLineAmountTypes',
        'invoiceNumber' => 'setInvoiceNumber',
        'reference' => 'setReference',
        'brandingThemeID' => 'setBrandingThemeID',
        'url' => 'setUrl',
        'currencyCode' => 'setCurrencyCode',
        'currencyRate' => 'setCurrencyRate',
        'status' => 'setStatus',
        'sentToContact' => 'setSentToContact',
        'expectedPaymentDate' => 'setExpectedPaymentDate',
        'plannedPaymentDate' => 'setPlannedPaymentDate',
        'subTotal' => 'setSubTotal',
        'totalTax' => 'setTotalTax',
        'total' => 'setTotal',
        'totalDiscount' => 'setTotalDiscount',
        'invoiceID' => 'setInvoiceID',
        'hasAttachments' => 'setHasAttachments',
        'isDiscounted' => 'setIsDiscounted',
        'payments' => 'setPayments',
        'prepayments' => 'setPrepayments',
        'overpayments' => 'setOverpayments',
        'amountDue' => 'setAmountDue',
        'amountPaid' => 'setAmountPaid',
        'fullyPaidOnDate' => 'setFullyPaidOnDate',
        'amountCredited' => 'setAmountCredited',
        'updatedDateUTC' => 'setUpdatedDateUTC',
        'creditNotes' => 'setCreditNotes',
        'attachments' => 'setAttachments',
        'hasErrors' => 'setHasErrors',
        'statusAttributeString' => 'setStatusAttributeString',
        'validationErrors' => 'setValidationErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'contact' => 'getContact',
        'lineItems' => 'getLineItems',
        'date' => 'getDate',
        'dueDate' => 'getDueDate',
        'lineAmountTypes' => 'getLineAmountTypes',
        'invoiceNumber' => 'getInvoiceNumber',
        'reference' => 'getReference',
        'brandingThemeID' => 'getBrandingThemeID',
        'url' => 'getUrl',
        'currencyCode' => 'getCurrencyCode',
        'currencyRate' => 'getCurrencyRate',
        'status' => 'getStatus',
        'sentToContact' => 'getSentToContact',
        'expectedPaymentDate' => 'getExpectedPaymentDate',
        'plannedPaymentDate' => 'getPlannedPaymentDate',
        'subTotal' => 'getSubTotal',
        'totalTax' => 'getTotalTax',
        'total' => 'getTotal',
        'totalDiscount' => 'getTotalDiscount',
        'invoiceID' => 'getInvoiceID',
        'hasAttachments' => 'getHasAttachments',
        'isDiscounted' => 'getIsDiscounted',
        'payments' => 'getPayments',
        'prepayments' => 'getPrepayments',
        'overpayments' => 'getOverpayments',
        'amountDue' => 'getAmountDue',
        'amountPaid' => 'getAmountPaid',
        'fullyPaidOnDate' => 'getFullyPaidOnDate',
        'amountCredited' => 'getAmountCredited',
        'updatedDateUTC' => 'getUpdatedDateUTC',
        'creditNotes' => 'getCreditNotes',
        'attachments' => 'getAttachments',
        'hasErrors' => 'getHasErrors',
        'statusAttributeString' => 'getStatusAttributeString',
        'validationErrors' => 'getValidationErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_ACCREC = 'ACCREC';
    const TYPE_ACCPAY = 'ACCPAY';
    const STATUS_DRAFT = 'DRAFT';
    const STATUS_SUBMITTED = 'SUBMITTED';
    const STATUS_DELETED = 'DELETED';
    const STATUS_AUTHORISED = 'AUTHORISED';
    const STATUS_PAID = 'PAID';
    const STATUS_VOIDED = 'VOIDED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACCREC,
            self::TYPE_ACCPAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_SUBMITTED,
            self::STATUS_DELETED,
            self::STATUS_AUTHORISED,
            self::STATUS_PAID,
            self::STATUS_VOIDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['lineItems'] = isset($data['lineItems']) ? $data['lineItems'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['lineAmountTypes'] = isset($data['lineAmountTypes']) ? $data['lineAmountTypes'] : null;
        $this->container['invoiceNumber'] = isset($data['invoiceNumber']) ? $data['invoiceNumber'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['brandingThemeID'] = isset($data['brandingThemeID']) ? $data['brandingThemeID'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['currencyRate'] = isset($data['currencyRate']) ? $data['currencyRate'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sentToContact'] = isset($data['sentToContact']) ? $data['sentToContact'] : null;
        $this->container['expectedPaymentDate'] = isset($data['expectedPaymentDate']) ? $data['expectedPaymentDate'] : null;
        $this->container['plannedPaymentDate'] = isset($data['plannedPaymentDate']) ? $data['plannedPaymentDate'] : null;
        $this->container['subTotal'] = isset($data['subTotal']) ? $data['subTotal'] : null;
        $this->container['totalTax'] = isset($data['totalTax']) ? $data['totalTax'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['totalDiscount'] = isset($data['totalDiscount']) ? $data['totalDiscount'] : null;
        $this->container['invoiceID'] = isset($data['invoiceID']) ? $data['invoiceID'] : null;
        $this->container['hasAttachments'] = isset($data['hasAttachments']) ? $data['hasAttachments'] : null;
        $this->container['isDiscounted'] = isset($data['isDiscounted']) ? $data['isDiscounted'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['prepayments'] = isset($data['prepayments']) ? $data['prepayments'] : null;
        $this->container['overpayments'] = isset($data['overpayments']) ? $data['overpayments'] : null;
        $this->container['amountDue'] = isset($data['amountDue']) ? $data['amountDue'] : null;
        $this->container['amountPaid'] = isset($data['amountPaid']) ? $data['amountPaid'] : null;
        $this->container['fullyPaidOnDate'] = isset($data['fullyPaidOnDate']) ? $data['fullyPaidOnDate'] : null;
        $this->container['amountCredited'] = isset($data['amountCredited']) ? $data['amountCredited'] : null;
        $this->container['updatedDateUTC'] = isset($data['updatedDateUTC']) ? $data['updatedDateUTC'] : null;
        $this->container['creditNotes'] = isset($data['creditNotes']) ? $data['creditNotes'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['hasErrors'] = isset($data['hasErrors']) ? $data['hasErrors'] : null;
        $this->container['statusAttributeString'] = isset($data['statusAttributeString']) ? $data['statusAttributeString'] : null;
        $this->container['validationErrors'] = isset($data['validationErrors']) ? $data['validationErrors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['contact'] === null) {
            $invalidProperties[] = "'contact' can't be null";
        }
        if ($this->container['lineItems'] === null) {
            $invalidProperties[] = "'lineItems' can't be null";
        }
        if (!is_null($this->container['invoiceNumber']) && (mb_strlen($this->container['invoiceNumber']) > 255)) {
            $invalidProperties[] = "invalid value for 'invoiceNumber', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type See Invoice Types
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\Contact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\Contact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets lineItems
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->container['lineItems'];
    }

    /**
     * Sets lineItems
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\LineItem[] $lineItems See LineItems
     *
     * @return $this
     */
    public function setLineItems($lineItems)
    {
        $this->container['lineItems'] = $lineItems;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate Date invoice is due – YYYY-MM-DD
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets lineAmountTypes
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\LineAmountTypes|null
     */
    public function getLineAmountTypes()
    {
        return $this->container['lineAmountTypes'];
    }

    /**
     * Sets lineAmountTypes
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\LineAmountTypes|null $lineAmountTypes lineAmountTypes
     *
     * @return $this
     */
    public function setLineAmountTypes($lineAmountTypes)
    {
        $this->container['lineAmountTypes'] = $lineAmountTypes;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length = 255)
     *
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        if (!is_null($invoiceNumber) && (mb_strlen($invoiceNumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for $invoiceNumber when calling Invoice., must be smaller than or equal to 255.');
        }

        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference ACCREC only – additional reference number (max length = 255)
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Invoice., must be smaller than or equal to 255.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets brandingThemeID
     *
     * @return string|null
     */
    public function getBrandingThemeID()
    {
        return $this->container['brandingThemeID'];
    }

    /**
     * Sets brandingThemeID
     *
     * @param string|null $brandingThemeID See BrandingThemes
     *
     * @return $this
     */
    public function setBrandingThemeID($brandingThemeID)
    {
        $this->container['brandingThemeID'] = $brandingThemeID;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL link to a source document – shown as “Go to [appName]” in the Xero app
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\CurrencyCode|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\CurrencyCode|null $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets currencyRate
     *
     * @return double|null
     */
    public function getCurrencyRate()
    {
        return $this->container['currencyRate'];
    }

    /**
     * Sets currencyRate
     *
     * @param double|null $currencyRate The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length = [18].[6])
     *
     * @return $this
     */
    public function setCurrencyRate($currencyRate)
    {
        $this->container['currencyRate'] = $currencyRate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status See Invoice Status Codes
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sentToContact
     *
     * @return bool|null
     */
    public function getSentToContact()
    {
        return $this->container['sentToContact'];
    }

    /**
     * Sets sentToContact
     *
     * @param bool|null $sentToContact Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
     *
     * @return $this
     */
    public function setSentToContact($sentToContact)
    {
        $this->container['sentToContact'] = $sentToContact;

        return $this;
    }

    /**
     * Gets expectedPaymentDate
     *
     * @return \DateTime|null
     */
    public function getExpectedPaymentDate()
    {
        return $this->container['expectedPaymentDate'];
    }

    /**
     * Sets expectedPaymentDate
     *
     * @param \DateTime|null $expectedPaymentDate Shown on sales invoices (Accounts Receivable) when this has been set
     *
     * @return $this
     */
    public function setExpectedPaymentDate($expectedPaymentDate)
    {
        $this->container['expectedPaymentDate'] = $expectedPaymentDate;

        return $this;
    }

    /**
     * Gets plannedPaymentDate
     *
     * @return \DateTime|null
     */
    public function getPlannedPaymentDate()
    {
        return $this->container['plannedPaymentDate'];
    }

    /**
     * Sets plannedPaymentDate
     *
     * @param \DateTime|null $plannedPaymentDate Shown on bills (Accounts Payable) when this has been set
     *
     * @return $this
     */
    public function setPlannedPaymentDate($plannedPaymentDate)
    {
        $this->container['plannedPaymentDate'] = $plannedPaymentDate;

        return $this;
    }

    /**
     * Gets subTotal
     *
     * @return double|null
     */
    public function getSubTotal()
    {
        return $this->container['subTotal'];
    }

    /**
     * Sets subTotal
     *
     * @param double|null $subTotal Total of invoice excluding taxes
     *
     * @return $this
     */
    public function setSubTotal($subTotal)
    {
        $this->container['subTotal'] = $subTotal;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return double|null
     */
    public function getTotalTax()
    {
        return $this->container['totalTax'];
    }

    /**
     * Sets totalTax
     *
     * @param double|null $totalTax Total tax on invoice
     *
     * @return $this
     */
    public function setTotalTax($totalTax)
    {
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double|null $total Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets totalDiscount
     *
     * @return double|null
     */
    public function getTotalDiscount()
    {
        return $this->container['totalDiscount'];
    }

    /**
     * Sets totalDiscount
     *
     * @param double|null $totalDiscount Total of discounts applied on the invoice line items
     *
     * @return $this
     */
    public function setTotalDiscount($totalDiscount)
    {
        $this->container['totalDiscount'] = $totalDiscount;

        return $this;
    }

    /**
     * Gets invoiceID
     *
     * @return string|null
     */
    public function getInvoiceID()
    {
        return $this->container['invoiceID'];
    }

    /**
     * Sets invoiceID
     *
     * @param string|null $invoiceID Xero generated unique identifier for invoice
     *
     * @return $this
     */
    public function setInvoiceID($invoiceID)
    {
        $this->container['invoiceID'] = $invoiceID;

        return $this;
    }

    /**
     * Gets hasAttachments
     *
     * @return bool|null
     */
    public function getHasAttachments()
    {
        return $this->container['hasAttachments'];
    }

    /**
     * Sets hasAttachments
     *
     * @param bool|null $hasAttachments boolean to indicate if an invoice has an attachment
     *
     * @return $this
     */
    public function setHasAttachments($hasAttachments)
    {
        $this->container['hasAttachments'] = $hasAttachments;

        return $this;
    }

    /**
     * Gets isDiscounted
     *
     * @return bool|null
     */
    public function getIsDiscounted()
    {
        return $this->container['isDiscounted'];
    }

    /**
     * Sets isDiscounted
     *
     * @param bool|null $isDiscounted boolean to indicate if an invoice has a discount
     *
     * @return $this
     */
    public function setIsDiscounted($isDiscounted)
    {
        $this->container['isDiscounted'] = $isDiscounted;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\Payment[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\Payment[]|null $payments See Payments
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets prepayments
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\Prepayment[]|null
     */
    public function getPrepayments()
    {
        return $this->container['prepayments'];
    }

    /**
     * Sets prepayments
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\Prepayment[]|null $prepayments See Prepayments
     *
     * @return $this
     */
    public function setPrepayments($prepayments)
    {
        $this->container['prepayments'] = $prepayments;

        return $this;
    }

    /**
     * Gets overpayments
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\Overpayment[]|null
     */
    public function getOverpayments()
    {
        return $this->container['overpayments'];
    }

    /**
     * Sets overpayments
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\Overpayment[]|null $overpayments See Overpayments
     *
     * @return $this
     */
    public function setOverpayments($overpayments)
    {
        $this->container['overpayments'] = $overpayments;

        return $this;
    }

    /**
     * Gets amountDue
     *
     * @return double|null
     */
    public function getAmountDue()
    {
        return $this->container['amountDue'];
    }

    /**
     * Sets amountDue
     *
     * @param double|null $amountDue Amount remaining to be paid on invoice
     *
     * @return $this
     */
    public function setAmountDue($amountDue)
    {
        $this->container['amountDue'] = $amountDue;

        return $this;
    }

    /**
     * Gets amountPaid
     *
     * @return double|null
     */
    public function getAmountPaid()
    {
        return $this->container['amountPaid'];
    }

    /**
     * Sets amountPaid
     *
     * @param double|null $amountPaid Sum of payments received for invoice
     *
     * @return $this
     */
    public function setAmountPaid($amountPaid)
    {
        $this->container['amountPaid'] = $amountPaid;

        return $this;
    }

    /**
     * Gets fullyPaidOnDate
     *
     * @return \DateTime|null
     */
    public function getFullyPaidOnDate()
    {
        return $this->container['fullyPaidOnDate'];
    }

    /**
     * Sets fullyPaidOnDate
     *
     * @param \DateTime|null $fullyPaidOnDate The date the invoice was fully paid. Only returned on fully paid invoices
     *
     * @return $this
     */
    public function setFullyPaidOnDate($fullyPaidOnDate)
    {
        $this->container['fullyPaidOnDate'] = $fullyPaidOnDate;

        return $this;
    }

    /**
     * Gets amountCredited
     *
     * @return double|null
     */
    public function getAmountCredited()
    {
        return $this->container['amountCredited'];
    }

    /**
     * Sets amountCredited
     *
     * @param double|null $amountCredited Sum of all credit notes, over-payments and pre-payments applied to invoice
     *
     * @return $this
     */
    public function setAmountCredited($amountCredited)
    {
        $this->container['amountCredited'] = $amountCredited;

        return $this;
    }

    /**
     * Gets updatedDateUTC
     *
     * @return \DateTime|null
     */
    public function getUpdatedDateUTC()
    {
        return $this->container['updatedDateUTC'];
    }

    /**
     * Sets updatedDateUTC
     *
     * @param \DateTime|null $updatedDateUTC Last modified date UTC format
     *
     * @return $this
     */
    public function setUpdatedDateUTC($updatedDateUTC)
    {
        $this->container['updatedDateUTC'] = $updatedDateUTC;

        return $this;
    }

    /**
     * Gets creditNotes
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\CreditNote[]|null
     */
    public function getCreditNotes()
    {
        return $this->container['creditNotes'];
    }

    /**
     * Sets creditNotes
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\CreditNote[]|null $creditNotes Details of credit notes that have been applied to an invoice
     *
     * @return $this
     */
    public function setCreditNotes($creditNotes)
    {
        $this->container['creditNotes'] = $creditNotes;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\Attachment[]|null $attachments Displays array of attachments from the API
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets hasErrors
     *
     * @return bool|null
     */
    public function getHasErrors()
    {
        return $this->container['hasErrors'];
    }

    /**
     * Sets hasErrors
     *
     * @param bool|null $hasErrors A boolean to indicate if a invoice has an validation errors
     *
     * @return $this
     */
    public function setHasErrors($hasErrors)
    {
        $this->container['hasErrors'] = $hasErrors;

        return $this;
    }

    /**
     * Gets statusAttributeString
     *
     * @return string|null
     */
    public function getStatusAttributeString()
    {
        return $this->container['statusAttributeString'];
    }

    /**
     * Sets statusAttributeString
     *
     * @param string|null $statusAttributeString A string to indicate if a invoice status
     *
     * @return $this
     */
    public function setStatusAttributeString($statusAttributeString)
    {
        $this->container['statusAttributeString'] = $statusAttributeString;

        return $this;
    }

    /**
     * Gets validationErrors
     *
     * @return \Consilience\XeroAccounting\Sdk\Model\ValidationError[]|null
     */
    public function getValidationErrors()
    {
        return $this->container['validationErrors'];
    }

    /**
     * Sets validationErrors
     *
     * @param \Consilience\XeroAccounting\Sdk\Model\ValidationError[]|null $validationErrors Displays array of validation error messages from the API
     *
     * @return $this
     */
    public function setValidationErrors($validationErrors)
    {
        $this->container['validationErrors'] = $validationErrors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
